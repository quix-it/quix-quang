{
    "pipes": [],
    "interfaces": [
        {
            "name": "LoaderState",
            "id": "interface-LoaderState-41f46bdfe17135d92d8f2d80f545d51dad9f8153e585ff57abefaf24309585aa4feac0f8cdfe25aa442349d0b2c066b23946fba25af59a497a91776bd666bf5b",
            "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store'\nimport { addLoader, removeLoader } from '../actions/loader.actions'\n\n/**\n * define loader state\n */\nexport interface LoaderState {\n  /**\n   * loaders number\n   */\n  loaders: number\n}\n\n/**\n * loader state initial value\n */\nconst initialState: LoaderState = {\n  loaders: 0\n}\n/**\n * define how loader state change\n */\nconst reducer = createReducer(\n  initialState,\n  on(addLoader, (state) => ({ ...state, loaders: state.loaders + 1 })),\n  on(removeLoader, (state) => ({ ...state, loaders: state.loaders - 1 }))\n)\n\n/**\n * define loader name\n * @param state\n * @param action\n */\nexport function loaderReducers (state: LoaderState | undefined, action: Action): any {\n  return reducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "loaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>loaders number</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nloaders number\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>define loader state</p>\n",
            "rawdescription": "\n\ndefine loader state\n",
            "methods": []
        },
        {
            "name": "OfflineState",
            "id": "interface-OfflineState-dd98371b1ad82b3e1400bb5bcddf35d93b84457659f0f55595c757e6c86903a280ce180b4ca22024d9723de3d3effb9c1c2aa2b81ff34a911dde63d1a2dac20e",
            "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store'\nimport { offline, online } from '../actions/offline.action'\n\n/**\n * define offline state\n */\nexport interface OfflineState {\n  /**\n   * define line state\n   */\n  line: boolean\n}\n\n/**\n * initial offline state value\n */\nconst initialState: OfflineState = {\n  line: true\n}\n/**\n * define how the state change\n */\nconst reducer = createReducer(\n  initialState,\n  on(online, state => ({ ...state, line: true })),\n  on(offline, state => ({ ...state, line: false }))\n)\n\n/**\n * define state name\n * @param state\n * @param action\n */\nexport function offlineReducer (state: OfflineState | undefined, action: Action): any {\n  return reducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "line",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>define line state</p>\n",
                    "line": 11,
                    "rawdescription": "\n\ndefine line state\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>define offline state</p>\n",
            "rawdescription": "\n\ndefine offline state\n",
            "methods": []
        },
        {
            "name": "QuangAuthModuleState",
            "id": "interface-QuangAuthModuleState-5f8af0c439bad50d766a7a37ee69abd010af522a541561ca268f5c8d27847df1c7557ebf0ea178ad583d55671277603f0a340f32e827d631e01820b1c632e426",
            "file": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { QUANGAUTH_KEY } from './quang-auth-module.selector'\nimport { ActionReducerMap } from '@ngrx/store'\nimport { QuangAuthUserState } from './quang-auth-store/reducers/quang-auth.reducers'\nimport { QuangAuthReducers } from './quang-auth-store/reducers'\n\n/**\n * interface that defines the state of the module\n */\nexport interface QuangAuthState {\n  /**\n   * user state\n   */\n  quangAuthUserState: QuangAuthUserState\n}\n\n/**\n * connection interface with the key for connection to the general state of the application\n */\nexport interface QuangAuthModuleState {\n  /**\n   * link key to state definition\n   */\n  [QUANGAUTH_KEY]: QuangAuthState\n}\n\n/**\n * definition of the reducer map\n */\nexport const quangAuthReducer: ActionReducerMap<QuangAuthState> = {\n  quangAuthUserState: QuangAuthReducers.quangAuthUserReducer\n}\n",
            "properties": [
                {
                    "name": "QUANGAUTH_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangAuthState",
                    "optional": false,
                    "description": "<p>link key to state definition</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nlink key to state definition\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>connection interface with the key for connection to the general state of the application</p>\n",
            "rawdescription": "\n\nconnection interface with the key for connection to the general state of the application\n",
            "methods": []
        },
        {
            "name": "QuangAuthState",
            "id": "interface-QuangAuthState-5f8af0c439bad50d766a7a37ee69abd010af522a541561ca268f5c8d27847df1c7557ebf0ea178ad583d55671277603f0a340f32e827d631e01820b1c632e426",
            "file": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { QUANGAUTH_KEY } from './quang-auth-module.selector'\nimport { ActionReducerMap } from '@ngrx/store'\nimport { QuangAuthUserState } from './quang-auth-store/reducers/quang-auth.reducers'\nimport { QuangAuthReducers } from './quang-auth-store/reducers'\n\n/**\n * interface that defines the state of the module\n */\nexport interface QuangAuthState {\n  /**\n   * user state\n   */\n  quangAuthUserState: QuangAuthUserState\n}\n\n/**\n * connection interface with the key for connection to the general state of the application\n */\nexport interface QuangAuthModuleState {\n  /**\n   * link key to state definition\n   */\n  [QUANGAUTH_KEY]: QuangAuthState\n}\n\n/**\n * definition of the reducer map\n */\nexport const quangAuthReducer: ActionReducerMap<QuangAuthState> = {\n  quangAuthUserState: QuangAuthReducers.quangAuthUserReducer\n}\n",
            "properties": [
                {
                    "name": "quangAuthUserState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangAuthUserState",
                    "optional": false,
                    "description": "<p>user state</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nuser state\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>interface that defines the state of the module</p>\n",
            "rawdescription": "\n\ninterface that defines the state of the module\n",
            "methods": []
        },
        {
            "name": "QuangAuthUserState",
            "id": "interface-QuangAuthUserState-2375e3d20247d3867869fe4a5de423beb3d3593746e4e63a82b2f675a0898df7d93f2ed2ec6f45950f2456fc1c6e50892d04add749e33d5e08829b43d17b5693",
            "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store'\nimport {\n  userInfoLogin,\n  userInfoLogout,\n  userLogin,\n  userLogout,\n  userRolesLogin,\n  userRolesLogout\n} from '../actions/quang-auth.actions'\n\n/**\n * store state\n */\nexport interface QuangAuthUserState {\n  /**\n   * define if user is authenticated\n   */\n  isAuthenticated: boolean\n  /**\n   * user data\n   */\n  user: any\n  /**\n   * user roles\n   */\n  roles: any[]\n}\n\n/**\n * store state initial value\n */\nconst initialValue: QuangAuthUserState = {\n  isAuthenticated: false,\n  user: null,\n  roles: []\n}\n/**\n * Defines how the state changes based on the actions called\n */\nconst reducer = createReducer(\n  initialValue,\n  on(userLogin, (state) => ({ ...state, isAuthenticated: true })),\n  on(userLogout, (state) => ({ ...state, isAuthenticated: false })),\n  on(userInfoLogin, (state, action) =>\n    ({ ...state, user: action.user })),\n  on(userInfoLogout, (state) => ({ ...state, user: null })),\n  on(userRolesLogin, (state, action) =>\n    ({ ...state, roles: action.roles })),\n  on(userRolesLogout, (state) => ({ ...state, user: null }))\n)\n\n/**\n * Defines the name of the reducer\n * @param state module state\n * @param action section action\n */\nexport function quangAuthUserReducer (state: QuangAuthUserState | undefined, action: Action): any {\n  return reducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>define if user is authenticated</p>\n",
                    "line": 18,
                    "rawdescription": "\n\ndefine if user is authenticated\n"
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>user roles</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nuser roles\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>user data</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nuser data\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>store state</p>\n",
            "rawdescription": "\n\nstore state\n",
            "methods": []
        },
        {
            "name": "QuangBusEventOptions",
            "id": "interface-QuangBusEventOptions-d1f897cf47445ffc854708f440f7a173950c23c8b55cba3db649678b1c777ff7e2336f6040d85e6a6fbaf9d35e2af2180039fb3e7a5d7bcae1b17e1baa27d6a7",
            "file": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\n\n/**\n * general declaration for global library\n */\ndeclare let EventBus: any\n\n/**\n * utility for event bus management\n */\nexport interface QuangBusEventOptions {\n  /**\n   * Max reconnect attempts\n   */\n  vertxbus_reconnect_attempts_max: number\n  /**\n   * Initial delay (in ms) before first reconnect attempt\n   */\n  vertxbus_reconnect_delay_min: number\n  /**\n   *  Max delay (in ms) between reconnect attempts\n   */\n  vertxbus_reconnect_delay_max: number\n  /**\n   * Exponential backoff factor\n   */\n  vertxbus_reconnect_exponent: number\n  /**\n   * Randomization factor between 0 and 1\n   */\n  vertxbus_randomization_factor: number\n}\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuangEventBusService {\n  /**\n   * the subject that outputs the returned values\n   */\n  bus: Subject<any> = new Subject<any>()\n  /**\n   * event bus wrapper\n   */\n  eb: any\n  /**\n   * event buss server address\n   */\n  address: string = ''\n  /**\n   * event bus headers\n   */\n  headers: object\n  /**\n   * event bus configuration\n   */\n  options: QuangBusEventOptions = {\n    vertxbus_reconnect_attempts_max: 5,\n    vertxbus_reconnect_delay_min: 1000,\n    vertxbus_reconnect_delay_max: 5000,\n    vertxbus_reconnect_exponent: 2,\n    vertxbus_randomization_factor: 0.5\n  }\n\n  /**\n   * open the event buss socket\n   * @param url\n   * @param address\n   * @param headers\n   * @param options\n   */\n  openSocket (url: string, address: string, headers?: object, options?: QuangBusEventOptions): Observable<any> {\n    this.headers = headers\n    this.address = address\n    this.eb = new EventBus(url, options || this.options)\n    this.eb.enableReconnect(true)\n    this.onOpen()\n    this.onReconnect()\n    return this.bus\n  }\n\n  /**\n   * send message on event bus socket\n   * @param message\n   */\n  sendMessage (message: string): void {\n    this.eb.send(this.address, message, (e, m) => {\n      if (e) {\n        console.error(e)\n      }\n    })\n  }\n\n  /**\n   * close the event bus socket\n   */\n  closeSocket (): void {\n    this.bus.complete()\n    if (this.eb) {\n      try {\n        this.eb.unregisterHandler(this.address, this.headers)\n      } catch (e) {\n\n      } finally {\n        this.eb.close()\n      }\n    }\n  }\n\n  /**\n   * when the socket is opened it sends a message in the observable indicating that the socket has been opened\n   * and listens to the messages\n   * @private\n   */\n  private onOpen (): void {\n    this.eb.onopen = () => {\n      console.log('Socket opened')\n      this.bus.next('socketInit')\n      this.onMessage()\n    }\n  }\n\n  /**\n   * when a reception event is issued, the message checks if it is an error,\n   * if it is not, it tries to transform the json of the response and does the next of the connected observable,\n   * if it is not a json it does the next of the response as it is\n   * @private\n   */\n  private onMessage (): void {\n    this.eb.registerHandler(this.address, (e, m) => {\n      if (e) {\n        this.onError(e)\n      } else {\n        try {\n          this.bus.next(JSON.parse(m.body))\n        } catch (e) {\n          this.bus.next(m.body)\n        }\n      }\n    })\n  }\n\n  /**\n   * handling of the error event\n   * @param error\n   * @private\n   */\n  private onError (error: Error): void {\n    this.bus.error(error)\n    console.error(error)\n  }\n\n  /**\n   * to do if necessary\n   * @private\n   */\n  private onReconnect (): void {\n  }\n}\n",
            "properties": [
                {
                    "name": "vertxbus_randomization_factor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Randomization factor between 0 and 1</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nRandomization factor between 0 and 1\n"
                },
                {
                    "name": "vertxbus_reconnect_attempts_max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Max reconnect attempts</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nMax reconnect attempts\n"
                },
                {
                    "name": "vertxbus_reconnect_delay_max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p> Max delay (in ms) between reconnect attempts</p>\n",
                    "line": 24,
                    "rawdescription": "\n\n Max delay (in ms) between reconnect attempts\n"
                },
                {
                    "name": "vertxbus_reconnect_delay_min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Initial delay (in ms) before first reconnect attempt</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nInitial delay (in ms) before first reconnect attempt\n"
                },
                {
                    "name": "vertxbus_reconnect_exponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Exponential backoff factor</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nExponential backoff factor\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>utility for event bus management</p>\n",
            "rawdescription": "\n\nutility for event bus management\n",
            "methods": []
        },
        {
            "name": "QuangDialogState",
            "id": "interface-QuangDialogState-5c9a0ba1cfa1d63eba85a6bf6bf24423b24e67c5864242335d941c442964cf585afda10876719538aaa8fc2cb947326b81423d7b66ddbede084b7e408082a4c1",
            "file": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store'\nimport { ToastsState } from './toast/toast-store/reducers/toast.reducers'\nimport { OfflineState } from './offline/offline-store/reducers/offline.reducer'\nimport { LoaderState } from './loader/loader-store/reducers/loader.reducers'\nimport { QUANGDIALOG_KEY } from './quang-dialog.selector'\nimport { ToastReducers } from './toast/toast-store/reducers'\nimport { OfflineReducers } from './offline/offline-store/reducers'\nimport { LoaderReducers } from './loader/loader-store/reducers'\n\n/**\n * interface that defines the state of the module\n */\nexport interface QuangDialogState {\n  /**\n   * toast state\n   */\n  toastState: ToastsState\n  /**\n   * offline state\n   */\n  offlineState: OfflineState\n  /**\n   * loader state\n   */\n  loaderState: LoaderState\n}\n\n/**\n * connection interface with the key for connection to the general state of the application\n */\nexport interface QuangDialogStateModule {\n  /**\n   * link key to state definition\n   */\n  [QUANGDIALOG_KEY]: QuangDialogState\n}\n\n/**\n * definition of the reducer map\n */\nexport const quangDialogReducers: ActionReducerMap<QuangDialogState> = {\n  toastState: ToastReducers.toastReducers,\n  offlineState: OfflineReducers.offlineReducer,\n  loaderState: LoaderReducers.loaderReducers\n}\n",
            "properties": [
                {
                    "name": "loaderState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderState",
                    "optional": false,
                    "description": "<p>loader state</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nloader state\n"
                },
                {
                    "name": "offlineState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OfflineState",
                    "optional": false,
                    "description": "<p>offline state</p>\n",
                    "line": 21,
                    "rawdescription": "\n\noffline state\n"
                },
                {
                    "name": "toastState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastsState",
                    "optional": false,
                    "description": "<p>toast state</p>\n",
                    "line": 17,
                    "rawdescription": "\n\ntoast state\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>interface that defines the state of the module</p>\n",
            "rawdescription": "\n\ninterface that defines the state of the module\n",
            "methods": []
        },
        {
            "name": "QuangDialogStateModule",
            "id": "interface-QuangDialogStateModule-5c9a0ba1cfa1d63eba85a6bf6bf24423b24e67c5864242335d941c442964cf585afda10876719538aaa8fc2cb947326b81423d7b66ddbede084b7e408082a4c1",
            "file": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store'\nimport { ToastsState } from './toast/toast-store/reducers/toast.reducers'\nimport { OfflineState } from './offline/offline-store/reducers/offline.reducer'\nimport { LoaderState } from './loader/loader-store/reducers/loader.reducers'\nimport { QUANGDIALOG_KEY } from './quang-dialog.selector'\nimport { ToastReducers } from './toast/toast-store/reducers'\nimport { OfflineReducers } from './offline/offline-store/reducers'\nimport { LoaderReducers } from './loader/loader-store/reducers'\n\n/**\n * interface that defines the state of the module\n */\nexport interface QuangDialogState {\n  /**\n   * toast state\n   */\n  toastState: ToastsState\n  /**\n   * offline state\n   */\n  offlineState: OfflineState\n  /**\n   * loader state\n   */\n  loaderState: LoaderState\n}\n\n/**\n * connection interface with the key for connection to the general state of the application\n */\nexport interface QuangDialogStateModule {\n  /**\n   * link key to state definition\n   */\n  [QUANGDIALOG_KEY]: QuangDialogState\n}\n\n/**\n * definition of the reducer map\n */\nexport const quangDialogReducers: ActionReducerMap<QuangDialogState> = {\n  toastState: ToastReducers.toastReducers,\n  offlineState: OfflineReducers.offlineReducer,\n  loaderState: LoaderReducers.loaderReducers\n}\n",
            "properties": [
                {
                    "name": "QUANGDIALOG_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangDialogState",
                    "optional": false,
                    "description": "<p>link key to state definition</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nlink key to state definition\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>connection interface with the key for connection to the general state of the application</p>\n",
            "rawdescription": "\n\nconnection interface with the key for connection to the general state of the application\n",
            "methods": []
        },
        {
            "name": "QuangKeycloakModuleState",
            "id": "interface-QuangKeycloakModuleState-83e79dde15b14a3efc5e16081ef1c380c046c714952366eb5cf6d9c9b634d8cff30111f5224c3f32aa84f2cfbee8cd9e904f6514bc2939a300ff9afedb0534e3",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store'\nimport { QUANGKEYCLOAK_KEY } from './quang-keycloak-module.selector'\nimport { QuangKeycloakUserState } from './quang-keycloak-store/reducers/quang-keycloak.reducers'\nimport { QuangKeycloakReducers } from './quang-keycloak-store/reducers'\n\n/**\n * interface that defines the state of the module\n */\nexport interface QuangKeycloakState {\n  /**\n   * auth state\n   */\n  quangKeycloakUserState: QuangKeycloakUserState\n}\n\n/**\n * connection interface with the key for connection to the general state of the application\n */\nexport interface QuangKeycloakModuleState {\n  /**\n   * link key to state definition\n   */\n  [QUANGKEYCLOAK_KEY]: QuangKeycloakState\n}\n\n/**\n * definition of the reducer map\n */\nexport const quangKeycloakReducer: ActionReducerMap<QuangKeycloakState> = {\n  quangKeycloakUserState: QuangKeycloakReducers.quangKeycloakUserReducer\n}\n",
            "properties": [
                {
                    "name": "QUANGKEYCLOAK_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangKeycloakState",
                    "optional": false,
                    "description": "<p>link key to state definition</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nlink key to state definition\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>connection interface with the key for connection to the general state of the application</p>\n",
            "rawdescription": "\n\nconnection interface with the key for connection to the general state of the application\n",
            "methods": []
        },
        {
            "name": "QuangKeycloakState",
            "id": "interface-QuangKeycloakState-83e79dde15b14a3efc5e16081ef1c380c046c714952366eb5cf6d9c9b634d8cff30111f5224c3f32aa84f2cfbee8cd9e904f6514bc2939a300ff9afedb0534e3",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store'\nimport { QUANGKEYCLOAK_KEY } from './quang-keycloak-module.selector'\nimport { QuangKeycloakUserState } from './quang-keycloak-store/reducers/quang-keycloak.reducers'\nimport { QuangKeycloakReducers } from './quang-keycloak-store/reducers'\n\n/**\n * interface that defines the state of the module\n */\nexport interface QuangKeycloakState {\n  /**\n   * auth state\n   */\n  quangKeycloakUserState: QuangKeycloakUserState\n}\n\n/**\n * connection interface with the key for connection to the general state of the application\n */\nexport interface QuangKeycloakModuleState {\n  /**\n   * link key to state definition\n   */\n  [QUANGKEYCLOAK_KEY]: QuangKeycloakState\n}\n\n/**\n * definition of the reducer map\n */\nexport const quangKeycloakReducer: ActionReducerMap<QuangKeycloakState> = {\n  quangKeycloakUserState: QuangKeycloakReducers.quangKeycloakUserReducer\n}\n",
            "properties": [
                {
                    "name": "quangKeycloakUserState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangKeycloakUserState",
                    "optional": false,
                    "description": "<p>auth state</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nauth state\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>interface that defines the state of the module</p>\n",
            "rawdescription": "\n\ninterface that defines the state of the module\n",
            "methods": []
        },
        {
            "name": "QuangKeycloakUserState",
            "id": "interface-QuangKeycloakUserState-d79bfb3d2cdbb83b72f9cf33f9d7a4c47589caf2e561b33571a28f7fa3992ea892bcf86c24629a76dc2b93c7ebb44d0d93d4b458d20796c9e916797a71718301",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store'\nimport {\n  userInfoLogin,\n  userInfoLogout,\n  userLogin,\n  userLogout,\n  userRolesLogin,\n  userRolesLogout\n} from '../actions/quang-keycloak.actions'\n\n/**\n * defines the state of the keycloak authentication store\n */\nexport interface QuangKeycloakUserState {\n  /**\n   * define is user is authenticated\n   */\n  isAuthenticated: boolean\n  /**\n   * define user data\n   */\n  user: any\n  /**\n   * define user roles\n   */\n  roles: any[]\n}\n/**\n * initial state of authentication store\n */\nconst initialValue: QuangKeycloakUserState = {\n  isAuthenticated: false,\n  user: null,\n  roles: []\n}\n/**\n * defines how the state changes when actions are triggered\n */\nconst reducer = createReducer(\n  initialValue,\n  on(userLogin, (state) => ({ ...state, isAuthenticated: true })),\n  on(userLogout, (state) => ({ ...state, isAuthenticated: false })),\n  on(userInfoLogin, (state, action) =>\n    ({ ...state, user: action.user })),\n  on(userInfoLogout, (state) => ({ ...state, user: null })),\n  on(userRolesLogin, (state, action) =>\n    ({ ...state, roles: action.roles })),\n  on(userRolesLogout, (state) => ({ ...state, roles: [] }))\n)\n/**\n * defines the name of the state reducer\n */\nexport function quangKeycloakUserReducer (state: QuangKeycloakUserState | undefined, action: Action): any {\n  return reducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>define is user is authenticated</p>\n",
                    "line": 18,
                    "rawdescription": "\n\ndefine is user is authenticated\n"
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>define user roles</p>\n",
                    "line": 26,
                    "rawdescription": "\n\ndefine user roles\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>define user data</p>\n",
                    "line": 22,
                    "rawdescription": "\n\ndefine user data\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>defines the state of the keycloak authentication store</p>\n",
            "rawdescription": "\n\ndefines the state of the keycloak authentication store\n",
            "methods": []
        },
        {
            "name": "ToastsState",
            "id": "interface-ToastsState-3144e53038d802e8cdfddf412750935aacee5b91e33cd57a5e8a5e62a2e67bd6b950ea10971dfc532e08dd311a17aec11db9dfc97e51fad524053656e0f454a0",
            "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store'\nimport { deleteToast, openToast } from '../actions/toast.actions'\nimport { QuangToast } from '../../toast.model'\n\n/**\n * define toast state in store\n */\nexport interface ToastsState {\n  /**\n   * toast data\n   */\n  toastData: QuangToast | null\n}\n\n/**\n * initial value of toast state\n */\nexport const initialState: ToastsState = { toastData: null }\n/**\n * defines how the status of the toast changes in the store\n */\nconst reducer = createReducer(\n  initialState,\n  on(openToast, (state, action) =>\n    ({ ...state, toastData: action.toastData })\n  ),\n  on(deleteToast, (state) =>\n    ({ ...state, toastData: null })\n  )\n)\n\n/**\n * define reducer name\n * @param state\n * @param action\n */\nexport function toastReducers (state: ToastsState | undefined, action: Action): any {\n  return reducer(state, action)\n}\n",
            "properties": [
                {
                    "name": "toastData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangToast | null",
                    "optional": false,
                    "description": "<p>toast data</p>\n",
                    "line": 12,
                    "rawdescription": "\n\ntoast data\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>define toast state in store</p>\n",
            "rawdescription": "\n\ndefine toast state in store\n",
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "NotificationEffects",
            "id": "injectable-NotificationEffects-4851d25e9ab1f68c0cdea7a9541958a3221f8e3ec4491506c4bfe76173c8ba8e2ae00c42a42a824b68f573ddf4808659236a9dd8cd14342c68b4579a11173808",
            "file": "projects/quang-dialog/src/lib/notification/notification-store/effects/notification.effects.ts",
            "properties": [
                {
                    "name": "notification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Notification wrapper</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nNotification wrapper\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "pos": 381,
                            "end": 393,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 382,
                                "end": 389,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sendNotification$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(sendNotification),\n      map((action) => {\n        this.notification = new Notification(\n          action.notificationData.title,\n          {\n            body: action.notificationData.body,\n            icon: action.notificationData.iconUrl,\n            image: action.notificationData.imageUrl\n          }\n        )\n      })\n    ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>the effect is triggered when the action sendNotification is dispatched,\nit takes care of creating and displaying the notification</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nthe effect is triggered when the action sendNotification is dispatched,\nit takes care of creating and displaying the notification\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service decoratore</p>\n",
            "rawdescription": "\n\nService decoratore\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Actions, createEffect, ofType } from '@ngrx/effects'\nimport { map } from 'rxjs/operators'\nimport { sendNotification } from '../actions/notification.actions'\n\n/**\n * Service decoratore\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Notification effetc\n */\nexport class NotificationEffects {\n  /**\n   * Notification wrapper\n   * @private\n   */\n  private notification: any\n  /**\n   * the effect is triggered when the action sendNotification is dispatched,\n   * it takes care of creating and displaying the notification\n   */\n  sendNotification$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(sendNotification),\n      map((action) => {\n        this.notification = new Notification(\n          action.notificationData.title,\n          {\n            body: action.notificationData.body,\n            icon: action.notificationData.iconUrl,\n            image: action.notificationData.imageUrl\n          }\n        )\n      })\n    ),\n    { dispatch: false }\n  )\n\n  /**\n   * constructor\n   * @param actions$\n   */\n  constructor (\n    private readonly actions$: Actions\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1050,
                            "end": 1058,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "actions$"
                        },
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1044,
                            "end": 1049,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PaginatorLanguage",
            "id": "injectable-PaginatorLanguage-156b25b3b7ede18245f25a9de346f22072c79b382d3aa1a927931608e83c1c61270d40687108e0590bb5d8d7af9fd90ab5a1e2234df121f90978eade055a325c",
            "file": "projects/quang-core/src/lib/paginator/paginator.language.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAndInitTranslations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the translations from the label file\n",
                    "description": "<p>retrieves the translations from the label file</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { MatPaginatorIntl } from '@angular/material/paginator'\nimport { TranslocoService } from '@ngneat/transloco'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * paginator language management\n */\nexport class PaginatorLanguage extends MatPaginatorIntl {\n  /**\n   * constructor\n   * @param translate translation utility\n   */\n  constructor (\n    private readonly translate: TranslocoService\n  ) {\n    super()\n    this.translate.langChanges$.subscribe(() => {\n      this.getAndInitTranslations()\n    })\n    this.getAndInitTranslations()\n  }\n\n  /**\n   * retrieves the translations from the label file\n   */\n  getAndInitTranslations (): void {\n    this.translate.selectTranslate([\n      'quangPaginator.itemPerPage',\n      'quangPaginator.nextPage',\n      'quangPaginator.previousPage',\n      'quangPaginator.firstPage',\n      'quangPaginator.lastPage'\n    ]).subscribe(t => {\n      this.itemsPerPageLabel = t['quangPaginator.itemPerPage']\n      this.nextPageLabel = t['quangPaginator.nextPage']\n      this.previousPageLabel = t['quangPaginator.previousPage']\n      this.firstPageLabel = t['quangPaginator.firstPage']\n      this.lastPageLabel = t['quangPaginator.lastPage']\n      this.changes.next()\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 360,
                            "end": 369,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "translate"
                        },
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 354,
                            "end": 359,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>translation utility</p>\n"
                    }
                ]
            },
            "extends": "MatPaginatorIntl",
            "type": "injectable"
        },
        {
            "name": "QuangAuthEffects",
            "id": "injectable-QuangAuthEffects-1137c18ae92b71a73b9e37faf661ac9fa067a4a38723b3b46d2069ed5cd6e4d14b8190f846a4d8da5548184d35a5fa591964c13f9456b2dc080288e875899ddd",
            "file": "projects/quang-auth/src/lib/quang-auth-store/effects/quang-auth.effects.ts",
            "properties": [
                {
                    "name": "deleteUserEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(QuangAuthActions.userLogout),\n      map(action => {\n        this.store.dispatch(QuangAuthActions.userRolesLogout())\n        this.store.dispatch(QuangAuthActions.userInfoLogout())\n        this.quangAuthService.stopRefreshToken()\n        this.quangAuthService.logout()\n      }\n      )\n    ), { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Effect that is triggered when the actual logout is dispatched,\ndeletes user data and starts the logout procedure</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nEffect that is triggered when the actual logout is dispatched,\ndeletes user data and starts the logout procedure\n"
                },
                {
                    "name": "getInfoUserEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(QuangAuthActions.userLogin),\n      mergeMap(action =>\n        this.quangAuthService.getUserInfo().pipe(\n          map((user: any) => {\n            return QuangAuthActions.userInfoLogin({ user: user })\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Effect that is triggered when the effective login is dispatched, it recovers user data</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nEffect that is triggered when the effective login is dispatched, it recovers user data\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { QuangAuthService } from '../../quang-auth.service'\nimport { Actions, createEffect, ofType } from '@ngrx/effects'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { Store } from '@ngrx/store'\nimport { QuangAuthActions } from '../actions'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuangAuthEffects {\n  /**\n   * Effect that is triggered when the effective login is dispatched, it recovers user data\n   */\n  getInfoUserEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(QuangAuthActions.userLogin),\n      mergeMap(action =>\n        this.quangAuthService.getUserInfo().pipe(\n          map((user: any) => {\n            return QuangAuthActions.userInfoLogin({ user: user })\n          })\n        )\n      )\n    )\n  )\n\n  /**\n   * Effect that is triggered when the actual logout is dispatched,\n   * deletes user data and starts the logout procedure\n   */\n  deleteUserEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(QuangAuthActions.userLogout),\n      map(action => {\n        this.store.dispatch(QuangAuthActions.userRolesLogout())\n        this.store.dispatch(QuangAuthActions.userInfoLogout())\n        this.quangAuthService.stopRefreshToken()\n        this.quangAuthService.logout()\n      }\n      )\n    ), { dispatch: false }\n  )\n\n  /**\n   * constructor\n   * @param actions$ actions access\n   * @param quangAuthService auth utility\n   * @param store store access\n   */\n  constructor (\n    private readonly actions$: Actions,\n    private readonly quangAuthService: QuangAuthService,\n    private readonly store: Store<any>\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quangAuthService",
                        "type": "QuangAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1385,
                            "end": 1393,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "actions$"
                        },
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1379,
                            "end": 1384,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>actions access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1421,
                            "end": 1437,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangAuthService"
                        },
                        "type": "QuangAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1415,
                            "end": 1420,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>auth utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1463,
                            "end": 1468,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1457,
                            "end": 1462,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangAuthLoginEffects",
            "id": "injectable-QuangAuthLoginEffects-bbfa12ff991837419572f7beb42ddf8cbe0e3cdc4669e143943832054992e32bce747a5b8fa6fd89f956c97cfce6dc29991a15be5a1f6027a293c0379f42eef4",
            "file": "projects/quang-auth/src/lib/quang-auth-store/effects/quang-auth-login.effects.ts",
            "properties": [
                {
                    "name": "startAuthEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      mergeMap(action =>\n        this.quangAuthService.login().pipe(\n          map(is => {\n            this.quangAuthService.startRefreshToken()\n            return userLogin()\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Effect that is triggered when the store is initialized,\nstarts the login procedure,\nif the user authenticates he dispatches the login action</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nEffect that is triggered when the store is initialized,\nstarts the login procedure,\nif the user authenticates he dispatches the login action\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Actions, createEffect, ofType, ROOT_EFFECTS_INIT } from '@ngrx/effects'\nimport { QuangAuthService } from '../../quang-auth.service'\nimport { Store } from '@ngrx/store'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { userLogin } from '../actions/quang-auth.actions'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuangAuthLoginEffects {\n  /**\n   * Effect that is triggered when the store is initialized,\n   * starts the login procedure,\n   * if the user authenticates he dispatches the login action\n   */\n  startAuthEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      mergeMap(action =>\n        this.quangAuthService.login().pipe(\n          map(is => {\n            this.quangAuthService.startRefreshToken()\n            return userLogin()\n          })\n        )\n      )\n    )\n  )\n\n  /**\n   * constructor\n   * @param actions$ actions access\n   * @param quangAuthService auth utility\n   * @param store store access\n   */\n  constructor (\n    private readonly actions$: Actions,\n    private readonly quangAuthService: QuangAuthService,\n    private readonly store: Store<any>\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quangAuthService",
                        "type": "QuangAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 949,
                            "end": 957,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "actions$"
                        },
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 943,
                            "end": 948,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>actions access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 985,
                            "end": 1001,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangAuthService"
                        },
                        "type": "QuangAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 979,
                            "end": 984,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>auth utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1027,
                            "end": 1032,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1021,
                            "end": 1026,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangAuthService",
            "id": "injectable-QuangAuthService-18b69f08b661cffafe1cf9235bd556fa0245832ee800bdf0dbda495baa5e437ce37d9c67b1f7c06b7e81dcb31609aae90fa65458047d1e38faa659a1140aef1d",
            "file": "projects/quang-auth/src/lib/quang-auth.service.ts",
            "properties": [
                {
                    "name": "_window",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>window access</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nwindow access\n",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "authConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>configurations for authentication</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nconfigurations for authentication\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>module configurations</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nmodule configurations\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns the current access token\n",
                    "description": "<p>returns the current access token</p>\n"
                },
                {
                    "name": "getIdToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns the current token id\n",
                    "description": "<p>returns the current token id</p>\n"
                },
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user data\n",
                    "description": "<p>returns user data</p>\n"
                },
                {
                    "name": "getUserInfoAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncall to retrieve user data\n",
                    "description": "<p>call to retrieve user data</p>\n"
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart the login process, if the user is not logged in, redirect to the identity provider\n",
                    "description": "<p>Start the login process, if the user is not logged in, redirect to the identity provider</p>\n"
                },
                {
                    "name": "loginAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart the login process, if the user is not logged in, redirect to the identity provider\nif the process is successful dispatch the successful login\n",
                    "description": "<p>Start the login process, if the user is not logged in, redirect to the identity provider\nif the process is successful dispatch the successful login</p>\n"
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlog out\n",
                    "description": "<p>log out</p>\n"
                },
                {
                    "name": "logoutAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlog out and dispatch the actions to delete the user from the store\n",
                    "description": "<p>log out and dispatch the actions to delete the user from the store</p>\n"
                },
                {
                    "name": "startRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nstarts the token refresh\n",
                    "description": "<p>starts the token refresh</p>\n"
                },
                {
                    "name": "stopRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nstop the token refresh\n",
                    "description": "<p>stop the token refresh</p>\n"
                },
                {
                    "name": "tryLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStarts the login process, if the user is not logged in it does not redirect to the identity provider\n",
                    "description": "<p>Starts the login process, if the user is not logged in it does not redirect to the identity provider</p>\n"
                },
                {
                    "name": "tryLoginAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStarts the login process, if the user is not logged in it does not redirect to the identity provider\nif the process is successful dispatch the successful login\n",
                    "description": "<p>Starts the login process, if the user is not logged in it does not redirect to the identity provider\nif the process is successful dispatch the successful login</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable, Optional } from '@angular/core'\nimport { Store } from '@ngrx/store'\nimport { from, Observable } from 'rxjs'\nimport { QuangAuthConfig } from './quang-auth.config'\nimport { OAuthService } from 'angular-oauth2-oidc'\nimport { QuangAuthModuleState } from './quang-auth-module.reducer'\nimport { QuangAuthSelectors } from './quang-auth-store/selectors'\nimport { map } from 'rxjs/operators'\nimport { QuangAuthActions } from './quang-auth-store/actions'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for auth management\n */\nexport class QuangAuthService {\n  /**\n   * module configurations\n   */\n  public config: any\n  /**\n   * configurations for authentication\n   */\n  public authConfig: any\n  /**\n   * window access\n   */\n  private readonly _window = (): any => window\n\n  /**\n   * constructor\n   * @param config module config\n   * @param oauthService auth utility\n   * @param store store access\n   */\n  constructor (\n  @Optional() config: QuangAuthConfig,\n    private readonly oauthService: OAuthService,\n    private readonly store: Store<QuangAuthModuleState>\n  ) {\n    if (config) {\n      this.config = config\n    }\n    if (this._window().oidcConfig) {\n      this.authConfig = this._window().oidcConfig\n    } else if (this.config.oidcConfig) {\n      this.authConfig = this.config.oidcConfig\n    } else {\n      alert('[AUTH SERVICE] No auth config')\n    }\n    this.oauthService.configure(this.authConfig)\n  }\n\n  /**\n   * Start the login process, if the user is not logged in, redirect to the identity provider\n   */\n  login (): Observable<any> {\n    return from(this.oauthService.loadDiscoveryDocumentAndLogin())\n  }\n\n  /**\n   * Starts the login process, if the user is not logged in it does not redirect to the identity provider\n   */\n  tryLogin (): Observable<any> {\n    return from(this.oauthService.loadDiscoveryDocumentAndTryLogin())\n  }\n\n  /**\n   * Start the login process, if the user is not logged in, redirect to the identity provider\n   * if the process is successful dispatch the successful login\n   */\n  loginAndDispatch (): void {\n    from(this.oauthService.loadDiscoveryDocumentAndLogin()).subscribe(isAuthenticated => {\n      if (isAuthenticated) {\n        this.oauthService.setupAutomaticSilentRefresh()\n        this.store.dispatch(QuangAuthActions.userLogin())\n      }\n    })\n  }\n\n  /**\n   * Starts the login process, if the user is not logged in it does not redirect to the identity provider\n   * if the process is successful dispatch the successful login\n   */\n  tryLoginAndDispatch (): void {\n    from(this.oauthService.loadDiscoveryDocumentAndTryLogin()).subscribe(isAuthenticated => {\n      if (isAuthenticated) {\n        this.oauthService.setupAutomaticSilentRefresh()\n        this.store.dispatch(QuangAuthActions.userLogin())\n      }\n    })\n  }\n\n  isAuthenticated (): boolean {\n    return !!this.oauthService.getIdentityClaims()\n  }\n\n  /**\n   * returns user data\n   */\n  getUserInfo (): Observable<any> {\n    return from(this.oauthService.loadUserProfile())\n  }\n\n  /**\n   * call to retrieve user data\n   */\n  getUserInfoAndDispatch (): void {\n    from(this.oauthService.loadUserProfile()).subscribe((user: any) => {\n      this.store.dispatch(QuangAuthActions.userInfoLogin({ user: user }))\n    })\n  }\n\n  /**\n   * starts the token refresh\n   */\n  startRefreshToken (): void {\n    this.oauthService.setupAutomaticSilentRefresh()\n  }\n\n  /**\n   * stop the token refresh\n   */\n  stopRefreshToken (): void {\n    this.oauthService.stopAutomaticRefresh()\n  }\n\n  /**\n   * log out\n   */\n  logout (): void {\n    this.oauthService.logOut()\n  }\n\n  /**\n   * log out and dispatch the actions to delete the user from the store\n   */\n  logoutAndDispatch (): void {\n    this.store.dispatch(QuangAuthActions.userLogout())\n    this.store.dispatch(QuangAuthActions.userInfoLogout())\n    this.store.dispatch(QuangAuthActions.userRolesLogout())\n    this.oauthService.stopAutomaticRefresh()\n    this.oauthService.logOut()\n  }\n\n  /**\n   * returns the current token id\n   */\n  getIdToken (): string {\n    return this.oauthService.getIdToken()\n  }\n\n  /**\n   * returns the current access token\n   */\n  getAccessToken (): string {\n    return this.oauthService.getAccessToken()\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "QuangAuthConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<QuangAuthModuleState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 855,
                            "end": 861,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "QuangAuthConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 849,
                            "end": 854,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>module config</p>\n"
                    },
                    {
                        "name": {
                            "pos": 888,
                            "end": 900,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "oauthService"
                        },
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 882,
                            "end": 887,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>auth utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 926,
                            "end": 931,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<QuangAuthModuleState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 920,
                            "end": 925,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangAuthTryLoginEffects",
            "id": "injectable-QuangAuthTryLoginEffects-73cb8d46e56e893ab8df33e26f9eb9f472274b88d2b3ada629f8cd81c77de88fac9f3bd2d248356cee1549a1e836af61918a6bb62fbc5204a5d2acab30d1e198",
            "file": "projects/quang-auth/src/lib/quang-auth-store/effects/quang-auth-try-login.effects.ts",
            "properties": [
                {
                    "name": "tryStartAuthEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      mergeMap(action =>\n        this.quangAuthService.tryLogin().pipe(\n          map(is => {\n            if (is && this.quangAuthService.isAuthenticated()) {\n              this.quangAuthService.startRefreshToken()\n              this.store.dispatch(QuangAuthActions.userLogin())\n            } else {\n              this.store.dispatch(QuangAuthActions.userRolesLogout())\n              this.store.dispatch(QuangAuthActions.userInfoLogout())\n            }\n          })\n        )\n      )\n    ), { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Effect that is triggered when the store is initialized,</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nEffect that is triggered when the store is initialized,\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Actions, createEffect, ofType, ROOT_EFFECTS_INIT } from '@ngrx/effects'\nimport { map, mergeMap } from 'rxjs/operators'\nimport { QuangAuthService } from '../../quang-auth.service'\nimport { Store } from '@ngrx/store'\nimport { QuangAuthActions } from '../actions'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuangAuthTryLoginEffects {\n  /**\n   * Effect that is triggered when the store is initialized,\n   */\n  tryStartAuthEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      mergeMap(action =>\n        this.quangAuthService.tryLogin().pipe(\n          map(is => {\n            if (is && this.quangAuthService.isAuthenticated()) {\n              this.quangAuthService.startRefreshToken()\n              this.store.dispatch(QuangAuthActions.userLogin())\n            } else {\n              this.store.dispatch(QuangAuthActions.userRolesLogout())\n              this.store.dispatch(QuangAuthActions.userInfoLogout())\n            }\n          })\n        )\n      )\n    ), { dispatch: false }\n  )\n\n  /**\n   * constructor\n   * @param actions$ actions access\n   * @param quangAuthService auth utility\n   * @param store store access\n   */\n  constructor (\n    private readonly actions$: Actions,\n    private readonly quangAuthService: QuangAuthService,\n    private readonly store: Store<any>\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quangAuthService",
                        "type": "QuangAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1117,
                            "end": 1125,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "actions$"
                        },
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1111,
                            "end": 1116,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>actions access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1153,
                            "end": 1169,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangAuthService"
                        },
                        "type": "QuangAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1147,
                            "end": 1152,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>auth utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1195,
                            "end": 1200,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1189,
                            "end": 1194,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangAutocompleteAsyncService",
            "id": "injectable-QuangAutocompleteAsyncService-765623a882add8b7d676883d2d52acc089fb5a7a104a12030493ea35713072078cf7497f3df5cf1212ba899cf34482b964782f818e676689d21d1bdaef691a5a",
            "file": "projects/quang-core/src/lib/autocomplete-service/quang-autocomplete-async.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getList",
                    "args": [
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paramId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuild the url based on the configurations and make an http call passing the parameter as url parameters\n",
                    "description": "<p>Build the url based on the configurations and make an http call passing the parameter as url parameters</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 962,
                                "end": 969,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "baseUrl"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 956,
                                "end": 961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project base url</p>\n"
                        },
                        {
                            "name": {
                                "pos": 999,
                                "end": 1002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 993,
                                "end": 998,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>api url</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1023,
                                "end": 1028,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1017,
                                "end": 1022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>api param value</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1057,
                                "end": 1064,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "paramId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1051,
                                "end": 1056,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>api param name</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRestList",
                    "args": [
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuild the url based on the configurations and make an http call passing the search parameter in the url\n",
                    "description": "<p>Build the url based on the configurations and make an http call passing the search parameter in the url</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 549,
                                "end": 556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "baseUrl"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 543,
                                "end": 548,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>prject base url</p>\n"
                        },
                        {
                            "name": {
                                "pos": 585,
                                "end": 588,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 579,
                                "end": 584,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>api url</p>\n"
                        },
                        {
                            "name": {
                                "pos": 609,
                                "end": 614,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 603,
                                "end": 608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>api params</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Observable } from 'rxjs'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for autocomplete management\n */\nexport class QuangAutocompleteAsyncService {\n  /**\n   * constructor\n   * @param http http utility\n   */\n  constructor (\n    private readonly http: HttpClient\n  ) {\n  }\n\n  /**\n   * Build the url based on the configurations and make an http call passing the search parameter in the url\n   * @param baseUrl prject base url\n   * @param url api url\n   * @param param api params\n   */\n  getRestList (baseUrl: string, url: string, param: string): Observable<any> {\n    if (param) {\n      return this.http.get(`${baseUrl}${url}/${param}`)\n    }\n    return this.http.get(baseUrl + url)\n  }\n\n  /**\n   * Build the url based on the configurations and make an http call passing the parameter as url parameters\n   * @param baseUrl project base url\n   * @param url api url\n   * @param param api param value\n   * @param paramId api param name\n   */\n  getList (baseUrl: string, url: string, param: string, paramId: string): Observable<any> {\n    const urlParam = { params: new HttpParams().set(paramId, param) }\n    return this.http.get(`${baseUrl}${url}`, urlParam)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 333,
                            "end": 337,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 327,
                            "end": 332,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>http utility</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangBottomSheetService",
            "id": "injectable-QuangBottomSheetService-412333a18d68aa3cde4bf8f31f69dbf12a481a7a15b4220f4a59b717f0d45c4bf6822de21197605d9ce7581ba42c6025efea4c4bf1cc6da1d828fc12601ad339",
            "file": "projects/quang-dialog/src/lib/bottom-sheet/bottom-sheet.service.ts",
            "properties": [
                {
                    "name": "bs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>bottom sheet reference</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nbottom sheet reference\n"
                }
            ],
            "methods": [
                {
                    "name": "onBackdropClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturn the observable of backdrop click event\n",
                    "description": "<p>return the observable of backdrop click event</p>\n"
                },
                {
                    "name": "onDismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturn the observable of dismiss event\n",
                    "description": "<p>return the observable of dismiss event</p>\n"
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturn the observable of open event\n",
                    "description": "<p>return the observable of open event</p>\n"
                },
                {
                    "name": "openBottomSheet",
                    "args": [
                        {
                            "name": "template",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens the bottom sheet\n",
                    "description": "<p>opens the bottom sheet</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 551,
                                "end": 559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "template"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 545,
                                "end": 550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 572,
                                "end": 576,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 566,
                                "end": 571,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { MatBottomSheet } from '@angular/material/bottom-sheet'\nimport { Observable } from 'rxjs'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for bottom sheet management\n */\nexport class QuangBottomSheetService {\n  /**\n   * bottom sheet reference\n   */\n  bs: any\n\n  /**\n   * constructor\n   * @param bottomSheet material bottom sheet utility\n   */\n  constructor (\n    private readonly bottomSheet: MatBottomSheet\n  ) {\n  }\n\n  /**\n   * opens the bottom sheet\n   * @param template\n   * @param data\n   */\n  openBottomSheet (template: any, data?: { [key: string]: any }): void {\n    this.bs = this.bottomSheet.open(template, { data: data })\n  }\n\n  /**\n   * return the observable of dismiss event\n   */\n  onDismiss (): Observable<any> {\n    return this.bs.afterDismissed()\n  }\n\n  /**\n   * return the observable of open event\n   */\n  onOpen (): Observable<any> {\n    return this.bs.afterOpened()\n  }\n\n  /**\n   * return the observable of backdrop click event\n   */\n  onBackdropClick (): Observable<any> {\n    return this.bs.backdropClick()\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 381,
                            "end": 392,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "bottomSheet"
                        },
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 375,
                            "end": 380,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>material bottom sheet utility</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangEventBusService",
            "id": "injectable-QuangEventBusService-d1f897cf47445ffc854708f440f7a173950c23c8b55cba3db649678b1c777ff7e2336f6040d85e6a6fbaf9d35e2af2180039fb3e7a5d7bcae1b17e1baa27d6a7",
            "file": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
            "properties": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>event buss server address</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nevent buss server address\n"
                },
                {
                    "name": "bus",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "<p>the subject that outputs the returned values</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nthe subject that outputs the returned values\n"
                },
                {
                    "name": "eb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>event bus wrapper</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nevent bus wrapper\n"
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "<p>event bus headers</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nevent bus headers\n"
                },
                {
                    "name": "options",
                    "defaultValue": "{\n    vertxbus_reconnect_attempts_max: 5,\n    vertxbus_reconnect_delay_min: 1000,\n    vertxbus_reconnect_delay_max: 5000,\n    vertxbus_reconnect_exponent: 2,\n    vertxbus_randomization_factor: 0.5\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangBusEventOptions",
                    "optional": false,
                    "description": "<p>event bus configuration</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nevent bus configuration\n"
                }
            ],
            "methods": [
                {
                    "name": "closeSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclose the event bus socket\n",
                    "description": "<p>close the event bus socket</p>\n"
                },
                {
                    "name": "onError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nhandling of the error event\n",
                    "description": "<p>handling of the error event</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3246,
                                "end": 3251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3240,
                                "end": 3245,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 3258,
                                "end": 3265,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwhen a reception event is issued, the message checks if it is an error,\nif it is not, it tries to transform the json of the response and does the next of the connected observable,\nif it is not a json it does the next of the response as it is\n",
                    "description": "<p>when a reception event is issued, the message checks if it is an error,\nif it is not, it tries to transform the json of the response and does the next of the connected observable,\nif it is not a json it does the next of the response as it is</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2900,
                                "end": 2907,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwhen the socket is opened it sends a message in the observable indicating that the socket has been opened\nand listens to the messages\n",
                    "description": "<p>when the socket is opened it sends a message in the observable indicating that the socket has been opened\nand listens to the messages</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2457,
                                "end": 2464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onReconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nto do if necessary\n",
                    "description": "<p>to do if necessary</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3405,
                                "end": 3412,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "openSocket",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "QuangBusEventOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen the event buss socket\n",
                    "description": "<p>open the event buss socket</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1417,
                                "end": 1420,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1411,
                                "end": 1416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1433,
                                "end": 1440,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "address"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1427,
                                "end": 1432,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1453,
                                "end": 1460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "headers"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1447,
                                "end": 1452,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1473,
                                "end": 1480,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "QuangBusEventOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1467,
                                "end": 1472,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsend message on event bus socket\n",
                    "description": "<p>send message on event bus socket</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1867,
                                "end": 1874,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1861,
                                "end": 1866,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\n\n/**\n * general declaration for global library\n */\ndeclare let EventBus: any\n\n/**\n * utility for event bus management\n */\nexport interface QuangBusEventOptions {\n  /**\n   * Max reconnect attempts\n   */\n  vertxbus_reconnect_attempts_max: number\n  /**\n   * Initial delay (in ms) before first reconnect attempt\n   */\n  vertxbus_reconnect_delay_min: number\n  /**\n   *  Max delay (in ms) between reconnect attempts\n   */\n  vertxbus_reconnect_delay_max: number\n  /**\n   * Exponential backoff factor\n   */\n  vertxbus_reconnect_exponent: number\n  /**\n   * Randomization factor between 0 and 1\n   */\n  vertxbus_randomization_factor: number\n}\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuangEventBusService {\n  /**\n   * the subject that outputs the returned values\n   */\n  bus: Subject<any> = new Subject<any>()\n  /**\n   * event bus wrapper\n   */\n  eb: any\n  /**\n   * event buss server address\n   */\n  address: string = ''\n  /**\n   * event bus headers\n   */\n  headers: object\n  /**\n   * event bus configuration\n   */\n  options: QuangBusEventOptions = {\n    vertxbus_reconnect_attempts_max: 5,\n    vertxbus_reconnect_delay_min: 1000,\n    vertxbus_reconnect_delay_max: 5000,\n    vertxbus_reconnect_exponent: 2,\n    vertxbus_randomization_factor: 0.5\n  }\n\n  /**\n   * open the event buss socket\n   * @param url\n   * @param address\n   * @param headers\n   * @param options\n   */\n  openSocket (url: string, address: string, headers?: object, options?: QuangBusEventOptions): Observable<any> {\n    this.headers = headers\n    this.address = address\n    this.eb = new EventBus(url, options || this.options)\n    this.eb.enableReconnect(true)\n    this.onOpen()\n    this.onReconnect()\n    return this.bus\n  }\n\n  /**\n   * send message on event bus socket\n   * @param message\n   */\n  sendMessage (message: string): void {\n    this.eb.send(this.address, message, (e, m) => {\n      if (e) {\n        console.error(e)\n      }\n    })\n  }\n\n  /**\n   * close the event bus socket\n   */\n  closeSocket (): void {\n    this.bus.complete()\n    if (this.eb) {\n      try {\n        this.eb.unregisterHandler(this.address, this.headers)\n      } catch (e) {\n\n      } finally {\n        this.eb.close()\n      }\n    }\n  }\n\n  /**\n   * when the socket is opened it sends a message in the observable indicating that the socket has been opened\n   * and listens to the messages\n   * @private\n   */\n  private onOpen (): void {\n    this.eb.onopen = () => {\n      console.log('Socket opened')\n      this.bus.next('socketInit')\n      this.onMessage()\n    }\n  }\n\n  /**\n   * when a reception event is issued, the message checks if it is an error,\n   * if it is not, it tries to transform the json of the response and does the next of the connected observable,\n   * if it is not a json it does the next of the response as it is\n   * @private\n   */\n  private onMessage (): void {\n    this.eb.registerHandler(this.address, (e, m) => {\n      if (e) {\n        this.onError(e)\n      } else {\n        try {\n          this.bus.next(JSON.parse(m.body))\n        } catch (e) {\n          this.bus.next(m.body)\n        }\n      }\n    })\n  }\n\n  /**\n   * handling of the error event\n   * @param error\n   * @private\n   */\n  private onError (error: Error): void {\n    this.bus.error(error)\n    console.error(error)\n  }\n\n  /**\n   * to do if necessary\n   * @private\n   */\n  private onReconnect (): void {\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "QuangEventSourceService",
            "id": "injectable-QuangEventSourceService-fa605a768a9a767df650cbac9077029e1bab4830faec1e56305958bf3c7cfd0ca4f876a6778941ed54e359b2bedd26fe6e0cafa49f5bfd8e2fd6a043d33dc734",
            "file": "projects/quang-event/src/lib/quang-event-source/quang-event-source.service.ts",
            "properties": [
                {
                    "name": "events",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "<p>the subject that outputs the returned values</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nthe subject that outputs the returned values\n"
                },
                {
                    "name": "evs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventSource",
                    "optional": false,
                    "description": "<p>event source wrapper</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nevent source wrapper\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "pos": 324,
                            "end": 336,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 325,
                                "end": 332,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeEventSource",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclose the event source channel\n",
                    "description": "<p>close the event source channel</p>\n"
                },
                {
                    "name": "onError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChannel error handling sends the observable into error\n",
                    "description": "<p>Channel error handling sends the observable into error</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2137,
                                "end": 2144,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen an event is received from the channel\nit tries to transform the json into an object and to emit it in the observable\nif it is not possible emit the response as it came from the channel\n",
                    "description": "<p>When an event is received from the channel\nit tries to transform the json into an object and to emit it in the observable\nif it is not possible emit the response as it came from the channel</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1859,
                                "end": 1866,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmanagement of the channel opening event,\nlogs that the anal has been opened and sends in the observable that the channel has been opened\n",
                    "description": "<p>management of the channel opening event,\nlogs that the anal has been opened and sends in the observable that the channel has been opened</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1472,
                                "end": 1479,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "openEventSource",
                    "args": [
                        {
                            "name": "baseUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "auth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "heartbeatTimeout",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Subject<any>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmethod to initialize and observe the eventSource message\n",
                    "description": "<p>method to initialize and observe the eventSource message</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 548,
                                "end": 555,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "baseUrl"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 542,
                                "end": 547,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 568,
                                "end": 571,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 562,
                                "end": 567,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 584,
                                "end": 588,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "auth"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 578,
                                "end": 583,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 601,
                                "end": 606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 595,
                                "end": 600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 619,
                                "end": 635,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "heartbeatTimeout"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 613,
                                "end": 618,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { EventSourcePolyfill } from 'event-source-polyfill'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for event source management\n */\nexport class QuangEventSourceService {\n  /**\n   * event source wrapper\n   * @private\n   */\n  private evs: EventSource\n  /**\n   * the subject that outputs the returned values\n   */\n  events: Subject<any> = new Subject()\n\n  /**\n   * method to initialize and observe the eventSource message\n   * @param baseUrl\n   * @param url\n   * @param auth\n   * @param param\n   * @param heartbeatTimeout\n   */\n  openEventSource (baseUrl: string, url: string, auth: boolean, param?: string, heartbeatTimeout?: number): Subject<any> {\n    this.events = new Subject()\n    if (auth) {\n      this.evs = new EventSourcePolyfill(`${baseUrl}${url}/${param}`, {\n        headers: {\n          Authorization: 'Bearer ' + window.localStorage.getItem('access_token')\n        },\n        heartbeatTimeout: heartbeatTimeout || 45 * 1000\n      })\n    } else {\n      this.evs = new EventSourcePolyfill(`${baseUrl}${url}/${param}`,\n        {\n          heartbeatTimeout: heartbeatTimeout || 45 * 1000\n        })\n    }\n    this.onOpen()\n    this.onEvent()\n    this.onError()\n    return this.events\n  }\n\n  /**\n   * management of the channel opening event,\n   * logs that the anal has been opened and sends in the observable that the channel has been opened\n   * @private\n   */\n  private onOpen (): void {\n    this.evs.onopen = () => {\n      this.events.next('eventSourceInit')\n      console.log('EventSource link opened')\n    }\n  }\n\n  /**\n   * When an event is received from the channel\n   * it tries to transform the json into an object and to emit it in the observable\n   * if it is not possible emit the response as it came from the channel\n   * @private\n   */\n  private onEvent (): void {\n    this.evs.onmessage = (m) => {\n      try {\n        this.events.next(JSON.parse(m.data))\n      } catch (e) {\n        this.events.next(m.data)\n      }\n    }\n  }\n\n  /**\n   * Channel error handling sends the observable into error\n   * @private\n   */\n  private onError (): void {\n    this.evs.onerror = (e) => {\n      this.events.error(e)\n      console.error(e)\n    }\n  }\n\n  /**\n   * close the event source channel\n   */\n  closeEventSource (): void {\n    this.events.complete()\n    this.evs.close()\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "QuangGoogleMapService",
            "id": "injectable-QuangGoogleMapService-c5f8a078504f097d3d3b071cc833fd411a476f5adf82f803b3d6b2caf717df8ed2bc43269f75b33688cd045c1f6666767cf426586cd73b2ea3661ee8587a6e5d",
            "file": "projects/quang-map/src/lib/google-map/google-map.service.ts",
            "properties": [
                {
                    "name": "_window",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>window access</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nwindow access\n"
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>google map key</p>\n",
                    "line": 16,
                    "rawdescription": "\n\ngoogle map key\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMapScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds the script to load the Google map library\n",
                    "description": "<p>adds the script to load the Google map library</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable, Optional } from '@angular/core'\nimport { QuangMapConfig } from '../quang-map.config'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for google map management\n */\nexport class QuangGoogleMapService {\n  /**\n   * google map key\n   */\n  public key: string = ''\n  /**\n   * window access\n   */\n  _window = (): any => window\n  /**\n   * constructor\n   * @param config module config\n   */\n  constructor (\n  @Optional() config: QuangMapConfig\n  ) {\n    if (config?.googleKey) {\n      this.key = config.googleKey\n    } else if (this._window().quangConfig?.googleKey) {\n      this.key = this._window().quangConfig.googleKey\n    } else {\n      alert('[QUANG MAP CONFIG] You need a googleKey for the map')\n    }\n  }\n\n  /**\n   * adds the script to load the Google map library\n   */\n  addMapScript (): void {\n    const s = window.document.createElement('script')\n    s.id = 'google-map-script'\n    s.type = 'text/javascript'\n    s.src = `https://maps.googleapis.com/maps/api/js?key=${this.key}`\n    window.document.body.appendChild(s)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "QuangMapConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 409,
                            "end": 415,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "QuangMapConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 403,
                            "end": 408,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>module config</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangHttpErrorService",
            "id": "injectable-QuangHttpErrorService-50e1ac3a4571b03f7220d70dc33f5407c21656ac2d94008f6fcacc794f8b551344981344fe10d928f63a213433f77ce9ee7a204e041d944b40185a92fdd93f11",
            "file": "projects/quang-dialog/src/lib/http-error/quang-http-error.service.ts",
            "properties": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>define if modal is open</p>\n",
                    "line": 22,
                    "rawdescription": "\n\ndefine if modal is open\n"
                },
                {
                    "name": "modalError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>modal container</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nmodal container\n"
                }
            ],
            "methods": [
                {
                    "name": "openErrorModal",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens the generic error mode\nopens only one error modal at a time and ignores the others\n",
                    "description": "<p>opens the generic error mode\nopens only one error modal at a time and ignores the others</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 813,
                                "end": 818,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 807,
                                "end": 812,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { QuangModalService } from '../modal/quang-modal.service'\nimport { QuangHttpErrorModalComponent } from './quang-http-error-modal/quang-http-error-modal.component'\nimport { HttpErrorResponse } from '@angular/common/http'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for http error management\n */\nexport class QuangHttpErrorService {\n  /**\n   * modal container\n   */\n  modalError: any\n  /**\n   * define if modal is open\n   */\n  isOpen: boolean = false\n\n  /**\n   * constructor\n   * @param quangModalService modal utility\n   */\n  constructor (\n    private readonly quangModalService: QuangModalService\n  ) {\n  }\n\n  /**\n   * opens the generic error mode\n   * opens only one error modal at a time and ignores the others\n   * @param error\n   */\n  openErrorModal (error: HttpErrorResponse): void {\n    this.quangModalService.onHideEvent().subscribe(e => {\n      switch (e) {\n        case 'backdrop-click':\n          this.isOpen = false\n          break\n        case 'close':\n          this.isOpen = false\n          break\n        default:\n          this.isOpen = false\n          break\n      }\n    })\n    if (!this.isOpen) {\n      this.modalError = QuangHttpErrorModalComponent\n      this.quangModalService.openModal(\n        this.modalError,\n        `httpErrorModal.${error?.status}.title`,\n        'md',\n        { error: error },\n        true,\n        false)\n      this.isOpen = true\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "quangModalService",
                        "type": "QuangModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 573,
                            "end": 590,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangModalService"
                        },
                        "type": "QuangModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 567,
                            "end": 572,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>modal utility</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangKeycloakEffects",
            "id": "injectable-QuangKeycloakEffects-d4aae2c86dbda2de5aefad135276a5405f00a9028e0e5aa10ff9b3127fe92729043cb67a566af8831002005357fc398968406027b4d749db4c236ea2905558a1",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/effects/quang-keycloak.effects.ts",
            "properties": [
                {
                    "name": "deleteUserEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(userLogout),\n      mergeMap(action => this.quangKeycloakService.logout(action.redirectUri)\n        .pipe(\n          map(() => userRolesLogout()),\n          map(() => userInfoLogout())\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>When the logout action is triggered,\nit performs the logout procedure and cleans the store of user data</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nWhen the logout action is triggered,\nit performs the logout procedure and cleans the store of user data\n"
                },
                {
                    "name": "getInfoUserEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(userLogin),\n      mergeMap(action => this.quangKeycloakService.getUserInfo()\n        .pipe(\n          map((user: any) => {\n            return userInfoLogin({ user: user })\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>When the login procedure is completed and the successful login is sent,\nit recovers the user data and saves them in the store</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nWhen the login procedure is completed and the successful login is sent,\nit recovers the user data and saves them in the store\n"
                },
                {
                    "name": "getRolesUserEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(userLogin),\n      mergeMap(action => this.quangKeycloakService.getUserRoles()\n        .pipe(\n          map((roles: string[]) => userRolesLogin({ roles: roles }))\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>When the login procedure is completed and the successful login is sent,\nit recovers the user role and saves them in the store</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nWhen the login procedure is completed and the successful login is sent,\nit recovers the user role and saves them in the store\n"
                },
                {
                    "name": "startAuthEffect$",
                    "defaultValue": "createEffect(\n    () => this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      mergeMap(action => this.quangKeycloakService.startAuth()\n        .pipe(\n          map(is => userLogin())\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>When the store is started,\nStart the login procedure,\nif the user completes the login dispatches the successful login</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nWhen the store is started,\nStart the login procedure,\nif the user completes the login dispatches the successful login\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>effect decorator</p>\n",
            "rawdescription": "\n\neffect decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Actions, createEffect, ofType, ROOT_EFFECTS_INIT } from '@ngrx/effects'\nimport { QuangKeycloakService } from '../../quang-keycloak.service'\nimport { map, mergeMap } from 'rxjs/operators'\nimport {\n  userInfoLogin,\n  userInfoLogout,\n  userLogin,\n  userLogout,\n  userRolesLogin,\n  userRolesLogout\n} from '../actions/quang-keycloak.actions'\n\n/**\n * effect decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * auth effect\n */\nexport class QuangKeycloakEffects {\n  /**\n   * When the store is started,\n   * Start the login procedure,\n   * if the user completes the login dispatches the successful login\n   */\n  startAuthEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(ROOT_EFFECTS_INIT),\n      mergeMap(action => this.quangKeycloakService.startAuth()\n        .pipe(\n          map(is => userLogin())\n        )\n      )\n    )\n  )\n\n  /**\n   * When the login procedure is completed and the successful login is sent,\n   * it recovers the user data and saves them in the store\n   */\n  getInfoUserEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(userLogin),\n      mergeMap(action => this.quangKeycloakService.getUserInfo()\n        .pipe(\n          map((user: any) => {\n            return userInfoLogin({ user: user })\n          })\n        )\n      )\n    )\n  )\n\n  /**\n   * When the login procedure is completed and the successful login is sent,\n   * it recovers the user role and saves them in the store\n   */\n  getRolesUserEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(userLogin),\n      mergeMap(action => this.quangKeycloakService.getUserRoles()\n        .pipe(\n          map((roles: string[]) => userRolesLogin({ roles: roles }))\n        )\n      )\n    )\n  )\n\n  /**\n   * When the logout action is triggered,\n   * it performs the logout procedure and cleans the store of user data\n   */\n  deleteUserEffect$ = createEffect(\n    () => this.actions$.pipe(\n      ofType(userLogout),\n      mergeMap(action => this.quangKeycloakService.logout(action.redirectUri)\n        .pipe(\n          map(() => userRolesLogout()),\n          map(() => userInfoLogout())\n        )\n      )\n    )\n  )\n\n  /**\n   * constructor\n   * @param actions$\n   * @param quangKeycloakService\n   */\n  constructor (\n    private readonly actions$: Actions,\n    private readonly quangKeycloakService: QuangKeycloakService\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quangKeycloakService",
                        "type": "QuangKeycloakService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 86,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2213,
                            "end": 2221,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "actions$"
                        },
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2207,
                            "end": 2212,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2234,
                            "end": 2254,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangKeycloakService"
                        },
                        "type": "QuangKeycloakService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2228,
                            "end": 2233,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangKeycloakService",
            "id": "injectable-QuangKeycloakService-b177535a2c457ad82c2cbce42b9ffa3bc6aa37c49ae909afd4e33936a7ae3235d96835a51ebccba0cd9da2518919188e7ef9e4605dfa3462099dcbf415ab3f99",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak.service.ts",
            "properties": [
                {
                    "name": "_window",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>window access</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nwindow access\n"
                },
                {
                    "name": "authConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>keycloak wrapper configuration</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nkeycloak wrapper configuration\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the information relating to the logged in user\n",
                    "description": "<p>retrieves the information relating to the logged in user</p>\n"
                },
                {
                    "name": "getUserInfoAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the information relating to the logged in user and saves them in the store\n",
                    "description": "<p>retrieves the information relating to the logged in user and saves them in the store</p>\n"
                },
                {
                    "name": "getUserRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget the user's roles\n",
                    "description": "<p>get the user&#39;s roles</p>\n"
                },
                {
                    "name": "getUserRolesAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the user's roles and saves them in the store\n",
                    "description": "<p>retrieves the user&#39;s roles and saves them in the store</p>\n"
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogin method, to be used if you are not using the authentication flow with effects\n",
                    "description": "<p>Login method, to be used if you are not using the authentication flow with effects</p>\n"
                },
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "redirectUri",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmethod to log out, is triggered by the effects\n",
                    "description": "<p>method to log out, is triggered by the effects</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3072,
                                "end": 3083,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "redirectUri"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3066,
                                "end": 3071,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "logoutAndDispatch",
                    "args": [
                        {
                            "name": "redirectUri",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmethod to log out, it should only be used if you do not use the login effects\n",
                    "description": "<p>method to log out, it should only be used if you do not use the login effects</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3410,
                                "end": 3421,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "redirectUri"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3404,
                                "end": 3409,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "startAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nstarts the authentication flow\n",
                    "description": "<p>starts the authentication flow</p>\n"
                },
                {
                    "name": "startAuthAndDispatch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nstarts the authentication flow and saves the authentication status in the store\n",
                    "description": "<p>starts the authentication flow and saves the authentication status in the store</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable, Optional } from '@angular/core'\nimport { Store } from '@ngrx/store'\nimport { from, Observable, of } from 'rxjs'\nimport { KeycloakService } from 'keycloak-angular'\nimport { QuangKeycloakConfig } from './quang-keycloak.config'\nimport { QuangKeycloakActions } from './quang-keycloak-store/actions'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for keycloak management\n */\nexport class QuangKeycloakService {\n  /**\n   * keycloak wrapper configuration\n   */\n  public authConfig: any\n  /**\n   * window access\n   */\n  _window = (): any => window\n\n  /**\n   * constructor\n   * @param config\n   * @param keyCloak\n   * @param store\n   */\n  constructor (\n    @Optional() config: QuangKeycloakConfig,\n    private readonly keyCloak: KeycloakService,\n    private readonly store: Store<any>\n  ) {\n    if (this._window().keycloakConfig) {\n      this.authConfig = this._window().keycloakConfig\n      this.authConfig.enableLogging = !config?.production\n    } else if (config?.keycloakConfig) {\n      this.authConfig = config.keycloakConfig\n      this.authConfig.enableLogging = !config?.production\n    } else {\n      alert('[AUTH KEYCLOAK SERVICE] No auth config')\n    }\n    if (config?.ionicApplication) {\n      this.authConfig.initOptions.silentCheckSsoRedirectUri = `${window.location.origin}/assets/static/silent-check-sso.html`\n      this.authConfig.initOptions.flow = 'standard'\n      this.authConfig.initOptions.responseMode = 'fragment'\n      this.authConfig.initOptions.checkLoginIframe = true\n    }\n  }\n\n  /**\n   * starts the authentication flow\n   */\n  startAuth (): Observable<any> {\n    return from(this.keyCloak.init(this.authConfig))\n  }\n\n  /**\n   * starts the authentication flow and saves the authentication status in the store\n   */\n  startAuthAndDispatch (): void {\n    from(this.keyCloak.init(this.authConfig)).subscribe(isAuthenticated => {\n      if (isAuthenticated) {\n        this.store.dispatch(QuangKeycloakActions.userLogin())\n      }\n    })\n  }\n\n  /**\n   * retrieves the information relating to the logged in user\n   */\n  getUserInfo (): Observable<any> {\n    return from(this.keyCloak.loadUserProfile())\n  }\n\n  /**\n   * retrieves the information relating to the logged in user and saves them in the store\n   */\n  getUserInfoAndDispatch (): void {\n    from(this.keyCloak.loadUserProfile()).subscribe((user: any) => {\n      this.store.dispatch(QuangKeycloakActions.userInfoLogin({ user: user }))\n    })\n  }\n\n  /**\n   * get the user's roles\n   */\n  getUserRoles (): Observable<string[]> {\n    return of(this.keyCloak.getUserRoles(true))\n  }\n\n  /**\n   * retrieves the user's roles and saves them in the store\n   */\n  getUserRolesAndDispatch (): void {\n      this.store.dispatch(QuangKeycloakActions.userRolesLogin({ roles: this.keyCloak.getUserRoles(true) }))\n  }\n\n  /**\n   * Login method, to be used if you are not using the authentication flow with effects\n   */\n  login (): Observable<any> {\n    return from(this.keyCloak.login())\n  }\n\n  /**\n   * method to log out, is triggered by the effects\n   * @param redirectUri\n   */\n  logout (redirectUri?: string): Observable<any> {\n    if (redirectUri) {\n      return from(this.keyCloak.logout(redirectUri))\n    } else {\n      alert('[AUTH KEYCLOAK SERVICE] No logout redirectUri config')\n    }\n  }\n\n  /**\n   * method to log out, it should only be used if you do not use the login effects\n   * @param redirectUri\n   */\n  logoutAndDispatch (redirectUri?: string): void {\n    if (redirectUri) {\n      from(this.keyCloak.logout(redirectUri)).subscribe(() => {\n        this.store.dispatch(QuangKeycloakActions.userLogout({ redirectUri: redirectUri }))\n        this.store.dispatch(QuangKeycloakActions.userInfoLogout())\n        this.store.dispatch(QuangKeycloakActions.userRolesLogout())\n      })\n    } else {\n      alert('[AUTH KEYCLOAK SERVICE] No logout redirectUri config')\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "QuangKeycloakConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "keyCloak",
                        "type": "KeycloakService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 633,
                            "end": 639,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "QuangKeycloakConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 627,
                            "end": 632,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 652,
                            "end": 660,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "keyCloak"
                        },
                        "type": "KeycloakService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 646,
                            "end": 651,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 673,
                            "end": 678,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 667,
                            "end": 672,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangLayoutService",
            "id": "injectable-QuangLayoutService-ae196d3f0cc5a343582bf33122e05da3c71427342f14fd0667e1191a026cfda3fe4d399009c4e3aef46e49fad6db8792622f11dc6afe0d71cc2fb64832bf47be",
            "file": "projects/quang-utility/src/lib/quang-layout/quang-layout.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOrientation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns an observable that reports the state of the device orientation\n",
                    "description": "<p>returns an observable that reports the state of the device orientation</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { BreakpointObserver } from '@angular/cdk/layout'\nimport { Observable } from 'rxjs'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for layout\n */\nexport class QuangLayoutService {\n  /**\n   * constructor\n   * @param breakpointObserver material breakpoint utility\n   */\n  constructor (\n    private readonly breakpointObserver: BreakpointObserver\n  ) {\n  }\n\n  /**\n   * returns an observable that reports the state of the device orientation\n   */\n  getOrientation (): Observable<any> {\n    return this.breakpointObserver.observe([\n      '(orientation: portrait)',\n      '(orientation: landscape)'\n    ])\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 301,
                            "end": 319,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "breakpointObserver"
                        },
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 295,
                            "end": 300,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>material breakpoint utility</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangModalService",
            "id": "injectable-QuangModalService-9fda3395310432c5a63020e0fbed97717b39c30aca5048861366e0e2784e0361d5a28ecc6732c97ef13edaab7a0188ea7d636b86640e1caf2cdd7a72c8d59a0a",
            "file": "projects/quang-dialog/src/lib/modal/quang-modal.service.ts",
            "properties": [
                {
                    "name": "config",
                    "defaultValue": "{\n    keyboard: undefined,\n    ignoreBackdropClick: undefined,\n    class: undefined,\n    initialState: undefined,\n    animated: true\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalOptions",
                    "optional": false,
                    "description": "<p>modal configuration</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nmodal configuration\n"
                },
                {
                    "name": "modalRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef | null",
                    "optional": false,
                    "description": "<p>modal wrapper</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nmodal wrapper\n"
                }
            ],
            "methods": [
                {
                    "name": "closeModal",
                    "args": [
                        {
                            "name": "hideData",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmethod to close the modal, you can pass values to this method,\nthey will be emitted by the observable onHide of this service\n",
                    "description": "<p>method to close the modal, you can pass values to this method,\nthey will be emitted by the observable onHide of this service</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2841,
                                "end": 2849,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hideData"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2835,
                                "end": 2840,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onHiddenEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent that traces the successful closure of the modal\n",
                    "description": "<p>event that traces the successful closure of the modal</p>\n"
                },
                {
                    "name": "onHideEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent that traces the closure of the modal\n",
                    "description": "<p>event that traces the closure of the modal</p>\n"
                },
                {
                    "name": "onShowEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent that traces the opening of the modal\n",
                    "description": "<p>event that traces the opening of the modal</p>\n"
                },
                {
                    "name": "onShownEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent that traces the opening of the modal\n",
                    "description": "<p>event that traces the opening of the modal</p>\n"
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "modalComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modalTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "\"xl\" | \"lg\" | \"md\" | \"sm\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modalParams",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "closeWithKeyboard",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "ignoreCloseWithClick",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens the modal\nconfigure the modal\nselect the size\npass any data and set the title\n",
                    "description": "<p>opens the modal\nconfigure the modal\nselect the size\npass any data and set the title</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 871,
                                "end": 885,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "modalComponent"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 865,
                                "end": 870,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 898,
                                "end": 908,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "modalTitle"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 892,
                                "end": 897,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 921,
                                "end": 925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "size"
                            },
                            "type": "\"xl\" | \"lg\" | \"md\" | \"sm\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 915,
                                "end": 920,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 938,
                                "end": 949,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "modalParams"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 932,
                                "end": 937,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 962,
                                "end": 979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "closeWithKeyboard"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 956,
                                "end": 961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 992,
                                "end": 1012,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "ignoreCloseWithClick"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 986,
                                "end": 991,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\non the basis of the requested size, it sets the class of the modal that defines the size\n",
                    "description": "<p>on the basis of the requested size, it sets the class of the modal that defines the size</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2313,
                                "end": 2317,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "size"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2307,
                                "end": 2312,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 2324,
                                "end": 2331,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal'\nimport { take } from 'rxjs/operators'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for modal management\n */\nexport class QuangModalService {\n  /**\n   * modal configuration\n   */\n  config: ModalOptions = {\n    keyboard: undefined,\n    ignoreBackdropClick: undefined,\n    class: undefined,\n    initialState: undefined,\n    animated: true\n  }\n\n  /**\n   * modal wrapper\n   */\n  modalRef: BsModalRef | null = null\n\n  /**\n   * constructor\n   * @param modalService modal utility\n   */\n  constructor (\n    private readonly modalService: BsModalService\n  ) {\n  }\n\n  /**\n   * opens the modal\n   * configure the modal\n   * select the size\n   * pass any data and set the title\n   * @param modalComponent\n   * @param modalTitle\n   * @param size\n   * @param modalParams\n   * @param closeWithKeyboard\n   * @param ignoreCloseWithClick\n   */\n  openModal (modalComponent: any,\n    modalTitle: string,\n    size: 'xl' | 'lg' | 'md' | 'sm',\n    modalParams?: any,\n    closeWithKeyboard?: boolean,\n    ignoreCloseWithClick?: boolean\n  ): void {\n    this.modalRef = new BsModalRef()\n    this.config = {\n      ...this.config,\n      keyboard: closeWithKeyboard,\n      ignoreBackdropClick: ignoreCloseWithClick,\n      class: '',\n      initialState: modalParams\n    }\n    this.setSize(size)\n    this.modalRef = this.modalService.show(modalComponent, this.config)\n    this.modalRef.content.title = modalTitle\n  }\n\n  /**\n   * event that traces the opening of the modal\n   */\n  onShownEvent (): Observable<any> {\n    return this.modalService.onShown.pipe(take(1))\n  }\n\n  /**\n   * event that traces the opening of the modal\n   */\n  onShowEvent (): Observable<any> {\n    return this.modalService.onShow.pipe(take(1))\n  }\n\n  /**\n   * event that traces the closure of the modal\n   */\n  onHideEvent (): Observable<any> {\n    return this.modalService.onHide.pipe(take(1))\n  }\n\n  /**\n   * event that traces the successful closure of the modal\n   */\n  onHiddenEvent (): Observable<any> {\n    return this.modalService.onHidden.pipe(take(1))\n  }\n\n  /**\n   * on the basis of the requested size, it sets the class of the modal that defines the size\n   * @param size\n   * @private\n   */\n  private setSize (size: string): void {\n    switch (size) {\n      case 'xl':\n        this.config.class = 'modal-xl'\n        break\n      case 'lg':\n        this.config.class = 'modal-lg'\n        break\n      case 'sm':\n        this.config.class = 'modal-sm'\n        break\n      default:\n        this.config.class = 'modal-md'\n        break\n    }\n  }\n\n  /**\n   * method to close the modal, you can pass values to this method,\n   * they will be emitted by the observable onHide of this service\n   * @param hideData\n   */\n  closeModal (hideData: string | number): void {\n    this.modalService.onHide.emit(hideData)\n    this.modalRef?.hide()\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 639,
                            "end": 651,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "modalService"
                        },
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 633,
                            "end": 638,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>modal utility</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangNotificationService",
            "id": "injectable-QuangNotificationService-8223d1ebf78256f766d230632f27d07300904adad347370e98eeab6967f2e8638201fa193e2858ce70e4636287236635de7c6ed34c1c9cf156487c220e3a2b84",
            "file": "projects/quang-dialog/src/lib/notification/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "requestPermission",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendNotification",
                    "args": [
                        {
                            "name": "n",
                            "type": "QuangNotification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "n",
                            "type": "QuangNotification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Store } from '@ngrx/store'\nimport { QuangDialogState } from '../quang-dialog.reducers'\nimport { QuangNotification } from './notification.model'\nimport { from, Observable, of } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\nimport { NotificationActions } from './notification-store/actions'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuangNotificationService {\n  constructor (\n    private readonly store: Store<QuangDialogState>\n  ) { }\n\n  requestPermission (): Observable<boolean> {\n    if (this.checkNotification()) {\n      return from(Notification.requestPermission()).pipe(\n        switchMap(p => of(p === 'granted'))\n      )\n    }\n    return of(false)\n  }\n\n  sendNotification (n: QuangNotification): void {\n    this.store.dispatch(NotificationActions.sendNotification({ notificationData: n }))\n  }\n\n  private checkNotification (): boolean {\n    try {\n      Notification.requestPermission().then()\n    } catch (e) {\n      return false\n    }\n    return true\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<QuangDialogState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<QuangDialogState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangOfflineService",
            "id": "injectable-QuangOfflineService-a656e3f197ad990cd4dfcdda54229d33007e3b2af77049a0e0116c78d17dc2b7908cbf001f36d1b7669560992974d41b3456306e7b8dced824bd73ce3d3c2f71",
            "file": "projects/quang-dialog/src/lib/offline/offline.service.ts",
            "properties": [
                {
                    "name": "offlineLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>message that notifies the user of the lack of connection</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nmessage that notifies the user of the lack of connection\n"
                }
            ],
            "methods": [
                {
                    "name": "getConnectionObserver",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConnection status observer\n",
                    "description": "<p>Connection status observer</p>\n"
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the translation of the offline message,\nin the general translations file the key is always \"offline.msg\"\n",
                    "description": "<p>retrieves the translation of the offline message,\nin the general translations file the key is always &quot;offline.msg&quot;</p>\n"
                },
                {
                    "name": "observeLine",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nconvenience method of having lost the connection without knowing the selector name of ngRx\n",
                    "description": "<p>convenience method of having lost the connection without knowing the selector name of ngRx</p>\n"
                },
                {
                    "name": "observeOffline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConnection status management,\nif there is no connection, it displays an alert snackbar and sends the disconnected status to the store\notherwise it closes the snackbar, if open, and sends the connected status to the store\n",
                    "description": "<p>Connection status management,\nif there is no connection, it displays an alert snackbar and sends the disconnected status to the store\notherwise it closes the snackbar, if open, and sends the connected status to the store</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { fromEvent, merge, Observable, of } from 'rxjs'\nimport { mapTo } from 'rxjs/operators'\nimport { QuangSnackbarService } from '../snackbar/quang-snackbar.service'\nimport { Store } from '@ngrx/store'\nimport { TranslocoService } from '@ngneat/transloco'\nimport { QuangDialogStateModule } from '../quang-dialog.reducers'\nimport { OfflineActions } from './offline-store/actions'\nimport { OfflineSelectors } from './offline-store/selectors'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for offline management\n */\nexport class QuangOfflineService {\n  /**\n   * message that notifies the user of the lack of connection\n   */\n  offlineLabel: string = ''\n\n  /**\n   * constructor\n   * @param quangSnackbar\n   * @param translate\n   * @param store\n   */\n  constructor (\n    private readonly quangSnackbar: QuangSnackbarService,\n    private readonly translate: TranslocoService,\n    private readonly store: Store<QuangDialogStateModule>\n  ) {\n  }\n\n  /**\n   * Connection status observer\n   */\n  getConnectionObserver (): Observable<boolean> {\n    return merge(\n      of(navigator.onLine),\n      fromEvent(window, 'online').pipe(mapTo(true)),\n      fromEvent(window, 'offline').pipe(mapTo(false))\n    )\n  }\n\n  /**\n   * Connection status management,\n   * if there is no connection, it displays an alert snackbar and sends the disconnected status to the store\n   * otherwise it closes the snackbar, if open, and sends the connected status to the store\n   */\n  observeOffline (): void {\n    this.getLabel()\n    this.getConnectionObserver().subscribe((connection: boolean) => {\n      if (!connection) {\n        this.store.dispatch(OfflineActions.offline())\n        this.quangSnackbar.openSnackbar(this.offlineLabel)\n      } else {\n        this.store.dispatch(OfflineActions.online())\n        if (this.quangSnackbar.snackBar) {\n          this.quangSnackbar.closeSnackbar()\n        }\n      }\n    })\n  }\n\n  /**\n   * retrieves the translation of the offline message,\n   * in the general translations file the key is always \"offline.msg\"\n   */\n  getLabel (): void {\n    this.translate.selectTranslate('offline.msg').subscribe((l) => {\n      this.offlineLabel = l\n    })\n  }\n\n  /**\n   * convenience method of having lost the connection without knowing the selector name of ngRx\n   */\n  observeLine (): Observable<any> {\n    return this.store.select(OfflineSelectors.selectLine)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "quangSnackbar",
                        "type": "QuangSnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 768,
                            "end": 781,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangSnackbar"
                        },
                        "type": "QuangSnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 762,
                            "end": 767,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 794,
                            "end": 803,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "translate"
                        },
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 788,
                            "end": 793,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 816,
                            "end": 821,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 810,
                            "end": 815,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangPaginatorService",
            "id": "injectable-QuangPaginatorService-18cd08279c157fa9b6c7a77767619e05bfbae8ef73fc8a9769483b458f74ddfc00e8382368ac320098122ff3bf909c374815136e4d0a52e5a45a66e4433cd72d",
            "file": "projects/quang-core/src/lib/paginator/paginator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPage",
                    "args": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the portion of the list given the page and the number of items per page\n",
                    "description": "<p>Returns the portion of the list given the page and the number of items per page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 294,
                                "end": 298,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 288,
                                "end": 293,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list to be paged</p>\n"
                        },
                        {
                            "name": {
                                "pos": 328,
                                "end": 338,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "pageNumber"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 322,
                                "end": 327,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>page number</p>\n"
                        },
                        {
                            "name": {
                                "pos": 363,
                                "end": 371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "pageSize"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 357,
                                "end": 362,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>page size</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for paginator management\n */\nexport class QuangPaginatorService {\n  /**\n   * Returns the portion of the list given the page and the number of items per page\n   * @param list list to be paged\n   * @param pageNumber page number\n   * @param pageSize page size\n   */\n  getPage (list: any[], pageNumber: number, pageSize: number): any[] {\n    const start = pageNumber * pageSize\n    const end = (pageNumber + 1) * pageSize\n    return list.slice(start, end)\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "QuangSnackbarService",
            "id": "injectable-QuangSnackbarService-1b057a50f10350b0812b26be889a99077eae462b49ffcc1dc1c517554bf68822fbdd1b0f27fdb75d128bdbc6fda6b6ec7d04abae4735d8d480eec29778e9c958",
            "file": "projects/quang-dialog/src/lib/snackbar/quang-snackbar.service.ts",
            "properties": [
                {
                    "name": "snackBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>snackbar wrapper</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nsnackbar wrapper\n"
                }
            ],
            "methods": [
                {
                    "name": "closeSnackbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncloses the snackbar\n",
                    "description": "<p>closes the snackbar</p>\n"
                },
                {
                    "name": "openSnackbar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "actionFunction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHe opens the snackbar\nin addition to the configurations,\nyou can pass a function that will be executed when the snackbar action is triggered\n",
                    "description": "<p>He opens the snackbar\nin addition to the configurations,\nyou can pass a function that will be executed when the snackbar action is triggered</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 606,
                                "end": 613,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 600,
                                "end": 605,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 626,
                                "end": 630,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "time"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 620,
                                "end": 625,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 643,
                                "end": 649,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 637,
                                "end": 642,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 662,
                                "end": 676,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "actionFunction"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 656,
                                "end": 661,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { MatSnackBar } from '@angular/material/snack-bar'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for snackbar management\n */\nexport class QuangSnackbarService {\n  /**\n   * snackbar wrapper\n   */\n  snackBar: any\n\n  /**\n   * constructor\n   * @param snackBarService\n   */\n  constructor (\n    private readonly snackBarService: MatSnackBar\n  ) {\n  }\n\n  /**\n   * He opens the snackbar\n   * in addition to the configurations,\n   * you can pass a function that will be executed when the snackbar action is triggered\n   * @param message\n   * @param time\n   * @param action\n   * @param actionFunction\n   */\n  openSnackbar (message: string, time?: number, action?: string, actionFunction?: any): void {\n    this.snackBar = this.snackBarService.open(\n      message,\n      action,\n      {\n        duration: time || undefined\n      }\n    )\n    if (actionFunction) {\n      this.snackBar.onAction().subscribe(actionFunction)\n    }\n  }\n\n  /**\n   * closes the snackbar\n   */\n  closeSnackbar (): void {\n    this.snackBar.dismiss()\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBarService",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 333,
                            "end": 348,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "snackBarService"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 327,
                            "end": 332,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangStorageService",
            "id": "injectable-QuangStorageService-2f35e74256ec9573d580693b1d2ef218278a46bba8bbf8017fea8e30c08a7652a3c9cf5cbf54eaae31e8d290582b527c87d9edcf9025f771ff357fedf8186790",
            "file": "projects/quang-utility/src/lib/quang-storage-service/quang-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearLocal",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeletes the data saved with the passed key from the localStorage\n",
                    "description": "<p>deletes the data saved with the passed key from the localStorage</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2697,
                                "end": 2700,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2691,
                                "end": 2696,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearSession",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeletes the data saved with the passed key from the sessionStorage\n",
                    "description": "<p>deletes the data saved with the passed key from the sessionStorage</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1479,
                                "end": 1482,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1473,
                                "end": 1478,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getLocal",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the data saved with the passed key from the localStorage\n",
                    "description": "<p>retrieves the data saved with the passed key from the localStorage</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2121,
                                "end": 2124,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2115,
                                "end": 2120,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getLocalDefault",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the data saved with the passed key from the localStorage\nif it finds nothing, it returns the default value set\n",
                    "description": "<p>retrieves the data saved with the passed key from the localStorage\nif it finds nothing, it returns the default value set</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2372,
                                "end": 2375,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2366,
                                "end": 2371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2388,
                                "end": 2400,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "defaultValue"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2382,
                                "end": 2387,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getSession",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the data saved with the passed key from the sessionStorage\n",
                    "description": "<p>retrieves the data saved with the passed key from the sessionStorage</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 890,
                                "end": 893,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 884,
                                "end": 889,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getSessionDefault",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nretrieves the data saved with the passed key from the sessionStorage,\nif it finds nothing, it returns the default value set\n",
                    "description": "<p>retrieves the data saved with the passed key from the sessionStorage,\nif it finds nothing, it returns the default value set</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1148,
                                "end": 1151,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1142,
                                "end": 1147,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1164,
                                "end": 1176,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "defaultValue"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1158,
                                "end": 1163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "observeLocal",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns an observable that emits whenever the value of the passed key changes within the localStoare\n",
                    "description": "<p>returns an observable that emits whenever the value of the passed key changes within the localStoare</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2904,
                                "end": 2907,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2898,
                                "end": 2903,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "observeSession",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns an observable that it issues whenever the value of the passed key changes within the sessionStoare\n",
                    "description": "<p>returns an observable that it issues whenever the value of the passed key changes within the sessionStoare</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1696,
                                "end": 1699,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1690,
                                "end": 1695,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setLocal",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsaves in the localStorage the past data identified by the passed key\n",
                    "description": "<p>saves in the localStorage the past data identified by the passed key</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1897,
                                "end": 1900,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1891,
                                "end": 1896,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1913,
                                "end": 1918,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1907,
                                "end": 1912,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setSession",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsaves in the sessionStorage the past data identified by the passed key\n",
                    "description": "<p>saves in the sessionStorage the past data identified by the passed key</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 660,
                                "end": 663,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 654,
                                "end": 659,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 676,
                                "end": 681,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 670,
                                "end": 675,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage'\nimport { Observable } from 'rxjs'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for web storage management\n */\nexport class QuangStorageService {\n  /**\n   * constructor\n   * @param sessionStorage session storage access\n   * @param localStorage local storage access\n   */\n  constructor (\n    private readonly sessionStorage: SessionStorageService,\n    private readonly localStorage: LocalStorageService) {\n  }\n\n  /**\n   * saves in the sessionStorage the past data identified by the passed key\n   * @param key\n   * @param value\n   */\n  setSession (key: string, value: any): void {\n    this.sessionStorage.store(key, JSON.stringify(value))\n  }\n\n  /**\n   * retrieves the data saved with the passed key from the sessionStorage\n   * @param key\n   */\n  getSession (key: string): any {\n    return JSON.parse(this.sessionStorage.retrieve(key))\n  }\n\n  /**\n   * retrieves the data saved with the passed key from the sessionStorage,\n   * if it finds nothing, it returns the default value set\n   * @param key\n   * @param defaultValue\n   */\n  getSessionDefault (key: string, defaultValue: string): string {\n    try {\n      return JSON.parse(this.sessionStorage.retrieve(key)) ?? defaultValue\n    } catch (e) {\n      return defaultValue\n    }\n  }\n\n  /**\n   * deletes the data saved with the passed key from the sessionStorage\n   * @param key\n   */\n  clearSession (key: string): void {\n    this.sessionStorage.clear(key)\n  }\n\n  /**\n   * returns an observable that it issues whenever the value of the passed key changes within the sessionStoare\n   * @param key\n   */\n  observeSession (key: string): Observable<any> {\n    return this.sessionStorage.observe(key)\n  }\n\n  /**\n   * saves in the localStorage the past data identified by the passed key\n   * @param key\n   * @param value\n   */\n  setLocal (key: string, value: any): void {\n    this.localStorage.store(key, JSON.stringify(value))\n  }\n\n  /**\n   * retrieves the data saved with the passed key from the localStorage\n   * @param key\n   */\n  getLocal (key: string): any {\n    return JSON.parse(this.localStorage.retrieve(key))\n  }\n\n  /**\n   * retrieves the data saved with the passed key from the localStorage\n   * if it finds nothing, it returns the default value set\n   * @param key\n   * @param defaultValue\n   */\n  getLocalDefault (key: string, defaultValue: string): string {\n    try {\n      return JSON.parse(this.localStorage.retrieve(key)) ?? defaultValue\n    } catch (e) {\n      return defaultValue\n    }\n  }\n\n  /**\n   * deletes the data saved with the passed key from the localStorage\n   * @param key\n   */\n  clearLocal (key: string): void {\n    this.localStorage.clear(key)\n  }\n\n  /**\n   * returns an observable that emits whenever the value of the passed key changes within the localStoare\n   * @param key\n   */\n  observeLocal (key: string): Observable<any> {\n    return this.localStorage.observe(key)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionStorage",
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 337,
                            "end": 351,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "sessionStorage"
                        },
                        "type": "SessionStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 331,
                            "end": 336,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>session storage access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 387,
                            "end": 399,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "localStorage"
                        },
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 381,
                            "end": 386,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>local storage access</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangToastService",
            "id": "injectable-QuangToastService-65bc675a6d71ced91b171f726657ab3a521b23046fdb8ad7b479a68c195a870d371831d7a1fd3143f9d98a1a8213cad972867405037c86f8ca1749bc0df276ae",
            "file": "projects/quang-dialog/src/lib/toast/toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "closeToast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlose the toast\n",
                    "description": "<p>lose the toast</p>\n"
                },
                {
                    "name": "openToast",
                    "args": [
                        {
                            "name": "toast",
                            "type": "QuangToast",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens the toast\n",
                    "description": "<p>opens the toast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 565,
                                "end": 570,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "toast"
                            },
                            "type": "QuangToast",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 559,
                                "end": 564,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Store } from '@ngrx/store'\nimport { QuangToast } from './toast.model'\nimport { ToastActions } from './toast-store/actions'\nimport { QuangDialogStateModule } from '../quang-dialog.reducers'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for toast management\n */\nexport class QuangToastService {\n  /**\n   * constructor\n   * @param store store access\n   */\n  constructor (\n    private readonly store: Store<QuangDialogStateModule>\n  ) {\n  }\n\n  /**\n   * opens the toast\n   * @param toast\n   */\n  openToast (toast: QuangToast): void {\n    this.store.dispatch(ToastActions.openToast({ toastData: toast }))\n  }\n\n  /**\n   * lose the toast\n   */\n  closeToast (): void {\n    this.store.dispatch(ToastActions.deleteToast())\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 416,
                            "end": 421,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 410,
                            "end": 415,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QuangValidatorsService",
            "id": "injectable-QuangValidatorsService-163a1d9e899fcfc915bdef30fde0c22bfa83f20604de5e7533fbabca1fede4083c0b72ed78f1523db2aab8bb11e83145384d4a6408b7d55cb07a0f7060282546",
            "file": "projects/quang-utility/src/lib/quang-validators/quang-validators.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "dateBetween",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the past date is between the past two\n",
                    "description": "<p>Check if the past date is between the past two</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3958,
                                "end": 3967,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "startDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3952,
                                "end": 3957,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3980,
                                "end": 3987,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3974,
                                "end": 3979,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fileExtensions",
                    "args": [
                        {
                            "name": "fileExtensions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the passed file has extension contained in the list of accepted ones\n",
                    "description": "<p>Check if the passed file has extension contained in the list of accepted ones</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2577,
                                "end": 2591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileExtensions"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2571,
                                "end": 2576,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fileMaxSize",
                    "args": [
                        {
                            "name": "maxSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the file size is smaller than required\n",
                    "description": "<p>Check if the file size is smaller than required</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1080,
                                "end": 1087,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "maxSize"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1074,
                                "end": 1079,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fileMinSize",
                    "args": [
                        {
                            "name": "minSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the file size is larger than required\n",
                    "description": "<p>Check if the file size is larger than required</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1470,
                                "end": 1477,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minSize"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1464,
                                "end": 1469,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fileType",
                    "args": [
                        {
                            "name": "fileTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the file passed is of the type contained in the list of accepted ones\n",
                    "description": "<p>Check if the file passed is of the type contained in the list of accepted ones</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2174,
                                "end": 2183,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileTypes"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2168,
                                "end": 2173,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isFile",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the passed object is a file\n",
                    "description": "<p>Check if the passed object is a file</p>\n"
                },
                {
                    "name": "isFiscalCode",
                    "args": [],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isVatNumber",
                    "args": [
                        {
                            "name": "locale",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "locale",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxDate",
                    "args": [
                        {
                            "name": "maxDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the past date is earlier than needed\n",
                    "description": "<p>Check if the past date is earlier than needed</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3625,
                                "end": 3632,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "maxDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3619,
                                "end": 3624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "minDate",
                    "args": [
                        {
                            "name": "minDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the past date is more than the necessary one\n",
                    "description": "<p>Check if the past date is more than the necessary one</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3292,
                                "end": 3299,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "minDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3286,
                                "end": 3291,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "requiredCheckbox",
                    "args": [],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => { [key: string]: any; }",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nvalid if a checkbox is mandatory\n",
                    "description": "<p>valid if a checkbox is mandatory</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { AbstractControl, ValidatorFn } from '@angular/forms'\nimport { isAfter, isBefore, isWithinInterval } from 'date-fns'\n\nexport const europeanVatNumber: { [key: string]: RegExp } = {\n  AT: /U[0-9]{8}/gm,\n  BE: /0[0-9]{9}/gm,\n  BG: /[0-9]{9,10}/gm,\n  CY: /[0-9]{8}L/gm,\n  CZ: /[0-9]{8,10}/gm,\n  DE: /[0-9]{9}/gm,\n  DK: /[0-9]{8}/gm,\n  EE: /[0-9]{9}/gm,\n  GR: /[0-9]{9}/gm,\n  ES: /[0-9A-Z][0-9]{7}[0-9A-Z]/gm,\n  FI: /[0-9]{8}/gm,\n  FR: /[0-9A-Z]{2}[0-9]{9}/gm,\n  GB: /([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})/gm,\n  HU: /[0-9]{8}/gm,\n  IE: /[0-9]S[0-9]{5}L/gm,\n  IT: /[0-9]{11}/gm,\n  LT: /([0-9]{9}|[0-9]{12})/gm,\n  LU: /[0-9]{8}/gm,\n  LV: /[0-9]{11}/gm,\n  MT: /[0-9]{8}/gm,\n  NL: /[0-9]{9}B[0-9]{2}/gm,\n  PL: /[0-9]{10}/gm,\n  PT: /[0-9]{9}/gm,\n  RO: /[0-9]{2,10}/gm,\n  SE: /[0-9]{12}/gm,\n  SI: /[0-9]{8}/gm,\n  SK: /[0-9]{10}/gm\n}\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * custom validators\n */\nexport class QuangValidatorsService {\n  /**\n   * Check if the file size is smaller than required\n   * @param maxSize\n   */\n  fileMaxSize (maxSize: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.value && control.value instanceof File && control.value?.size > maxSize) {\n        return { maxSize: { requiredValue: maxSize } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Check if the file size is larger than required\n   * @param minSize\n   */\n  fileMinSize (minSize: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.value && control.value instanceof File && control.value?.size < minSize) {\n        return { minSize: { requiredValue: minSize } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Check if the passed object is a file\n   */\n  isFile (): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.value && control.value instanceof File) {\n        return null\n      }\n      return { isFile: {} }\n    }\n  }\n\n  /**\n   * Check if the file passed is of the type contained in the list of accepted ones\n   * @param fileTypes\n   */\n  fileType (fileTypes: string[]) {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.value && !fileTypes.includes(control.value?.type)) {\n        return { fileType: { requiredValue: fileTypes.toString() } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Check if the passed file has extension contained in the list of accepted ones\n   * @param fileExtensions\n   */\n  fileExtensions (fileExtensions: string[]) {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.value && !fileExtensions.includes(control.value?.name?.match(/(?:\\.([^.]+))?$/g)[0])) {\n        return { fileExtension: { requiredValue: fileExtensions.toString() } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * valid if a checkbox is mandatory\n   */\n  requiredCheckbox () {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (!control.value) {\n        return { required: { requiredValue: control.value } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Check if the past date is more than the necessary one\n   * @param minDate\n   */\n  minDate (minDate: Date) {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (isBefore(new Date(control.value), minDate)) {\n        return { minDate: { requiredValue: minDate } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Check if the past date is earlier than needed\n   * @param maxDate\n   */\n  maxDate (maxDate: Date) {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (isAfter(new Date(control.value), maxDate)) {\n        return { maxDate: { requiredValue: maxDate } }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Check if the past date is between the past two\n   * @param startDate\n   * @param endDate\n   */\n  dateBetween (startDate: Date, endDate: Date) {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (!isWithinInterval(new Date(control.value), { start: startDate, end: endDate })) {\n        return { dateBetween: { requiredValue: [startDate, endDate] } }\n      }\n      return null\n    }\n  }\n\n  isFiscalCode () {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (!/^([A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST]{1}[0-9LMNPQRSTUV]{2}[A-Z]{1}[0-9LMNPQRSTUV]{3}[A-Z]{1})$|([0-9]{11})$/gm.test(control.value.toUpperCase())) {\n        return { fiscalCode: false }\n      }\n      return null\n    }\n  }\n\n  isVatNumber (locale: string) {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (!europeanVatNumber[locale].test(control.value)) {\n        return { vatNumber: false }\n      }\n      return null\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "SentryDialogService",
            "id": "injectable-SentryDialogService-a5eeddb446dac2f632081a11763b8995783ca35fc607d4dee2fd929ccfdeb7cd5f84c04ed2c302c0e59e3e018cc43257f3fdc27d7236c1f81c0140b358aa05bf",
            "file": "projects/quang-dialog/src/lib/sentry/sentry-dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom error handler for sentry\n",
                    "description": "<p>Custom error handler for sentry</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 332,
                                "end": 337,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "error"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 326,
                                "end": 331,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http error</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { ErrorHandler, Injectable } from '@angular/core'\nimport * as Sentry from '@sentry/angular'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * utility for sentry error handler wrapper\n */\nexport class SentryDialogService implements ErrorHandler {\n  /**\n   * Custom error handler for sentry\n   * @param error http error\n   */\n  handleError (error: any): void {\n    console.error(error)\n    if (/Loading chunk [\\d]+ failed/.test(error.message)) {\n      window.location.reload()\n    }\n    if (error?.name === 'HttpErrorResponse') {\n      if (error?.status === 400 || error?.status === 404 || error?.status === 415) {\n        Sentry.showReportDialog({})\n      }\n    } else {\n      Sentry.showReportDialog({})\n    }\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "QuangAuthGuard",
            "id": "injectable-QuangAuthGuard-785eeeb40b6bb1371da567b001c5d80e08838e11ede0b0b3350969d86954972eec5d1d90bac68566edde36bd9431979f12304d323ae07f25a8439df82c5c1ad3",
            "file": "projects/quang-auth/src/lib/quang-auth-guard/quang-auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve user info if it exists, check if it has the necessary roles to view the page\n",
                    "description": "<p>Retrieve user info if it exists, check if it has the necessary roles to view the page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1564,
                                "end": 1569,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "route"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1558,
                                "end": 1563,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>active route</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1595,
                                "end": 1600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1589,
                                "end": 1594,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>router state</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkAllRole",
                    "args": [
                        {
                            "name": "allowedRoles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nObservable that checks if the user has all the required roles\n",
                    "description": "<p>Observable that checks if the user has all the required roles</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 958,
                                "end": 970,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "allowedRoles"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 952,
                                "end": 957,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>roles list</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkUntilRole",
                    "args": [
                        {
                            "name": "allowedRoles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nObservable that checks if the user has until one of the required roles\n",
                    "description": "<p>Observable that checks if the user has until one of the required roles</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1241,
                                "end": 1253,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "allowedRoles"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1235,
                                "end": 1240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>role list</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { Observable, of, throwError } from 'rxjs'\nimport {\n  catchError, filter, map, switchMap, take\n} from 'rxjs/operators'\nimport { Store } from '@ngrx/store'\nimport {\n  selectHasRoles,\n  selectHasUntilRoles,\n  selectUserInfo,\n  selectUserRoles\n} from '../quang-auth-store/selectors/quang-auth.selectors'\nimport { QuangAuthSelectors } from '../quang-auth-store/selectors'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * role guard\n */\nexport class QuangAuthGuard implements CanActivate {\n  /**\n   * constructor\n   * @param authStore store access\n   * @param router router access\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly router: Router\n  ) {\n  }\n\n  /**\n   * Observable that checks if the user has all the required roles\n   * @param allowedRoles roles list\n   */\n  checkAllRole (allowedRoles: string[]): Observable<boolean> {\n    return this.authStore\n      .select(selectHasRoles(allowedRoles))\n      .pipe(take(1))\n  }\n\n  /**\n   * Observable that checks if the user has until one of the required roles\n   * @param allowedRoles role list\n   */\n  checkUntilRole (allowedRoles: string[]): Observable<boolean> {\n    return this.authStore\n      .select(QuangAuthSelectors.selectHasUntilRoles(allowedRoles))\n      .pipe(take(1))\n  }\n\n  /**\n   * Retrieve user info if it exists, check if it has the necessary roles to view the page\n   * @param route active route\n   * @param state router state\n   */\n  canActivate (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authStore\n      .select(selectUserInfo)\n      .pipe(\n        filter(user => !!user),\n        take(1),\n        switchMap(user => {\n          if (route.data.condition === 'AND') {\n            return this.checkAllRole(route.data.allowedRoles)\n          }\n          return this.checkUntilRole(route.data.allowedRoles)\n        }),\n        switchMap(find => {\n          if (!find) {\n            throwError(find)\n          }\n          return of(find)\n        }),\n        catchError(e => {\n          this.router.navigate(['403'])\n          return of(false)\n        })\n      )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 704,
                            "end": 713,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 698,
                            "end": 703,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 739,
                            "end": 745,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 733,
                            "end": 738,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>router access</p>\n"
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "QuangKeycloakGuard",
            "id": "injectable-QuangKeycloakGuard-b15295922a72c4471f81466aef2fac396b18a671392707edf4d5f2d124b8ae23a35974e0e5e39be62c144b90c9c22bf9873417493cdd3e58143806ae745c37ed",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-guard/quang-keycloak.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve user info if it exists, check if it has the necessary roles to view the page\n",
                    "description": "<p>Retrieve user info if it exists, check if it has the necessary roles to view the page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1461,
                                "end": 1466,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "route"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1455,
                                "end": 1460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>active route</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1492,
                                "end": 1497,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1486,
                                "end": 1491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>router state</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkAllRole",
                    "args": [
                        {
                            "name": "allowedRoles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if the user has all the required roles saved in the store\n",
                    "description": "<p>check if the user has all the required roles saved in the store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 832,
                                "end": 844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "allowedRoles"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 826,
                                "end": 831,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>role list</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkUntilRole",
                    "args": [
                        {
                            "name": "allowedRoles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if the user has at least one required role saved in the store\n",
                    "description": "<p>check if the user has at least one required role saved in the store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1134,
                                "end": 1146,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "allowedRoles"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1128,
                                "end": 1133,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>role list</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { Observable, of, throwError } from 'rxjs'\nimport {\n  catchError, filter, map, switchMap, take\n} from 'rxjs/operators'\nimport { Store } from '@ngrx/store'\nimport { QuangKeycloakSelectors } from '../quang-keycloak-store/selectors'\n\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * role guard\n */\nexport class QuangKeycloakGuard implements CanActivate {\n  /**\n   * constructor\n   * @param authStore auth store access\n   * @param router router utility\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly router: Router\n  ) {\n  }\n\n  /**\n   * check if the user has all the required roles saved in the store\n   * @param allowedRoles role list\n   */\n  checkAllRole (allowedRoles: string[]): Observable<boolean> {\n    return this.authStore\n      .select(QuangKeycloakSelectors.selectHasRoles(allowedRoles))\n      .pipe(take(1))\n  }\n\n  /**\n   * check if the user has at least one required role saved in the store\n   * @param allowedRoles role list\n   */\n  checkUntilRole (allowedRoles: string[]): Observable<boolean> {\n    return this.authStore\n      .select(QuangKeycloakSelectors.selectHasUntilRoles(allowedRoles))\n      .pipe(take(1))\n  }\n\n  /**\n   * Retrieve user info if it exists, check if it has the necessary roles to view the page\n   * @param route active route\n   * @param state router state\n   */\n  canActivate (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authStore\n      .select(QuangKeycloakSelectors.selectUserInfo)\n      .pipe(\n        filter(user => !!user),\n        take(1),\n        switchMap(user => {\n          if (route.data.condition === 'AND') {\n            return this.checkAllRole(route.data.allowedRoles)\n          }\n          return this.checkUntilRole(route.data.allowedRoles)\n        }),\n        switchMap(find => {\n          if (!find) {\n            throwError(find)\n          }\n          return of(find)\n        }),\n        catchError(e => {\n          this.router.navigate(['403'])\n          return of(false)\n        })\n      )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 570,
                            "end": 579,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 564,
                            "end": 569,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>auth store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 610,
                            "end": 616,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 604,
                            "end": 609,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>router utility</p>\n"
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "QunagAuthAuthenticateGuard",
            "id": "injectable-QunagAuthAuthenticateGuard-b72161ef575328a74253c442cf80d46e9416ee09208be880d7b318fd5034a1ee828e2003e77f676f5e1d94f343e24173e970807c4fb526a8701f9df176a9dd23",
            "file": "projects/quang-auth/src/lib/quang-auth-guard/qunag-auth-authenticate.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router'\nimport { iif, Observable, of, throwError } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { selectIsAuthenticated } from '../quang-auth-store/selectors/quang-auth.selectors'\nimport { catchError, concatMap, delay, retryWhen, switchMap } from 'rxjs/operators'\n\n/**\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n *\n */\nexport class QunagAuthAuthenticateGuard implements CanActivate {\n  /**\n   * constructor\n   * @param authStore store access\n   * @param router router access\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly router: Router\n  ) {\n  }\n\n  canActivate (\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authStore\n      .select(selectIsAuthenticated)\n      .pipe(\n        switchMap((is) => !is ? throwError('not authenticated') : of(is)),\n        retryWhen(e => e.pipe(\n          concatMap((e, i) => iif(\n            () => i > 10,\n            throwError(e),\n            of(e).pipe(delay(500))\n          ))\n        )),\n        catchError(e => {\n          this.router.navigate(['404'])\n          return of(false)\n        })\n      )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 578,
                            "end": 587,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 572,
                            "end": 577,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 613,
                            "end": 619,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 607,
                            "end": 612,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>router access</p>\n"
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "OfflineInterceptor",
            "id": "injectable-OfflineInterceptor-e6f3b051f5eaff48a021473df4ac67cb10aab9135821fd95225a12fd4392fc5e7ca1b4ce7bfb35d9a0eb98b9ae9cfc97451243996c2ee03aec6ccb4f8c88cc2f",
            "file": "projects/quang-dialog/src/lib/offline/offline.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nintercepts the call and if the system is offline it tries again every 30 seconds\n",
                    "description": "<p>intercepts the call and if the system is offline it tries again every 30 seconds</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 810,
                                "end": 817,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "request"
                            },
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 804,
                                "end": 809,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http request http request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 856,
                                "end": 860,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "next"
                            },
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 850,
                                "end": 855,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http observable</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Interceptor decorator</p>\n",
            "rawdescription": "\n\nInterceptor decorator\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http'\nimport { Observable, of, timer } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { delayWhen, map, retryWhen, switchMap } from 'rxjs/operators'\nimport { OfflineSelectors } from './offline-store/selectors'\nimport { QuangDialogStateModule } from '../quang-dialog.reducers'\n\n/**\n * Interceptor decorator\n */\n@Injectable()\n/**\n * offline interceptor\n */\nexport class OfflineInterceptor implements HttpInterceptor {\n  /**\n   * constructor\n   * @param store store access\n   */\n  constructor (\n    private readonly store: Store<QuangDialogStateModule>\n  ) {\n  }\n\n  /**\n   * intercepts the call and if the system is offline it tries again every 30 seconds\n   * @param request http request http request\n   * @param next http observable\n   */\n  intercept (request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return this.store\n      .select(OfflineSelectors.selectLine)\n      .pipe(\n        map(line => {\n          if (!line) {\n            throw new Error()\n          }\n          return of(true)\n        }),\n        retryWhen(error => error.pipe(\n          delayWhen(val => timer(30 * 1000))\n        )),\n        switchMap(() => next.handle(request))\n      )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 596,
                            "end": 601,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 590,
                            "end": 595,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "QuangHttpErrorInterceptor",
            "id": "injectable-QuangHttpErrorInterceptor-2d5e601ae36adef113f7be7e761439bc0e7b65b887792f325e2bd31f2bc944182539074b351fd85b42623bad76a289ec50c94cad0d60976b87bdf89bf62a3afd",
            "file": "projects/quang-dialog/src/lib/http-error/quang-http-error.interceptor.ts",
            "properties": [
                {
                    "name": "_window",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>window access</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nwindow access\n"
                },
                {
                    "name": "noErrorUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "<p>no loader interceptor for this url or error</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nno loader interceptor for this url or error\n"
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nintercepts the call, checks if the url should display the error modal,\nif it displays the error modal\n",
                    "description": "<p>intercepts the call, checks if the url should display the error modal,\nif it displays the error modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1316,
                                "end": 1319,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "req"
                            },
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1310,
                                "end": 1315,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http request http request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1358,
                                "end": 1362,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "next"
                            },
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1352,
                                "end": 1357,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http observable</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Interceptor decorator</p>\n",
            "rawdescription": "\n\nInterceptor decorator\n",
            "sourceCode": "import { Injectable, Optional } from '@angular/core'\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http'\nimport { catchError, map } from 'rxjs/operators'\nimport { Observable, throwError } from 'rxjs'\nimport { QuangHttpErrorService } from './quang-http-error.service'\nimport { QuangDialogConfig } from '../quang-dialog.config'\n/**\n * Interceptor decorator\n */\n@Injectable()\n/**\n * http erro interceptor\n */\nexport class QuangHttpErrorInterceptor implements HttpInterceptor {\n  /**\n   * no loader interceptor for this url or error\n   */\n  noErrorUrls: Array<{ url: string, error: number }> = []\n  /**\n   * window access\n   */\n  _window = (): any => window\n\n  /**\n   * constructor\n   * @param quangHttpErrorService\n   * @param config\n   */\n  constructor (\n    private readonly quangHttpErrorService: QuangHttpErrorService,\n    @Optional() config?: QuangDialogConfig\n  ) {\n    if (config?.noErrorUrls?.length) {\n      this.noErrorUrls = config.noErrorUrls\n    } else if (this._window().quangConfig?.noErrorUrls) {\n      this.noErrorUrls = this._window().quangConfig?.noErrorUrls\n    } else {\n      this.noErrorUrls = []\n    }\n  }\n\n  /**\n   * intercepts the call, checks if the url should display the error modal,\n   * if it displays the error modal\n   * @param req http request http request\n   * @param next http observable\n   */\n  intercept (req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      map((resp: HttpEvent<any>) => {\n        return resp\n      }),\n      catchError((error: HttpErrorResponse) => {\n        if (this.noErrorUrls?.length) {\n          if (!this.noErrorUrls.find(rule => rule.error === error.status && error.url?.includes(rule.url))) {\n            this.quangHttpErrorService.openErrorModal(error)\n          }\n        } else {\n          this.quangHttpErrorService.openErrorModal(error)\n        }\n        return throwError(error)\n      })\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "quangHttpErrorService",
                        "type": "QuangHttpErrorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "QuangDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 749,
                            "end": 770,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "quangHttpErrorService"
                        },
                        "type": "QuangHttpErrorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 743,
                            "end": 748,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 783,
                            "end": 789,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "QuangDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 777,
                            "end": 782,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "QuangLoaderInterceptor",
            "id": "injectable-QuangLoaderInterceptor-1fbfb3d1913616b0c0f696ec8e8b4af895ed6f4f78ffd985033bd15b1409055e9ecff8a5015391b8a770d2c1387f41e80424b7769d7729e3edf0be97099ee1b3",
            "file": "projects/quang-dialog/src/lib/loader/quang-loader.interceptor.ts",
            "properties": [
                {
                    "name": "_window",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>window access</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nwindow access\n"
                },
                {
                    "name": "checkUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>check if the url of the call made and intercepted is present in one of the two lists</p>\n",
                    "line": 66,
                    "rawdescription": "\n\ncheck if the url of the call made and intercepted is present in one of the two lists\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1636,
                            "end": 1667,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1637,
                                "end": 1642,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http request</p>\n",
                            "name": {
                                "pos": 1643,
                                "end": 1650,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "request"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "noLoaderMethods",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>no loader method list</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nno loader method list\n"
                },
                {
                    "name": "noLoaderUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>no loader url list</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nno loader url list\n"
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nintercept the call, check if the url should display the loader\n",
                    "description": "<p>intercept the call, check if the url should display the loader</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1967,
                                "end": 1974,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "request"
                            },
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1961,
                                "end": 1966,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http request http request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2013,
                                "end": 2017,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "next"
                            },
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2007,
                                "end": 2012,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http observable</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>service decorator</p>\n",
            "rawdescription": "\n\nservice decorator\n",
            "sourceCode": "import { Injectable, Optional } from '@angular/core'\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest\n} from '@angular/common/http'\nimport { Observable, throwError } from 'rxjs'\nimport { catchError, finalize, map } from 'rxjs/operators'\nimport { Store } from '@ngrx/store'\nimport { QuangDialogConfig } from '../quang-dialog.config'\nimport { LoaderActions } from './loader-store/actions'\n/**\n * service decorator\n */\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * loader interceptor\n */\nexport class QuangLoaderInterceptor implements HttpInterceptor {\n  /**\n   * no loader url list\n   */\n  noLoaderUrls: string[] = []\n  /**\n   * no loader method list\n   */\n  noLoaderMethods: string[] = []\n  /**\n   * window access\n   */\n  _window = (): any => window\n\n  /**\n   * constructor\n   * @param store store access\n   * @param config module config\n   */\n  constructor (\n    private readonly store: Store<any>,\n    @Optional() config?: QuangDialogConfig\n  ) {\n    if (config?.noLoaderUrls?.length) {\n      this.noLoaderUrls = config.noLoaderUrls\n    } else if (this._window().quangConfig?.noLoaderUrls) {\n      this.noLoaderUrls = this._window().quangConfig?.noLoaderUrls\n    } else {\n      this.noLoaderUrls = []\n    }\n    if (config?.noLoaderMethods?.length) {\n      this.noLoaderMethods = config.noLoaderMethods\n    } else if (this._window().quangConfig?.noLoaderMethods) {\n      this.noLoaderMethods = this._window().quangConfig?.noLoaderMethods\n    } else {\n      this.noLoaderMethods = []\n    }\n  }\n\n  /**\n   * check if the url of the call made and intercepted is present in one of the two lists\n   * @param request http request\n   */\n  private readonly checkUrl = (request: HttpRequest<any>): boolean => {\n    return this.noLoaderUrls.some(url => request.url.includes(url)) || this.noLoaderMethods.some(method => request.method === method)\n  }\n\n  /**\n   * intercept the call, check if the url should display the loader\n   * @param request http request http request\n   * @param next http observable\n   */\n  intercept (request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const noLoader = this.checkUrl(request)\n    if (!noLoader) {\n      this.store.dispatch(LoaderActions.addLoader())\n    }\n    return next.handle(request).pipe(\n      map((event: HttpEvent<any>) => event),\n      catchError((error: HttpErrorResponse) => throwError(error)),\n      finalize(() => {\n        if (!noLoader) {\n          this.store.dispatch(LoaderActions.removeLoader())\n        }\n      })\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "QuangDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 35,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 826,
                            "end": 831,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 820,
                            "end": 825,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 857,
                            "end": 863,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "QuangDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 851,
                            "end": 856,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>module config</p>\n"
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "ChartArea",
            "id": "class-ChartArea-aadc3d5a4b5e9f22d300eb7589cf422748728d85b4c307dc0c51604700eb71a53ac8351b1645e094c1fa682d2ac0f11304245c3c37702b1b546a6be3cbf9ea4d",
            "file": "projects/quang-chart/src/lib/chart-area/chart-area.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartArea {\n  /**\n   * chart area constructor\n   * @param category chart category\n   * @param series chart series\n   */\n  constructor (\n    /**\n     * chart category\n     */\n    public category: string[],\n    /**\n     * chart series\n     */\n    public series: number[][]\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart area constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "category",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "series",
                        "type": "number[][]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nchart area constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 93,
                            "end": 101,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "category"
                        },
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 87,
                            "end": 92,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart category</p>\n"
                    },
                    {
                        "name": {
                            "pos": 129,
                            "end": 135,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "series"
                        },
                        "type": "number[][]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 123,
                            "end": 128,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart series</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "chart category",
                    "line": 14,
                    "rawdescription": "\n\nchart category\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "chart series",
                    "line": 18,
                    "rawdescription": "\n\nchart series\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart area</p>\n",
            "rawdescription": "\n\nchart area\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartBar",
            "id": "class-ChartBar-4a61b8507197248863e9d1bc3e8f20d98ff77502b72fde7e4bed294886b83d4c198e4fa41207719d75174e42883ada6a52a5259cfff466ce9483083606748ef8",
            "file": "projects/quang-chart/src/lib/chart-bar/chart-bar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartBar {\n  /**\n   * chart bar constructor\n   * @param category chart category\n   * @param series chart series\n   */\n  constructor (\n    /**\n     * chart category\n     */\n    public category: string[],\n    /**\n     * chart seires\n     */\n    public series: number[][]\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart bar constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "category",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "series",
                        "type": "number[][]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nchart bar constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 90,
                            "end": 98,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "category"
                        },
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 84,
                            "end": 89,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart category</p>\n"
                    },
                    {
                        "name": {
                            "pos": 126,
                            "end": 132,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "series"
                        },
                        "type": "number[][]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 120,
                            "end": 125,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart series</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "chart category",
                    "line": 14,
                    "rawdescription": "\n\nchart category\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "chart series",
                    "line": 18,
                    "rawdescription": "\n\nchart seires\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart bar</p>\n",
            "rawdescription": "\n\nchart bar\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartCandlestick",
            "id": "class-ChartCandlestick-53fed95979f91f6b164ee4695bc495c6d7162bb20cc3587db5c43cef50ad29b40c27b67ad6f2c1e5a572f5d1de2641f6116dfe3d19439d650caba3ec0e6e1c5d",
            "file": "projects/quang-chart/src/lib/chart-candlestick/chart-candlestick.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartCandlestick {\n  /**\n   * char candlestick constructor\n   * @param category chart category\n   * @param series chart series\n   */\n  constructor (\n    /**\n     * chart categoru\n     */\n    public category: string[],\n    /**\n     * chart series\n     */\n    public series: Array<[number, number, number, number]>\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>char candlestick constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "category",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "series",
                        "type": "Array<>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nchar candlestick constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 113,
                            "end": 121,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "category"
                        },
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 107,
                            "end": 112,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart category</p>\n"
                    },
                    {
                        "name": {
                            "pos": 149,
                            "end": 155,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "series"
                        },
                        "type": "Array<>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 143,
                            "end": 148,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart series</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "chart category",
                    "line": 14,
                    "rawdescription": "\n\nchart categoru\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<>",
                    "optional": false,
                    "description": "chart series",
                    "line": 18,
                    "rawdescription": "\n\nchart series\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart candlestick</p>\n",
            "rawdescription": "\n\nchart candlestick\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartDoughnut",
            "id": "class-ChartDoughnut-2946473e9a6c72f1966189cd373fd2973ec3e811469dcac6914d2eb5f035c73797728ec25a9b2c8876b0cb84e487fb529c9423fab222e147dfdcc97aca0bfa29",
            "file": "projects/quang-chart/src/lib/chart-doughnut/chart-doughnut.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartDoughnut {\n  /**\n   * chart doughnut series item constructor\n   * @param value chart value\n   * @param name chart name\n   */\n  constructor (\n    /**\n     * chart value\n     */\n    public value: number,\n    /**\n     * chart name\n     */\n    public name: string\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart doughnut series item constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nchart doughnut series item constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 117,
                            "end": 122,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "value"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 111,
                            "end": 116,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart value</p>\n"
                    },
                    {
                        "name": {
                            "pos": 147,
                            "end": 151,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "name"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 141,
                            "end": 146,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart name</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "chart name",
                    "line": 18,
                    "rawdescription": "\n\nchart name\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "chart value",
                    "line": 14,
                    "rawdescription": "\n\nchart value\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart doughnut</p>\n",
            "rawdescription": "\n\nchart doughnut\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartGauge",
            "id": "class-ChartGauge-c0e0a15f8cda057f79b60a92e549ff013ed93b7a448f423562a505116461ecf6836cbfc8c07f46b3aa30a08f6be5e6127109509427068786041002340aae490b",
            "file": "projects/quang-chart/src/lib/chart-gauge/chart-gauge.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartGauge {\n  /**\n   *\n   * @param name\n   * @param value\n   */\n  constructor (\n    /**\n     *\n     */\n    public name: string,\n    /**\n     *\n     */\n    public value: number\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 60,
                            "end": 64,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "name"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 54,
                            "end": 59,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 77,
                            "end": 82,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "value"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 71,
                            "end": 76,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "line": 14,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "line": 18,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartLine",
            "id": "class-ChartLine-07402c3a6d55c00430e84696e560c7d73ff20e20194178d754c29c85e6fc371684523cc5464e8499adecfc0e34147c44fe972ba983783950a578d6880cce08b6",
            "file": "projects/quang-chart/src/lib/chart-line/chart-line.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartLine {\n  /**\n   * chart line constructor\n   * @param category chart category\n   * @param series chart series\n   */\n  constructor (\n    /**\n     * chart category\n     */\n    public category: string[],\n    /**\n     * chart series\n     */\n    public series: number[][]\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart line constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "category",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "series",
                        "type": "number[][]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nchart line constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 93,
                            "end": 101,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "category"
                        },
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 87,
                            "end": 92,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart category</p>\n"
                    },
                    {
                        "name": {
                            "pos": 129,
                            "end": 135,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "series"
                        },
                        "type": "number[][]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 123,
                            "end": 128,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart series</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "chart category",
                    "line": 14,
                    "rawdescription": "\n\nchart category\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "chart series",
                    "line": 18,
                    "rawdescription": "\n\nchart series\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart line</p>\n",
            "rawdescription": "\n\nchart line\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartPie",
            "id": "class-ChartPie-b2ab71a1851b8a528305d1fc016500be684402252ce43654c1768c249924407d830e11435223460fef5df405e8f4c729fc96874a8070910fe087b18f13a86855",
            "file": "projects/quang-chart/src/lib/chart-pie/chart-pie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartPie {\n  /**\n   * chart pie series item constructor\n   * @param value chart value\n   * @param name chart name\n   */\n  constructor (\n    /**\n     * chart value\n     */\n    public value: number,\n    /**\n     * chart name\n     */\n    public name: string\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart pie series item constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nchart pie series item constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 102,
                            "end": 107,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "value"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 96,
                            "end": 101,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart value</p>\n"
                    },
                    {
                        "name": {
                            "pos": 132,
                            "end": 136,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "name"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 126,
                            "end": 131,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart name</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "chart name",
                    "line": 18,
                    "rawdescription": "\n\nchart name\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "chart value",
                    "line": 14,
                    "rawdescription": "\n\nchart value\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart pie</p>\n",
            "rawdescription": "\n\nchart pie\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartRadar",
            "id": "class-ChartRadar-fcfe0df3d7fde2e9a700ba3d85e62ae9154e17aeccdc2b03a576c8d826f3ed8de21758910aef2157e72d7d4938578b23b3a18cb31137a92f57d7cdfcbf929ef6",
            "file": "projects/quang-chart/src/lib/chart-radar/chart-radar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartRadar {\n  /**\n   * chart radar  value\n   */\n  public value: number[] = []\n  /**\n   * chart radar name\n   */\n  public name?: string\n  /**\n   * Radar line style\n   */\n  public lineStyle?: {\n    color: string\n  }\n\n  /**\n   * chart symbol aspect\n   */\n  public symbolKeepAspect = true\n  /**\n   * chart symbol\n   */\n  public symbol: string = 'none'\n\n  constructor (value: number[], name?: string, color?: string) {\n    this.value = value\n    this.name = name\n    if (color) {\n      this.lineStyle = { color: color }\n    }\n  }\n}\n\n/**\n * chart radar indicator\n */\nexport class ChartRadarIndicator {\n  /**\n   * chart radar series item constructor\n   * @param name chart name\n   * @param max chart max\n   */\n  constructor (\n    /**\n     * chart name\n     */\n    public name: string,\n    /**\n     * chart max\n     */\n    public max: number\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "lineStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Radar line style</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nRadar line style\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>chart radar name</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nchart radar name\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "symbol",
                    "defaultValue": "'none'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>chart symbol</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nchart symbol\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "symbolKeepAspect",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>chart symbol aspect</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nchart symbol aspect\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "<p>chart radar  value</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nchart radar  value\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart radar</p>\n",
            "rawdescription": "\n\nchart radar\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartRadarIndicator",
            "id": "class-ChartRadarIndicator-fcfe0df3d7fde2e9a700ba3d85e62ae9154e17aeccdc2b03a576c8d826f3ed8de21758910aef2157e72d7d4938578b23b3a18cb31137a92f57d7cdfcbf929ef6",
            "file": "projects/quang-chart/src/lib/chart-radar/chart-radar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartRadar {\n  /**\n   * chart radar  value\n   */\n  public value: number[] = []\n  /**\n   * chart radar name\n   */\n  public name?: string\n  /**\n   * Radar line style\n   */\n  public lineStyle?: {\n    color: string\n  }\n\n  /**\n   * chart symbol aspect\n   */\n  public symbolKeepAspect = true\n  /**\n   * chart symbol\n   */\n  public symbol: string = 'none'\n\n  constructor (value: number[], name?: string, color?: string) {\n    this.value = value\n    this.name = name\n    if (color) {\n      this.lineStyle = { color: color }\n    }\n  }\n}\n\n/**\n * chart radar indicator\n */\nexport class ChartRadarIndicator {\n  /**\n   * chart radar series item constructor\n   * @param name chart name\n   * @param max chart max\n   */\n  constructor (\n    /**\n     * chart name\n     */\n    public name: string,\n    /**\n     * chart max\n     */\n    public max: number\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart radar series item constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "rawdescription": "\n\nchart radar series item constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 692,
                            "end": 696,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "name"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 686,
                            "end": 691,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart name</p>\n"
                    },
                    {
                        "name": {
                            "pos": 720,
                            "end": 723,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "max"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 714,
                            "end": 719,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart max</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "chart max",
                    "line": 55,
                    "rawdescription": "\n\nchart max\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "chart name",
                    "line": 51,
                    "rawdescription": "\n\nchart name\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart radar indicator</p>\n",
            "rawdescription": "\n\nchart radar indicator\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartTree",
            "id": "class-ChartTree-061c1c545cee7cea9bba5f70a8586651c39dda4f8211caae154218b92b49aa9a516b386f07a02ce50c3ca70c4bc1ca21044278f7d7adaac36a3e59ae75e4479f",
            "file": "projects/quang-chart/src/lib/chart-tree/chart-tree.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartTree {\n  /**\n   *\n   * @param name\n   * @param collapsed\n   * @param value\n   * @param children\n   */\n  constructor (\n    /**\n     *\n     */\n    public name: string,\n    /**\n     *\n     */\n    public collapsed?: boolean,\n    /**\n     *\n     */\n    public children?: ChartTree[],\n    /**\n     *\n     */\n    public value?: number\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "collapsed",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "children",
                        "type": "ChartTree[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 59,
                            "end": 63,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "name"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 53,
                            "end": 58,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 76,
                            "end": 85,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "collapsed"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 70,
                            "end": 75,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 116,
                            "end": 124,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "children"
                        },
                        "type": "ChartTree[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 110,
                            "end": 115,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 98,
                            "end": 103,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "value"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 92,
                            "end": 97,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartTree[]",
                    "optional": true,
                    "line": 24,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "line": 20,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "line": 16,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "line": 28,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartTreemap",
            "id": "class-ChartTreemap-69f5b18731f7b0f4ba498d9ed99459ce0ec4d8abb14ef15788d70077dfc68e22f45cf376a4fdc62743b7c56fd7d620df46dd2978f121368e6d83bbfff7b34f89",
            "file": "projects/quang-chart/src/lib/chart-treemap/chart-treemap.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartTreemap {\n  /**\n   * chart name\n   */\n  public name: string\n  /**\n   * chart value\n   */\n  public value: number\n  /**\n   * chart style\n   */\n  public itemStyle?: { color: string }\n\n  /**\n   * chart treemap series item constructor\n   * @param name chart name\n   * @param value chart value\n   * @param color chart color\n   */\n  constructor (name: string, value: number, color?: string) {\n    this.name = name\n    this.value = value\n    if (color) {\n      this.itemStyle = { color: color }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>chart treemap series item constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 16,
                "rawdescription": "\n\nchart treemap series item constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 285,
                            "end": 289,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "name"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 279,
                            "end": 284,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart name</p>\n"
                    },
                    {
                        "name": {
                            "pos": 313,
                            "end": 318,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "value"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 307,
                            "end": 312,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart value</p>\n"
                    },
                    {
                        "name": {
                            "pos": 343,
                            "end": 348,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "color"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 337,
                            "end": 342,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>chart color</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "itemStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>chart style</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nchart style\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>chart name</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nchart name\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>chart value</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nchart value\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>chart treemap</p>\n",
            "rawdescription": "\n\nchart treemap\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GoogleMarker",
            "id": "class-GoogleMarker-c74f14dba9cc62f570b46d634a259854a63070c5743e94d9aef5251f111a88261443b5977a4f262ce2cbce49f511d8cdb04b5a96fb088d6b1e76e4bb0c7194af",
            "file": "projects/quang-map/src/lib/google-map/google-marker.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class GoogleMarker {\n  /**\n   * google marker constructor\n   * @param lat define marker latitude\n   * @param long define marker longitude\n   * @param data define marker data\n   * @param customIcon define marker icon\n   */\n  constructor (\n    /**\n     * latitude\n     */\n    public lat: number,\n    /**\n     * longitude\n     */\n    public long: number,\n    /**\n     * marker data\n     */\n    public data?: {},\n    /**\n     * icon image url\n     */\n    public customIcon?: string\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>google marker constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "lat",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "long",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "customIcon",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\ngoogle marker constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 102,
                            "end": 105,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "lat"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 96,
                            "end": 101,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker latitude</p>\n"
                    },
                    {
                        "name": {
                            "pos": 141,
                            "end": 145,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "long"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 135,
                            "end": 140,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker longitude</p>\n"
                    },
                    {
                        "name": {
                            "pos": 182,
                            "end": 186,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "data"
                        },
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 176,
                            "end": 181,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker data</p>\n"
                    },
                    {
                        "name": {
                            "pos": 218,
                            "end": 228,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "customIcon"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 212,
                            "end": 217,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker icon</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "customIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "define marker icon",
                    "line": 28,
                    "rawdescription": "\n\nicon image url\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "define marker data",
                    "line": 24,
                    "rawdescription": "\n\nmarker data\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "define marker latitude",
                    "line": 16,
                    "rawdescription": "\n\nlatitude\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "define marker longitude",
                    "line": 20,
                    "rawdescription": "\n\nlongitude\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>google marker</p>\n",
            "rawdescription": "\n\ngoogle marker\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "OsmapMarker",
            "id": "class-OsmapMarker-778c52f5746a0c16da18107106eaf0cef90211e1fbd66767bf26ceec97aee7db84e51dd2ccb697b86d1234bc476271494a9506e025a0492dd20d9ee456271b8b",
            "file": "projects/quang-map/src/lib/osmap/osmap-marker.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class OsmapMarker {\n  /**\n   * open street map constructor\n   * @param long define marker longitude\n   * @param lat define marker latitude\n   * @param size define marker size\n   * @param src define marker image source\n   * @param data define marker data\n   */\n  constructor (\n    /**\n     * longitude\n     */\n    public long: number,\n    /**\n     * latitude\n     */\n    public lat: number,\n    /**\n     * size\n     */\n    public size: number[] = [0.5, 25],\n    /**\n     * image source\n     */\n    public src?: string,\n    /**\n     * marker data\n     */\n    public data?: {}\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>open street map constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "long",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "lat",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "size",
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[0.5, 25]"
                    },
                    {
                        "name": "src",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nopen street map constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 111,
                            "end": 115,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "long"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 105,
                            "end": 110,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker longitude</p>\n"
                    },
                    {
                        "name": {
                            "pos": 152,
                            "end": 155,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "lat"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 146,
                            "end": 151,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker latitude</p>\n"
                    },
                    {
                        "name": {
                            "pos": 191,
                            "end": 195,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "size"
                        },
                        "type": "number[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[0.5, 25]",
                        "tagName": {
                            "pos": 185,
                            "end": 190,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker size</p>\n"
                    },
                    {
                        "name": {
                            "pos": 227,
                            "end": 230,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "src"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 221,
                            "end": 226,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker image source</p>\n"
                    },
                    {
                        "name": {
                            "pos": 270,
                            "end": 274,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "data"
                        },
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 264,
                            "end": 269,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define marker data</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "define marker data",
                    "line": 33,
                    "rawdescription": "\n\nmarker data\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "define marker latitude",
                    "line": 21,
                    "rawdescription": "\n\nlatitude\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "define marker longitude",
                    "line": 17,
                    "rawdescription": "\n\nlongitude\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "[0.5, 25]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "define marker size",
                    "line": 25,
                    "rawdescription": "\n\nsize\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "define marker image source",
                    "line": 29,
                    "rawdescription": "\n\nimage source\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>pen street map marker</p>\n",
            "rawdescription": "\n\npen street map marker\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangAuthConfig",
            "id": "class-QuangAuthConfig-1106d8796d81cd6f444799e26679e08a13231e83e0f6736bb36392d713fb4b2667b5ce64081919cd6f03861218b22aab73990babd4fe742a6b85f9dbda4c8510",
            "file": "projects/quang-auth/src/lib/quang-auth.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AuthConfig } from 'angular-oauth2-oidc'\n\n/**\n * module config\n */\nexport class QuangAuthConfig {\n  /**\n   * module config constructor\n   * @param oidcConfig configurations for authentication\n   */\n  constructor (\n    /**\n     * configurations for authentication, necessary if you are in a project,\n     * in a module of quix can be defined in config.js\n     */\n    public oidcConfig: AuthConfig\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>module config constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "oidcConfig",
                        "type": "AuthConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "rawdescription": "\n\nmodule config constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 155,
                            "end": 165,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "oidcConfig"
                        },
                        "type": "AuthConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 149,
                            "end": 154,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>configurations for authentication</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "oidcConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthConfig",
                    "optional": false,
                    "description": "configurations for authentication",
                    "line": 16,
                    "rawdescription": "\n\nconfigurations for authentication, necessary if you are in a project,\nin a module of quix can be defined in config.js\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>module config</p>\n",
            "rawdescription": "\n\nmodule config\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangCalendarEvent",
            "id": "class-QuangCalendarEvent-c58f7f663f44fd28108da42e611f085cbb5f06e7eab834502e45295d7a2dfc013cc1bd09b5fa102daa8242720dc8dc413e3f3682c893261126cd1c98157dc357",
            "file": "projects/quang-calendar/src/lib/calendar/calendar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class QuangCalendarEvent {\n  /**\n   * calendar event constructor\n   * @param title define event title\n   * @param date define event date\n   * @param allDay define event allday\n   */\n  constructor (\n    /**\n     * event title\n     */\n    public title: string,\n    /**\n     * event date\n     */\n    public date: Date,\n    /**\n     * event allDay\n     */\n    public allDay?: boolean\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>calendar event constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "allDay",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\ncalendar event constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 110,
                            "end": 115,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "title"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 104,
                            "end": 109,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define event title</p>\n"
                    },
                    {
                        "name": {
                            "pos": 147,
                            "end": 151,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "date"
                        },
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 141,
                            "end": 146,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define event date</p>\n"
                    },
                    {
                        "name": {
                            "pos": 182,
                            "end": 188,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "allDay"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 176,
                            "end": 181,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define event allday</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "allDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "define event allday",
                    "line": 23,
                    "rawdescription": "\n\nevent allDay\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "define event date",
                    "line": 19,
                    "rawdescription": "\n\nevent date\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "define event title",
                    "line": 15,
                    "rawdescription": "\n\nevent title\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>calendar event</p>\n",
            "rawdescription": "\n\ncalendar event\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangDialogConfig",
            "id": "class-QuangDialogConfig-82571c307f779d1fd8fe579009eeccd79f96c58f242247d5a529dd802bc1fac31bf387ce7ef1dcfcf5429251a7cdd3e47e5bcfc5d0a3fce0a02d99d89c6b188a",
            "file": "projects/quang-dialog/src/lib/quang-dialog.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class QuangDialogConfig {\n  /**\n   * module config constructor\n   * @param production define production environment\n   * @param noErrorUrls define no error url list\n   * @param noLoaderUrls define no loader url list\n   * @param noLoaderMethods define no loader url method\n   */\n  constructor (\n    /**\n     * define release environment\n     */\n    public production: boolean,\n    /**\n     * defines the list of errors not to be caught\n     */\n    public noErrorUrls?: Array<{ url: string, error: number }>,\n    /**\n     * defines the list of url not to be caught from loader\n     */\n    public noLoaderUrls?: string[],\n    /**\n     * defines the list of methods not to be caught\n     */\n    public noLoaderMethods?: string[]\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>module config constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "production",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "noErrorUrls",
                        "type": "Array<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "noLoaderUrls",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "noLoaderMethods",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nmodule config constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 107,
                            "end": 117,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "production"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 101,
                            "end": 106,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define production environment</p>\n"
                    },
                    {
                        "name": {
                            "pos": 160,
                            "end": 171,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "noErrorUrls"
                        },
                        "type": "Array<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 154,
                            "end": 159,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define no error url list</p>\n"
                    },
                    {
                        "name": {
                            "pos": 209,
                            "end": 221,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "noLoaderUrls"
                        },
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 203,
                            "end": 208,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define no loader url list</p>\n"
                    },
                    {
                        "name": {
                            "pos": 260,
                            "end": 275,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "noLoaderMethods"
                        },
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 254,
                            "end": 259,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define no loader url method</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "noErrorUrls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "define no error url list",
                    "line": 20,
                    "rawdescription": "\n\ndefines the list of errors not to be caught\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "noLoaderMethods",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "define no loader url method",
                    "line": 28,
                    "rawdescription": "\n\ndefines the list of methods not to be caught\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "noLoaderUrls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "define no loader url list",
                    "line": 24,
                    "rawdescription": "\n\ndefines the list of url not to be caught from loader\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "define production environment",
                    "line": 16,
                    "rawdescription": "\n\ndefine release environment\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>module config</p>\n",
            "rawdescription": "\n\nmodule config\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangKeycloakConfig",
            "id": "class-QuangKeycloakConfig-c75b82503a363e0a6f0efa57225ccd402e8c03726c5f2b63265ce11cc7fcec83a52de49c060c462afe30abd2c8b8ae3c1e9a6588529b227a019c61f9002d590b",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { KeycloakOptions } from 'keycloak-angular'\n\n/**\n * module config\n */\nexport class QuangKeycloakConfig {\n  /**\n   * module config constructor\n   * @param keycloakConfig keycloak configuration\n   * @param ionicApplication define ionic framework\n   * @param production define environment\n   */\n  constructor (\n    /**\n     *\n     */\n    public production: boolean = false,\n    /**\n     * configurations for authentication with keycloak\n     */\n    public keycloakConfig?: KeycloakOptions,\n    /**\n     * defines if the application is mobile,\n     * this parameter will change the keycloak configurations to start the login process as a mobile application\n     */\n    public ionicApplication: boolean = false\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>module config constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "production",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "keycloakConfig",
                        "type": "KeycloakOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ionicApplication",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 6,
                "rawdescription": "\n\nmodule config constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 263,
                            "end": 273,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "production"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "pos": 257,
                            "end": 262,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define environment</p>\n"
                    },
                    {
                        "name": {
                            "pos": 161,
                            "end": 175,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "keycloakConfig"
                        },
                        "type": "KeycloakOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 155,
                            "end": 160,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>keycloak configuration</p>\n"
                    },
                    {
                        "name": {
                            "pos": 211,
                            "end": 227,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "ionicApplication"
                        },
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "pos": 205,
                            "end": 210,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define ionic framework</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "ionicApplication",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "define ionic framework",
                    "line": 26,
                    "rawdescription": "\n\ndefines if the application is mobile,\nthis parameter will change the keycloak configurations to start the login process as a mobile application\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "keycloakConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeycloakOptions",
                    "optional": true,
                    "description": "keycloak configuration",
                    "line": 21,
                    "rawdescription": "\n\nconfigurations for authentication with keycloak\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "production",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "define environment",
                    "line": 17,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>module config</p>\n",
            "rawdescription": "\n\nmodule config\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangMapConfig",
            "id": "class-QuangMapConfig-d28dd445cdd150a66d8d9fa02819edca29d9659a6f99c32134160f13c419dca2af92af32abb8d04dc5cfccdf577c17854fab002bbf94f44ec8ad85a1117f571a",
            "file": "projects/quang-map/src/lib/quang-map.config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class QuangMapConfig {\n  /**\n   * module config constructor\n   * @param googleKey define google map key\n   */\n  constructor (\n    /**\n     * defines the google key for maps\n     */\n    public googleKey: string\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>module config constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "googleKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nmodule config constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 104,
                            "end": 113,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "googleKey"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 98,
                            "end": 103,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define google map key</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "googleKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "define google map key",
                    "line": 13,
                    "rawdescription": "\n\ndefines the google key for maps\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>module config</p>\n",
            "rawdescription": "\n\nmodule config\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangNotification",
            "id": "class-QuangNotification-04897e8b8738fa961bff5889133a0f74b12746559a9eb2c6713e6cd3fa18a3678232c33824c0bab440641fcdb2ef0ca7a1cc5df3a522bc5840bd40934c7efde4",
            "file": "projects/quang-dialog/src/lib/notification/notification.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class QuangNotification {\n  /**\n   *\n   * @param title\n   * @param body\n   * @param imageUrl\n   * @param iconUrl\n   */\n  constructor (\n    /**\n     *\n     */\n    public title: string,\n    /**\n     *\n     */\n    public body: string,\n    /**\n     *\n     */\n    public imageUrl?: string,\n    /**\n     *\n     */\n    public iconUrl?: string\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "body",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imageUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "iconUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 67,
                            "end": 72,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "title"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 61,
                            "end": 66,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 85,
                            "end": 89,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "body"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 79,
                            "end": 84,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 102,
                            "end": 110,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "imageUrl"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 96,
                            "end": 101,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 123,
                            "end": 130,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "iconUrl"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 117,
                            "end": 122,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "line": 20,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "line": 28,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "line": 24,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "line": 16,
                    "rawdescription": "\n\n\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangPicture",
            "id": "class-QuangPicture-7a9d1fd208e7578b904bf2c6c36c44e05cad8b6ea48190374f20216b9d2d666f747a1df58ada7f94a7142b9ea77a6015c70b953e1dd602893ae30004af664b14",
            "file": "projects/quang-media/src/lib/picture/picture.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class QuangPicture {\n  /**\n   * the minimum width for which you see this image\n   */\n  public minWidth: string\n  /**\n   * image url\n   */\n  public src: string\n\n  /**\n   * picture constructor\n   * @param minWidth\n   * @param src\n   */\n  constructor (minWidth: 0 | 415 | 768 | 992 | 1200, src: string) {\n    this.minWidth = `(min-width:${minWidth}px)`\n    this.src = src\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>picture constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "minWidth",
                        "type": "\"0\" | \"415\" | \"768\" | \"992\" | \"1200\"",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "src",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "rawdescription": "\n\npicture constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 229,
                            "end": 237,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "minWidth"
                        },
                        "type": "\"0\" | \"415\" | \"768\" | \"992\" | \"1200\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 223,
                            "end": 228,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 250,
                            "end": 253,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "src"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 244,
                            "end": 249,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "properties": [
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the minimum width for which you see this image</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nthe minimum width for which you see this image\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>image url</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nimage url\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>picture</p>\n",
            "rawdescription": "\n\npicture\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuangToast",
            "id": "class-QuangToast-aa5cb207d5067d9779ef2e4d71478072069dcd4cb789db26b01cf4ae1cb1670f8b1ffd99fe990566b67a8c603bf4901d2fb116a7b9ead8c058092c3ed916bfb8",
            "file": "projects/quang-dialog/src/lib/toast/toast.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class QuangToast {\n  /**\n   * toast constructor\n   * @param type define toast tipe\n   * @param title define toast title\n   * @param position define toast position\n   * @param timing define toast timing\n   * @param text define toast text\n   * @param textValue define toast dynamic value\n   * @param date define toast date\n   * @param dateFormat define toast date format\n   */\n  constructor (\n    /**\n     * toast type\n     */\n    public type: 'success' | 'warning' | 'error',\n    /**\n     * toast title\n     */\n    public title: string,\n    /**\n     * toast position\n     */\n    public position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' = 'bottom-right',\n    /**\n     * toast view timing\n     */\n    public timing?: number,\n    /**\n     * toast text\n     */\n    public text?: string,\n    /**\n     * toast dynamic value\n     */\n    public textValue?: any,\n    /**\n     * toast date\n     */\n    public date?: Date,\n    /**\n     * toast date format\n     */\n    public dateFormat?: string\n  ) {\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>toast constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "type",
                        "type": "\"success\" | \"warning\" | \"error\"",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "position",
                        "type": "\"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'bottom-right'"
                    },
                    {
                        "name": "timing",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "textValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "dateFormat",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "rawdescription": "\n\ntoast constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 84,
                            "end": 88,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "originalKeywordKind": 151,
                            "escapedText": "type"
                        },
                        "type": "\"success\" | \"warning\" | \"error\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 78,
                            "end": 83,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast tipe</p>\n"
                    },
                    {
                        "name": {
                            "pos": 119,
                            "end": 124,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "title"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 113,
                            "end": 118,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast title</p>\n"
                    },
                    {
                        "name": {
                            "pos": 156,
                            "end": 164,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "position"
                        },
                        "type": "\"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\"",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'bottom-right'",
                        "tagName": {
                            "pos": 150,
                            "end": 155,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast position</p>\n"
                    },
                    {
                        "name": {
                            "pos": 199,
                            "end": 205,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "timing"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 193,
                            "end": 198,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast timing</p>\n"
                    },
                    {
                        "name": {
                            "pos": 238,
                            "end": 242,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "text"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 232,
                            "end": 237,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast text</p>\n"
                    },
                    {
                        "name": {
                            "pos": 273,
                            "end": 282,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "textValue"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 267,
                            "end": 272,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast dynamic value</p>\n"
                    },
                    {
                        "name": {
                            "pos": 322,
                            "end": 326,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "date"
                        },
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 316,
                            "end": 321,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast date</p>\n"
                    },
                    {
                        "name": {
                            "pos": 357,
                            "end": 367,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dateFormat"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 351,
                            "end": 356,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>define toast date format</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "define toast date",
                    "line": 44,
                    "rawdescription": "\n\ntoast date\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dateFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "define toast date format",
                    "line": 48,
                    "rawdescription": "\n\ntoast date format\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "position",
                    "defaultValue": "'bottom-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top-right\" | \"top-left\" | \"bottom-right\" | \"bottom-left\"",
                    "optional": false,
                    "description": "define toast position",
                    "line": 28,
                    "rawdescription": "\n\ntoast position\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "define toast text",
                    "line": 36,
                    "rawdescription": "\n\ntoast text\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "textValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "define toast dynamic value",
                    "line": 40,
                    "rawdescription": "\n\ntoast dynamic value\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "timing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "define toast timing",
                    "line": 32,
                    "rawdescription": "\n\ntoast view timing\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "define toast title",
                    "line": 24,
                    "rawdescription": "\n\ntoast title\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"warning\" | \"error\"",
                    "optional": false,
                    "description": "define toast tipe",
                    "line": 20,
                    "rawdescription": "\n\ntoast type\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>toast</p>\n",
            "rawdescription": "\n\ntoast\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HasRolesDirective",
            "id": "directive-HasRolesDirective-260d8b52734d5a467836dd1d5bb209d7585d247d1a08cfdfd38050485aac999bbf361dccbaba0a563977604b05ac50e0317e6cda147bac955687d52b8cd63ac8",
            "file": "projects/quang-auth/src/lib/quang-auth-directive/has-roles.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { distinctUntilChanged, map, takeUntil } from 'rxjs/operators'\nimport { Store } from '@ngrx/store'\nimport { selectHasRoles, selectUserRoles } from '../quang-auth-store/selectors/quang-auth.selectors'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangHasRoles]'\n})\n/**\n * has role directive\n */\nexport class HasRolesDirective implements OnInit, OnDestroy {\n  /**\n   * List of necessary roles\n   */\n  @Input() quangHasRoles: string[]\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param view view access\n   * @param template template access\n   * @param authStore store access\n   */\n  constructor (\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>,\n    private readonly authStore: Store<any>\n  ) {\n  }\n\n  /**\n   * Check if the user in the store has the required roles and define whether to render or not\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(selectHasRoles(this.quangHasRoles))\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(hasRole => {\n        if (hasRole) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n    this.destroy$.complete()\n  }\n}\n",
            "selector": "[quangHasRoles]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "quangHasRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of necessary roles\n",
                    "description": "<p>List of necessary roles</p>\n",
                    "line": 20,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 669,
                            "end": 681,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 670,
                                "end": 677,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the user in the store has the required roles and define whether to render or not\n",
                    "description": "<p>Check if the user in the store has the required roles and define whether to render or not</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 764,
                            "end": 768,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 758,
                            "end": 763,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 793,
                            "end": 801,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 787,
                            "end": 792,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 830,
                            "end": 839,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 824,
                            "end": 829,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            }
        },
        {
            "name": "HasRolesDirective",
            "id": "directive-HasRolesDirective-6470104a969c2ac6bf7b1b9b348b15877bf6a7afc6f706ac0bfa8d2c26076c561fe189647ee6bfd06c2de2eae19cf8688c2a1ccd89968e0f2778e4888c853159-1",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-directive/has-roles.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { distinctUntilChanged, map, takeUntil } from 'rxjs/operators'\nimport { Store } from '@ngrx/store'\nimport { QuangKeycloakSelectors } from '../quang-keycloak-store/selectors'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangHasRoles]'\n})\n/**\n * has roles directive\n */\nexport class HasRolesDirective implements OnInit, OnDestroy {\n  /**\n   * the list of role needed to view the item\n   */\n  @Input() quangHasRoles: string[]\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param view view access\n   * @param template template access\n   * @param authStore store access\n   */\n  constructor (\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>,\n    private readonly authStore: Store<any>\n  ) {\n  }\n\n  /**\n   * check with the selector if the user has all the necessary roles,\n   * if he has them he displays the element otherwise he does not render them\n   */\n  ngOnInit (): void {\n    this.authStore\n    .select(QuangKeycloakSelectors.selectHasRoles(this.quangHasRoles))\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(hasRole => {\n        if (hasRole) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n  }\n}\n",
            "selector": "[quangHasRoles]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "quangHasRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of role needed to view the item\n",
                    "description": "<p>the list of role needed to view the item</p>\n",
                    "line": 20,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 661,
                            "end": 673,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 662,
                                "end": 669,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck with the selector if the user has all the necessary roles,\nif he has them he displays the element otherwise he does not render them\n",
                    "description": "<p>check with the selector if the user has all the necessary roles,\nif he has them he displays the element otherwise he does not render them</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 756,
                            "end": 760,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 750,
                            "end": 755,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 785,
                            "end": 793,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 779,
                            "end": 784,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 822,
                            "end": 831,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 816,
                            "end": 821,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HasRolesDirective-1"
        },
        {
            "name": "HasUntilRolesDirective",
            "id": "directive-HasUntilRolesDirective-d9ad838d7e1cf4eea4cccf22e0ef3e2a5bbeb38f81cd7bb9d31664e9f46f4f857e0d725b86aa58db5059bdf2c08378669b641733fe515d6325a6b3e8956a2f78",
            "file": "projects/quang-auth/src/lib/quang-auth-directive/has-until-roles.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { Store } from '@ngrx/store'\n\nimport { distinctUntilChanged, map, takeUntil } from 'rxjs/operators'\nimport { selectHasUntilRoles, selectUserRoles } from '../quang-auth-store/selectors/quang-auth.selectors'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangHasUntilRoles]'\n})\n/**\n * has until role directive\n */\nexport class HasUntilRolesDirective implements OnInit, OnDestroy {\n  /**\n   * List of necessary roles\n   */\n  @Input() quangHasUntilRoles: string[]\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param view view access\n   * @param template template access\n   * @param authStore store access\n   */\n  constructor (\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>,\n    private readonly authStore: Store<any>\n  ) {\n  }\n\n  /**\n   * Check if the user in the store has the required roles and define whether to render or not\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(selectHasUntilRoles(this.quangHasUntilRoles))\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(hasRole => {\n        if (hasRole) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n    this.destroy$.complete()\n  }\n}\n",
            "selector": "[quangHasUntilRoles]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "quangHasUntilRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of necessary roles\n",
                    "description": "<p>List of necessary roles</p>\n",
                    "line": 21,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 696,
                            "end": 708,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 697,
                                "end": 704,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the user in the store has the required roles and define whether to render or not\n",
                    "description": "<p>Check if the user in the store has the required roles and define whether to render or not</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 791,
                            "end": 795,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 785,
                            "end": 790,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 820,
                            "end": 828,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 814,
                            "end": 819,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 857,
                            "end": 866,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 851,
                            "end": 856,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            }
        },
        {
            "name": "HasUntilRolesDirective",
            "id": "directive-HasUntilRolesDirective-9fe07b09fd697099a5bce02339d3dcf4f5e5ba72bfc8fc3d27a7b0c9359bbec9d77677ad6ab07ac57644d8c390e9f422789c9887c40a0a75a5c5125744288971-1",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-directive/has-until-roles.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { Store } from '@ngrx/store'\n\nimport { distinctUntilChanged, map, takeUntil } from 'rxjs/operators'\nimport { QuangKeycloakSelectors } from '../quang-keycloak-store/selectors'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangHasUntilRoles]'\n})\n/**\n * has until role directive\n */\nexport class HasUntilRolesDirective implements OnInit, OnDestroy {\n  /**\n   * list that defines the possibility of displaying the element if you have at least one role among those in input\n   */\n  @Input() quangHasUntilRoles: string[]\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param view view access\n   * @param template template access\n   * @param authStore store access\n   */\n  constructor (\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>,\n    private readonly authStore: Store<any>\n  ) {\n  }\n\n  /**\n   * check with the selector if the user has at least one necessary role,\n   * if he has them he displays the element otherwise he does not render them\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(QuangKeycloakSelectors.selectHasUntilRoles(this.quangHasUntilRoles))\n    .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(hasRole => {\n        if (hasRole) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n  }\n}\n",
            "selector": "[quangHasUntilRoles]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "quangHasUntilRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlist that defines the possibility of displaying the element if you have at least one role among those in input\n",
                    "description": "<p>list that defines the possibility of displaying the element if you have at least one role among those in input</p>\n",
                    "line": 21,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 752,
                            "end": 764,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 753,
                                "end": 760,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck with the selector if the user has at least one necessary role,\nif he has them he displays the element otherwise he does not render them\n",
                    "description": "<p>check with the selector if the user has at least one necessary role,\nif he has them he displays the element otherwise he does not render them</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 847,
                            "end": 851,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 841,
                            "end": 846,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 876,
                            "end": 884,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 870,
                            "end": 875,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 913,
                            "end": 922,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 907,
                            "end": 912,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HasUntilRolesDirective-1"
        },
        {
            "name": "IsAuthenticatedDirective",
            "id": "directive-IsAuthenticatedDirective-1acd74a35a2696f68387488830ec9ec4eb9ea284baab7af6accd268cb0c0da741f418ee0820a0e3a0c8a94b3c562ee00a223986d38db7d5cff9f0a06a445d345",
            "file": "projects/quang-auth/src/lib/quang-auth-directive/is-authenticated.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { selectIsAuthenticated } from '../quang-auth-store/selectors/quang-auth.selectors'\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangIsAuthenticated]'\n})\n/**\n * is authenticated directive\n */\nexport class IsAuthenticatedDirective implements OnInit, OnDestroy {\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param authStore store access\n   * @param view view access\n   * @param template template access\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * Check if the user in the store is logged and define whether to render or not\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(selectIsAuthenticated)\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(is => {\n        if (is) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n    this.destroy$.complete()\n  }\n}\n",
            "selector": "[quangIsAuthenticated]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 593,
                            "end": 605,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 594,
                                "end": 601,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the user in the store is logged and define whether to render or not\n",
                    "description": "<p>Check if the user in the store is logged and define whether to render or not</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 688,
                            "end": 697,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 682,
                            "end": 687,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 723,
                            "end": 727,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 717,
                            "end": 722,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 752,
                            "end": 760,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 746,
                            "end": 751,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    }
                ]
            }
        },
        {
            "name": "IsAuthenticatedDirective",
            "id": "directive-IsAuthenticatedDirective-44c2be6dba333b10d72da38143ea00f5f095f1314cc5f0310162c08d592e1fcac63ce5541fb86bf7cd24efaad3c60af8bc16042028f85c9dcb2b918e3b85530f-1",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-directive/is-authenticated.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators'\nimport { QuangKeycloakSelectors } from '../quang-keycloak-store/selectors'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangIsAuthenticated]'\n})\n/**\n * is authenticated directive\n */\nexport class IsAuthenticatedDirective implements OnInit, OnDestroy {\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param authStore auth store access\n   * @param view view access\n   * @param template template access\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * Check if the user in the store is authenticated and define whether to render or not\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(QuangKeycloakSelectors.selectIsAuthenticated)\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(is => {\n        if (is) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n  }\n}\n",
            "selector": "[quangIsAuthenticated]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 577,
                            "end": 589,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 578,
                                "end": 585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the user in the store is authenticated and define whether to render or not\n",
                    "description": "<p>Check if the user in the store is authenticated and define whether to render or not</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 672,
                            "end": 681,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 666,
                            "end": 671,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>auth store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 712,
                            "end": 716,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 706,
                            "end": 711,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 741,
                            "end": 749,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 735,
                            "end": 740,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IsAuthenticatedDirective-1"
        },
        {
            "name": "IsNotAuthenticatedDirective",
            "id": "directive-IsNotAuthenticatedDirective-2c623ed06de1ebd4481bdc284c5fe452fe027c15facc4a903b555f6380aad5c92462327280fe1eae173f030be59e70d8f9bedeeecfd69c7ab9a415bf9dd2fe48",
            "file": "projects/quang-auth/src/lib/quang-auth-directive/is-not-authenticated.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { selectIsAuthenticated } from '../quang-auth-store/selectors/quang-auth.selectors'\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangIsNotAuthenticated]'\n})\n/**\n * is not authenticated directive\n */\nexport class IsNotAuthenticatedDirective implements OnInit, OnDestroy {\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param authStore store access\n   * @param view view access\n   * @param template template access\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * Check if the user in the store is logged and define whether to render or not\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(selectIsAuthenticated)\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(is => {\n        if (!is) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n    this.destroy$.complete()\n  }\n}\n",
            "selector": "[quangIsNotAuthenticated]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 603,
                            "end": 615,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 604,
                                "end": 611,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the user in the store is logged and define whether to render or not\n",
                    "description": "<p>Check if the user in the store is logged and define whether to render or not</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 698,
                            "end": 707,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 692,
                            "end": 697,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 733,
                            "end": 737,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 727,
                            "end": 732,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 762,
                            "end": 770,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 756,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    }
                ]
            }
        },
        {
            "name": "IsNotAuthenticatedDirective",
            "id": "directive-IsNotAuthenticatedDirective-15456ae329bde28b252fbcaffaaef20e18a165de47fd45e45f9d595b288f5213980a153d15feea238fefb9d36db39a6e917c959da0bf1466fc61f00467aad267-1",
            "file": "projects/quang-keycloak/src/lib/quang-keycloak-directive/is-not-authenticated.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators'\nimport { QuangKeycloakSelectors } from '../quang-keycloak-store/selectors'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangIsNotAuthenticated]'\n})\n/**\n * is not authenticated directive\n */\nexport class IsNotAuthenticatedDirective implements OnInit, OnDestroy {\n  /**\n   * subject of convenience to turn off the subscription to the observable\n   * @private\n   */\n  private readonly destroy$ = new Subject()\n\n  /**\n   * constructor\n   * @param authStore store access\n   * @param view view access\n   * @param template template access\n   */\n  constructor (\n    private readonly authStore: Store<any>,\n    private readonly view: ViewContainerRef,\n    private readonly template: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * Check if the user in the store is logged and define whether to render or not\n   */\n  ngOnInit (): void {\n    this.authStore\n      .select(QuangKeycloakSelectors.selectIsAuthenticated)\n      .pipe(\n        distinctUntilChanged(),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(is => {\n        if (!is) {\n          this.view.createEmbeddedView(this.template)\n        } else {\n          this.view.clear()\n        }\n      })\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    this.destroy$.next('')\n    this.destroy$.complete()\n  }\n}\n",
            "selector": "[quangIsNotAuthenticated]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>subject of convenience to turn off the subscription to the observable</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nsubject of convenience to turn off the subscription to the observable\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 587,
                            "end": 599,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 588,
                                "end": 595,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the user in the store is logged and define whether to render or not\n",
                    "description": "<p>Check if the user in the store is logged and define whether to render or not</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authStore",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "view",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 682,
                            "end": 691,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "authStore"
                        },
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 676,
                            "end": 681,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 717,
                            "end": 721,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "view"
                        },
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 711,
                            "end": 716,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>view access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 746,
                            "end": 754,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "template"
                        },
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 740,
                            "end": 745,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>template access</p>\n"
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IsNotAuthenticatedDirective-1"
        },
        {
            "name": "QuangAuthDownloadDirective",
            "id": "directive-QuangAuthDownloadDirective-8c96b25bc3553da13348494eea70e69d763e659d8a1ef97baec9111504daf2566c8cf58c0b8fc712406b153ed7c865702b1e2ced42cc0e4590af6b5767fba8cc",
            "file": "projects/quang-core/src/lib/quang-auth-donwload/quang-auth-download.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { switchMap } from 'rxjs/operators'\nimport { of } from 'rxjs'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangAuthDownload]'\n})\n/**\n * download auth file directive\n */\nexport class QuangAuthDownloadDirective {\n  /**\n   * The url to find the file to download\n   */\n  @Input() url: string = ''\n  /**\n   * The name of the file I will download\n   */\n  @Input() fileName: string = ''\n  /**\n   * The content type of the file I will download\n   */\n  @Input() contentType: string = ''\n  /**\n   * The accept type of the file I will download\n   */\n  @Input() accept: string = ''\n\n  /**\n   * click listener\n   * @param e event\n   */\n  @HostListener('click', ['$event']) onClick (e: Event): void {\n    e.preventDefault()\n    this.downloadFile()\n  }\n\n  /**\n   * constructor\n   * @param http\n   */\n  constructor (\n    private readonly http: HttpClient\n  ) {\n  }\n\n  /**\n   * Download the file,\n   * create a temporary tag a download the blob with an ajax call,\n   * start the download and remove the temporary tag\n   */\n  downloadFile (): void {\n    const anchor = document.createElement('a')\n    document.body.appendChild(anchor)\n    const headers = new HttpHeaders({\n      'Content-Type': this.contentType ? this.contentType : 'application/octet-stream',\n      Accept: this.accept ? this.accept : 'application/json'\n    })\n    this.http\n      .get(this.url, { headers: headers, responseType: 'blob' as 'json', observe: 'response' })\n      .pipe(\n        switchMap((r: any) => {\n            return of([\n              new Blob([r.body], { type: r.body?.type }),\n              this.getFilename(r.headers.get('content-disposition'))\n            ])\n          }\n        )\n      )\n      .subscribe(([blob, fileName]) => {\n        const objectUrl = window.URL.createObjectURL(blob)\n        anchor.href = objectUrl\n        anchor.download = this.fileName ? this.fileName : fileName as string\n        anchor.click()\n        window.URL.revokeObjectURL(objectUrl)\n        document.body.removeChild(anchor)\n      })\n  }\n\n  /**\n   * Set name to downloaded file\n   * @param cd\n   */\n  getFilename (cd: string): string {\n    return cd\n      .slice(cd.indexOf('filename='))\n      .replace('filename=', '')\n      .trim()\n  }\n}\n",
            "selector": "[quangAuthDownload]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe accept type of the file I will download\n",
                    "description": "<p>The accept type of the file I will download</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "contentType",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe content type of the file I will download\n",
                    "description": "<p>The content type of the file I will download</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fileName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the file I will download\n",
                    "description": "<p>The name of the file I will download</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe url to find the file to download\n",
                    "description": "<p>The url to find the file to download</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick listener\n",
                    "description": "<p>click listener</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 750,
                            "end": 768,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 751,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n",
                            "name": {
                                "pos": 757,
                                "end": 758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 37
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "downloadFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownload the file,\ncreate a temporary tag a download the blob with an ajax call,\nstart the download and remove the temporary tag\n",
                    "description": "<p>Download the file,\ncreate a temporary tag a download the blob with an ajax call,\nstart the download and remove the temporary tag</p>\n"
                },
                {
                    "name": "getFilename",
                    "args": [
                        {
                            "name": "cd",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet name to downloaded file\n",
                    "description": "<p>Set name to downloaded file</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2195,
                                "end": 2197,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cd"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2189,
                                "end": 2194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick listener\n",
                    "description": "<p>click listener</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 757,
                                "end": 758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 751,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 922,
                            "end": 926,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 916,
                            "end": 921,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            }
        },
        {
            "name": "QuangAuthImageDirective",
            "id": "directive-QuangAuthImageDirective-d9e6dc784e289ae1138ac1c8489f19736f881a18d4ceef7d2c93a8d8c1b90428ebeeac9d4d2554555cdc03836ed22237f5c707f8f9b5c0bbfa81f1e8c1127679",
            "file": "projects/quang-core/src/lib/quang-auth-image/quang-auth-image.directive.ts",
            "type": "directive",
            "description": "<p>directive decorator</p>\n",
            "rawdescription": "\n\ndirective decorator\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { switchMap } from 'rxjs/operators'\nimport { of } from 'rxjs'\n\n/**\n * directive decorator\n */\n@Directive({\n  selector: '[quangAuthImage]'\n})\n/**\n * view auth image directive\n */\nexport class QuangAuthImageDirective implements OnChanges {\n  /**\n   * The url of the image\n   */\n  @Input() src: string = ''\n  /**\n   * The media type accepted\n   */\n  @Input() accept: string = ''\n  /**\n   * The content type accepted\n   */\n  @Input() contentType: string = ''\n\n  /**\n   * constructor\n   * @param el\n   * @param http\n   */\n  constructor (\n    private readonly el: ElementRef,\n    private readonly http: HttpClient) {\n  }\n\n  /**\n   * Download the image,\n   * With an ajax call it downloads the image blob and adds the src attribute with the file just downloaded\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.src?.currentValue) {\n      const headers = new HttpHeaders({\n        'Content-Type': this.contentType ? this.contentType : 'application/json',\n        Accept: this.accept ? this.accept : 'application/json'\n      })\n      this.http\n        .get(this.src, { headers: headers, responseType: 'blob' as 'json' })\n        .pipe(\n          switchMap((resp: any) => of(new Blob([resp], { type: resp.type })))\n        )\n        .subscribe(blob => {\n          const reader = new FileReader()\n          reader.readAsDataURL(blob)\n          reader.onload = () => { this.el.nativeElement.src = reader.result }\n        })\n    }\n  }\n}\n",
            "selector": "[quangAuthImage]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe media type accepted\n",
                    "description": "<p>The media type accepted</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "contentType",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe content type accepted\n",
                    "description": "<p>The content type accepted</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe url of the image\n",
                    "description": "<p>The url of the image</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownload the image,\nWith an ajax call it downloads the image blob and adds the src attribute with the file just downloaded\n",
                    "description": "<p>Download the image,\nWith an ajax call it downloads the image blob and adds the src attribute with the file just downloaded</p>\n",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 648,
                            "end": 650,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 642,
                            "end": 647,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 663,
                            "end": 667,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 657,
                            "end": 662,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AudioComponent",
            "id": "component-AudioComponent-b70839ef5937b2d724f4ccacb03a56480f94345f98fdb63b95cf2dfedae735b0ea94c5fa034bdbf284c5ae3a42bddc59b6ed40e2b69a7ef8a0b64061cc781157",
            "file": "projects/quang-media/src/lib/audio/audio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-audio",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./audio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoplay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether autoplay must trigger\n",
                    "description": "<p>defines whether autoplay must trigger</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "controls",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether controls should be visible\n",
                    "description": "<p>defines whether controls should be visible</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncomponent id\n",
                    "description": "<p>component id</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "muted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n defines whether audio must be muted\n",
                    "description": "<p> defines whether audio must be muted</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAudio source\n",
                    "description": "<p>Audio source</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'audio/mpeg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAudio type media file\n",
                    "description": "<p>Audio type media file</p>\n",
                    "line": 39,
                    "type": "\"audio/ogg\" | \"audio/mpeg\" | \"audio/wav\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "whenAudioFinish",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAudio finish event\n",
                    "description": "<p>Audio finish event</p>\n",
                    "line": 47,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "whenAudioPause",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAudio pause event\n",
                    "description": "<p>Audio pause event</p>\n",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "whenAudioStart",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAudio start event\n",
                    "description": "<p>Audio start event</p>\n",
                    "line": 43,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>component decorator</p>\n",
            "rawdescription": "\n\ncomponent decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core'\n\n/**\n * component decorator\n */\n@Component({\n  selector: 'quang-audio',\n  templateUrl: './audio.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Component for managing audio files\n */\nexport class AudioComponent {\n  /**\n   * defines whether controls should be visible\n   */\n  @Input() controls: boolean = true\n  /**\n   *  defines whether audio must be muted\n   */\n  @Input() muted: boolean = false\n  /**\n   * defines whether autoplay must trigger\n   */\n  @Input() autoplay: boolean = false\n  /**\n   * Audio source\n   */\n  @Input() src: string = ''\n  /**\n   * component id\n   */\n  @Input() id: string = ''\n  /**\n   * Audio type media file\n   */\n  @Input() type: 'audio/ogg' | 'audio/mpeg' | 'audio/wav' = 'audio/mpeg'\n  /**\n   * Audio start event\n   */\n  @Output() whenAudioStart: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * Audio finish event\n   */\n  @Output() whenAudioFinish: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * Audio pause event\n   */\n  @Output() whenAudioPause: EventEmitter<any> = new EventEmitter<any>()\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<audio\n  [id]=\"id\"\n  [controls]=\"controls\"\n  [muted]=\"muted\"\n  [autoplay]=\"autoplay\"\n  (pause)=\"whenAudioPause.emit()\"\n  (play)=\"whenAudioStart.emit()\"\n  (ended)=\"whenAudioFinish.emit()\"\n>\n  <source\n    [src]=\"src\"\n    [type]=\"type\"\n  >\n  Your browser does not support the audio element.\n</audio>\n"
        },
        {
            "name": "AutocompleteObjAsyncComponent",
            "id": "component-AutocompleteObjAsyncComponent-25db5271fc701cc5c1894abc1ee8790a339e4873d7ee187d0bf023ad9cc54a6e75d3f5df85fafd83a74d43b86ee89a79be0c909e7b30047ecc22be0fe9f46d91",
            "file": "projects/quang-core/src/lib/autocomplete-obj-async/autocomplete-obj-async.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-autocomplete-obj-async",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./autocomplete-obj-async.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "apiParamName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe queryParmas to add to the ajax call\n",
                    "description": "<p>The queryParmas to add to the ajax call</p>\n",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe url of the application is used to create the url for the ajax call\n",
                    "description": "<p>The url of the application is used to create the url for the ajax call</p>\n",
                    "line": 94,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 125,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe base url of the application is used to create the url for the ajax call\n",
                    "description": "<p>The base url of the application is used to create the url for the ajax call</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 115,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 107,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLimit",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe number of options that can be displayed that reflect the criteria sought\n",
                    "description": "<p>The number of options that can be displayed that reflect the criteria sought</p>\n",
                    "line": 111,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "restApi",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates if the call that will perform the service is in rest formats,\nthen the search parameter is passed in the url as / param\n",
                    "description": "<p>Indicates if the call that will perform the service is in rest formats,\nthen the search parameter is passed in the url as / param</p>\n",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "returnValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe key of the value to be returned as the value of the cva\n",
                    "description": "<p>The key of the value to be returned as the value of the cva</p>\n",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe key of the value to be searched\n",
                    "description": "<p>The key of the value to be searched</p>\n",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 120,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "startAfter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe minimum number of characters to search\n",
                    "description": "<p>The minimum number of characters to search</p>\n",
                    "line": 102,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 81,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 142,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 146,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 150,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_searchValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 134,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 138,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 130,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 177,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 155,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 165,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 159,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "suggestions$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "methodsClass": [
                {
                    "name": "findObj",
                    "args": [
                        {
                            "name": "l",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBased on the configuration it retrieves the values from the passed option object\n",
                    "description": "<p>Based on the configuration it retrieves the values from the passed option object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8337,
                                "end": 8338,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "l"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8331,
                                "end": 8336,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6912,
                                "end": 6919,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6906,
                                "end": 6911,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates the observable that returns the list of selectable options,\nbased on the configurations it decides which method to use\nCheck if the help message is required and create the key\n",
                    "description": "<p>Creates the observable that returns the list of selectable options,\nbased on the configurations it decides which method to use\nCheck if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input value changes, the search status is saved and the cva flow is activated\n",
                    "description": "<p>When the input value changes, the search status is saved and the cva flow is activated</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7226,
                                "end": 7227,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7220,
                                "end": 7225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onSelectHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the user selects an option, it saves the selection status and starts the cva flow\n",
                    "description": "<p>When the user selects an option, it saves the selection status and starts the cva flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7530,
                                "end": 7531,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7524,
                                "end": 7529,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the control is initialized it starts a search to match the value passed\nto its corresponding object in the options list\n",
                    "description": "<p>When the control is initialized it starts a search to match the value passed\nto its corresponding object in the options list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7838,
                                "end": 7843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7832,
                                "end": 7837,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>autocomplete object async component decorator</p>\n",
            "rawdescription": "\n\nautocomplete object async component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { NgControl } from '@angular/forms'\nimport { Observable, Observer, of } from 'rxjs'\nimport { debounceTime, delay, filter, map, switchMap } from 'rxjs/operators'\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead'\nimport { QuangAutocompleteAsyncService } from '../autocomplete-service/quang-autocomplete-async.service'\n\n/**\n * autocomplete object async component decorator\n */\n@Component({\n  selector: 'quang-autocomplete-obj-async',\n  templateUrl: './autocomplete-obj-async.component.html',\n  styles: ['']\n})\n/**\n * autocomplete object async component\n */\nexport class AutocompleteObjAsyncComponent implements OnInit, AfterViewInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * The key of the value to be searched\n   */\n  @Input() searchBy: string = ''\n  /**\n   * The key of the value to be returned as the value of the cva\n   */\n  @Input() returnValue: string = ''\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Indicates if the call that will perform the service is in rest formats,\n   * then the search parameter is passed in the url as / param\n   */\n  @Input() restApi: boolean = false\n  /**\n   * The base url of the application is used to create the url for the ajax call\n   */\n  @Input() baseUrl: string = ''\n  /**\n   * The url of the application is used to create the url for the ajax call\n   */\n  @Input() apiUrl: string = ''\n  /**\n   * The queryParmas to add to the ajax call\n   */\n  @Input() apiParamName: string = ''\n  /**\n   * The minimum number of characters to search\n   */\n  @Input() startAfter: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * The number of options that can be displayed that reflect the criteria sought\n   */\n  @Input() optionLimit: number | null = null\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string | number = ''\n  /**\n   * the status of the success message\n   */\n  _searchValue: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  suggestions$: Observable<any> | null = null\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param autocompleteService\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly autocompleteService: QuangAutocompleteAsyncService,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Creates the observable that returns the list of selectable options,\n   * based on the configurations it decides which method to use\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    let prev: string = ''\n    this.suggestions$ = new Observable((observer: Observer<string>) => {\n      observer.next(this._searchValue)\n    }).pipe(\n      debounceTime(300),\n      filter(s => s !== prev),\n      switchMap((query: string) => {\n        prev = query\n        if (query) {\n          if (this.restApi) {\n            return this.autocompleteService\n              .getRestList(this.baseUrl, this.apiUrl, query)\n              .pipe(\n                map((data: any) => data || [])\n              )\n          }\n          return this.autocompleteService\n            .getList(this.baseUrl, this.apiUrl, query, this.apiParamName)\n            .pipe(\n              map((data: any) => data || [])\n            )\n        }\n        return of([])\n      }),\n      map(r => r.filter((s: any) => s[this.searchBy].toLowerCase().includes(this._searchValue.toLowerCase())))\n    )\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * When the input value changes, the search status is saved and the cva flow is activated\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._searchValue = (e.target as HTMLInputElement).value\n    this.onTouched()\n    if (!this._searchValue) {\n      this.onChanged('')\n    }\n  }\n\n  /**\n   * When the user selects an option, it saves the selection status and starts the cva flow\n   * @param e\n   */\n  onSelectHandler (e: TypeaheadMatch): void {\n    this._value = e.item[this.returnValue]\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the control is initialized it starts a search to match the value passed\n   * to its corresponding object in the options list\n   * @param value\n   */\n  writeValue (value: any): void {\n    this._value = value\n    if (this.restApi) {\n      this.autocompleteService.getRestList(this.baseUrl, this.apiUrl, '').subscribe(\n        (l: any[]) => this.findObj(l)\n      )\n    } else {\n      this.autocompleteService.getList(this.baseUrl, this.apiUrl, '', this.apiParamName).subscribe(\n        (l: any[]) => this.findObj(l)\n      )\n    }\n  }\n\n  /**\n   * Based on the configuration it retrieves the values from the passed option object\n   * @param l\n   */\n  findObj (l: any[]): void {\n    const o = l.find(\n      e => e[this.returnValue] === this._value)\n    if (o) {\n      this._searchValue = o[this.searchBy]\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "autocompleteService",
                        "type": "QuangAutocompleteAsyncService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 166,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4548,
                            "end": 4556,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4542,
                            "end": 4547,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4581,
                            "end": 4600,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "autocompleteService"
                        },
                        "type": "QuangAutocompleteAsyncService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4575,
                            "end": 4580,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 4613,
                            "end": 4620,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4607,
                            "end": 4612,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input [ngModel]=\"_searchValue\"\n         [id]=\"id\"\n         [name]=\"id\"\n         [typeahead]=\"suggestions$\"\n         [typeaheadAsync]=\"true\"\n         class=\"form-control\"\n         [readOnly]=\"readonly\"\n         [autofocus]=\"autofocus\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         [autocomplete]=\"autocomplete\"\n         [isAnimated]=\"true\"\n         [adaptivePosition]=\"true\"\n         [typeaheadOptionField]=\"searchBy\"\n         [typeaheadScrollable]=\"true\"\n         [typeaheadOptionsInScrollableView]=\"18\"\n         [typeaheadMinLength]=\"startAfter\"\n         [placeholder]=\"placeholder | transloco\"\n         [typeaheadOptionsLimit]=\"optionLimit\"\n         [ngClass]=\"customClass\"\n         (typeaheadOnSelect)=\"onSelectHandler($event)\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "AutocompleteObjComponent",
            "id": "component-AutocompleteObjComponent-a909b3b1ebc5d6c214f1cc6616a8096667ee0819d1936ec75b56bc8c531fc818577f5cd645b9f218e87e19f44fb44d30fbcf829b091e2cded38b00d9c5837240",
            "file": "projects/quang-core/src/lib/autocomplete-obj/autocomplete-obj.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-autocomplete-obj",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./autocomplete-obj.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 100,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dataList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of options where to search for the selected one\n",
                    "description": "<p>The list of options where to search for the selected one</p>\n",
                    "line": 87,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLimit",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe number of options that can be displayed that reflect the criteria sought\n",
                    "description": "<p>The number of options that can be displayed that reflect the criteria sought</p>\n",
                    "line": 96,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "returnValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe key of the value to be returned as the value of the cva\n",
                    "description": "<p>The key of the value to be returned as the value of the cva</p>\n",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "searchBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe key of the value to be searched\n",
                    "description": "<p>The key of the value to be searched</p>\n",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 105,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "startAfter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe minimum number of characters to search\n",
                    "description": "<p>The minimum number of characters to search</p>\n",
                    "line": 75,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 127,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 131,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_searchValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The state of the lookup value</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nThe state of the lookup value\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 115,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 159,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 149,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 143,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4892,
                                "end": 4899,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4886,
                                "end": 4891,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes its value, it saves the state of the field and activates the CVA flow\n",
                    "description": "<p>When the input field changes its value, it saves the state of the field and activates the CVA flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5477,
                                "end": 5478,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5471,
                                "end": 5476,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\nlooking in the list for the data with the past value\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states\nlooking in the list for the data with the past value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5788,
                                "end": 5793,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5782,
                                "end": 5787,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>autocomplete object component decorator</p>\n",
            "rawdescription": "\n\nautocomplete object component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead'\n\n/**\n * autocomplete object component decorator\n */\n@Component({\n  selector: 'quang-autocomplete-obj',\n  templateUrl: './autocomplete-obj.component.html',\n  styles: ['']\n})\n/**\n * autocomplete object component\n */\nexport class AutocompleteObjComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The minimum number of characters to search\n   */\n  @Input() startAfter: number = 0\n  /**\n   * The key of the value to be returned as the value of the cva\n   */\n  @Input() returnValue: string = ''\n  /**\n   * The key of the value to be searched\n   */\n  @Input() searchBy: string = ''\n  /**\n   * The list of options where to search for the selected one\n   */\n  @Input() dataList: any[] = []\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * The number of options that can be displayed that reflect the criteria sought\n   */\n  @Input() optionLimit: number | null = null\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string | number | null = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The state of the lookup value\n   */\n  _searchValue: string = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input field changes its value, it saves the state of the field and activates the CVA flow\n   * @param e\n   */\n  onChangedHandler (e: TypeaheadMatch): void {\n    this._value = e.item[this.returnValue]\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * looking in the list for the data with the past value\n   * @param value\n   */\n  writeValue (value: any): void {\n    if (this.dataList.find(item => item[this.returnValue] === value)) {\n      this._searchValue = this.dataList.find(item => item[this.returnValue] === value)[this.searchBy]\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 150,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3917,
                            "end": 3925,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3911,
                            "end": 3916,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3950,
                            "end": 3957,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3944,
                            "end": 3949,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input [ngModel]=\"_searchValue\"\n         [typeahead]=\"dataList\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [name]=\"id\"\n         [readOnly]=\"readonly\"\n         [autofocus]=\"autofocus\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         [autocomplete]=\"autocomplete\"\n         [isAnimated]=\"true\"\n         [adaptivePosition]=\"true\"\n         [typeaheadOptionField]=\"searchBy\"\n         [typeaheadScrollable]=\"true\"\n         [typeaheadOptionsInScrollableView]=\"18\"\n         [typeaheadMinLength]=\"startAfter\"\n         [placeholder]=\"placeholder | transloco\"\n         [typeaheadOptionsLimit]=\"optionLimit\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         (typeaheadOnSelect)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n"
        },
        {
            "name": "AutocompleteStrgAsyncComponent",
            "id": "component-AutocompleteStrgAsyncComponent-c83ff5cee74dd23bcaf0b73ae7abb2f14786c93d9ae9b7f4784d2463c25115a82bb4dcee06a8cd5c529979ad6b62be817dd9a85c90d59b365fe4fe2daca44fef",
            "file": "projects/quang-core/src/lib/autocomplete-strg-async/autocomplete-strg-async.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-autocomplete-strg-async",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./autocomplete-strg-async.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "apiParamName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe queryParmas to add to the ajax call\n",
                    "description": "<p>The queryParmas to add to the ajax call</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe url of the application is used to create the url for the ajax call\n",
                    "description": "<p>The url of the application is used to create the url for the ajax call</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 117,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe base url of the application is used to create the url for the ajax call\n",
                    "description": "<p>The base url of the application is used to create the url for the ajax call</p>\n",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 107,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 95,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLimit",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe number of options that can be displayed that reflect the criteria sought\n",
                    "description": "<p>The number of options that can be displayed that reflect the criteria sought</p>\n",
                    "line": 103,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "restApi",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates if the call that will perform the service is in rest formats,\nthen the search parameter is passed in the url as / param\n",
                    "description": "<p>Indicates if the call that will perform the service is in rest formats,\nthen the search parameter is passed in the url as / param</p>\n",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 112,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "startAfter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe minimum number of characters to search\n",
                    "description": "<p>The minimum number of characters to search</p>\n",
                    "line": 99,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 130,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 134,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 138,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 126,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 165,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 143,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 153,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 147,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "suggestions$",
                    "defaultValue": "new Observable<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 139
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6337,
                                "end": 6344,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6331,
                                "end": 6336,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates the observable that returns the list of selectable options,\nbased on the configurations it decides which method to use\nCheck if the help message is required and create the key\n",
                    "description": "<p>Creates the observable that returns the list of selectable options,\nbased on the configurations it decides which method to use\nCheck if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input value changes, the search status is saved and the cva flow is activated\n",
                    "description": "<p>When the input value changes, the search status is saved and the cva flow is activated</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6910,
                                "end": 6911,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6904,
                                "end": 6909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onSelectHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the user selects an option, it saves the selection status and starts the cva flow\n",
                    "description": "<p>When the user selects an option, it saves the selection status and starts the cva flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7179,
                                "end": 7180,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7173,
                                "end": 7178,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7414,
                                "end": 7419,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7408,
                                "end": 7413,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>autocomplete string async component decorator</p>\n",
            "rawdescription": "\n\nautocomplete string async component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { NgControl } from '@angular/forms'\nimport { Observable, Observer, of } from 'rxjs'\nimport { debounceTime, delay, filter, map, switchMap } from 'rxjs/operators'\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead'\nimport { QuangAutocompleteAsyncService } from '../autocomplete-service/quang-autocomplete-async.service'\n\n/**\n * autocomplete string async component decorator\n */\n@Component({\n  selector: 'quang-autocomplete-strg-async',\n  templateUrl: './autocomplete-strg-async.component.html',\n  styles: ['']\n})\n/**\n * autocomplete string async component\n */\nexport class AutocompleteStrgAsyncComponent implements OnInit, AfterViewInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Indicates if the call that will perform the service is in rest formats,\n   * then the search parameter is passed in the url as / param\n   */\n  @Input() restApi: boolean = false\n  /**\n   * The base url of the application is used to create the url for the ajax call\n   */\n  @Input() baseUrl: string = ''\n  /**\n   * The url of the application is used to create the url for the ajax call\n   */\n  @Input() apiUrl: string = ''\n  /**\n   * The queryParmas to add to the ajax call\n   */\n  @Input() apiParamName: string = ''\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * The minimum number of characters to search\n   */\n  @Input() startAfter: number = 0\n  /**\n   * The number of options that can be displayed that reflect the criteria sought\n   */\n  @Input() optionLimit: number | null = null\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  suggestions$: Observable<any> = new Observable<any>()\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param autocompleteService\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly autocompleteService: QuangAutocompleteAsyncService,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Creates the observable that returns the list of selectable options,\n   * based on the configurations it decides which method to use\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    let prev: string = ''\n    this.suggestions$ = new Observable((observer: Observer<string>) => {\n      observer.next(this._value)\n    }).pipe(\n      debounceTime(300),\n      filter(s => s !== prev),\n      switchMap((query: string) => {\n        prev = query\n        if (query) {\n          if (this.restApi) {\n            return this.autocompleteService\n              .getRestList(this.baseUrl, this.apiUrl, query)\n              .pipe(\n                map((data: any) => data || [])\n              )\n          }\n          return this.autocompleteService\n            .getList(this.baseUrl, this.apiUrl, query, this.apiParamName)\n            .pipe(\n              map((data: any) => data || [])\n            )\n        }\n        return of([])\n      }),\n      map(r => r.filter((s: string) => s.toLowerCase().includes(this._value.toLowerCase())))\n    )\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input value changes, the search status is saved and the cva flow is activated\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the user selects an option, it saves the selection status and starts the cva flow\n   * @param e\n   */\n  onSelectHandler (e: TypeaheadMatch): void {\n    this._value = e.value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: any): void {\n    this._value = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "autocompleteService",
                        "type": "QuangAutocompleteAsyncService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 154,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4274,
                            "end": 4282,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4268,
                            "end": 4273,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4307,
                            "end": 4326,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "autocompleteService"
                        },
                        "type": "QuangAutocompleteAsyncService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4301,
                            "end": 4306,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 4339,
                            "end": 4346,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4333,
                            "end": 4338,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input [ngModel]=\"_value\"\n         [typeahead]=\"suggestions$\"\n         [typeaheadAsync]=\"true\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [name]=\"id\"\n         [readOnly]=\"readonly\"\n         [autofocus]=\"autofocus\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         [autocomplete]=\"autocomplete\"\n         [isAnimated]=\"true\"\n         [adaptivePosition]=\"true\"\n         [typeaheadScrollable]=\"true\"\n         [typeaheadOptionsInScrollableView]=\"18\"\n         [typeaheadMinLength]=\"startAfter\"\n         [placeholder]=\"placeholder | transloco\"\n         [typeaheadOptionsLimit]=\"optionLimit\"\n         (typeaheadOnSelect)=\"onSelectHandler($event)\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "AutocompleteStrgComponent",
            "id": "component-AutocompleteStrgComponent-2998bf35d17648ab122ea0627795371a86098a9ce9e1478aa23f607bd548cc0b8f7b1efe24448958c53a340fbb1657f20cfddcdbf60ac4c7a97bde4fa8dc24ec",
            "file": "projects/quang-core/src/lib/autocomplete-strg/autocomplete-strg.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-autocomplete-strg",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./autocomplete-strg.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 100,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 90,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dataList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of options where to search for the selected one\n",
                    "description": "<p>The list of options where to search for the selected one</p>\n",
                    "line": 73,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLimit",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe number of options that can be displayed that reflect the criteria sought\n",
                    "description": "<p>The number of options that can be displayed that reflect the criteria sought</p>\n",
                    "line": 86,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 95,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "startAfter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe minimum number of characters to search\n",
                    "description": "<p>The minimum number of characters to search</p>\n",
                    "line": 82,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 145,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4560,
                                "end": 4567,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4554,
                                "end": 4559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes its value, it saves the state of the field and activates the CVA flow\n",
                    "description": "<p>When the input field changes its value, it saves the state of the field and activates the CVA flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5145,
                                "end": 5146,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "TypeaheadMatch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5139,
                                "end": 5144,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5381,
                                "end": 5386,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5375,
                                "end": 5380,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>autocomplete string component decorator</p>\n",
            "rawdescription": "\n\nautocomplete string component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit, Optional,\n  Renderer2, Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead'\n\n/**\n * autocomplete string component decorator\n */\n@Component({\n  selector: 'quang-autocomplete-strg',\n  templateUrl: './autocomplete-strg.component.html',\n  styles: ['']\n})\n/**\n * autocomplete string component\n */\nexport class AutocompleteStrgComponent implements OnInit, AfterViewInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The list of options where to search for the selected one\n   */\n  @Input() dataList: string[] = []\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * The minimum number of characters to search\n   */\n  @Input() startAfter: number = 0\n  /**\n   * The number of options that can be displayed that reflect the criteria sought\n   */\n  @Input() optionLimit: number | null = null\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input field changes its value, it saves the state of the field and activates the CVA flow\n   * @param e\n   */\n  onChangedHandler (e: TypeaheadMatch): void {\n    this._value = e.value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: any): void {\n    this._value = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 136,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3585,
                            "end": 3593,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3579,
                            "end": 3584,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3618,
                            "end": 3625,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3612,
                            "end": 3617,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input [ngModel]=\"_value\"\n         [typeahead]=\"dataList\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [name]=\"id\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [readOnly]=\"readonly\"\n         [autofocus]=\"autofocus\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         [autocomplete]=\"autocomplete\"\n         [isAnimated]=\"true\"\n         [adaptivePosition]=\"true\"\n         [typeaheadScrollable]=\"true\"\n         [typeaheadOptionsInScrollableView]=\"18\"\n         [typeaheadMinLength]=\"startAfter\"\n         [placeholder]=\"placeholder | transloco\"\n         [typeaheadOptionsLimit]=\"optionLimit\"\n         (typeaheadOnSelect)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "BlankComponent",
            "id": "component-BlankComponent-4223349b28b43bc3e693968b7cbdb3c73d5566be3e248af2921c2de004ec030238bb1ecfbac24456a6561ea822e32213c534bf66c58e7f87c33422d917c28df7",
            "file": "stories/blank.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autosize",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkTextareaAutosize | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autosize'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core'\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field'\n\n@Component({\n  selector: '',\n  template: '',\n  styles: []\n})\nexport class BlankComponent {\n  @ViewChild('autosize') autosize: CdkTextareaAutosize | null = null\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-9f9f75bd54f51ab3494e0cfa3f901706896e46eede7c06a1d93aae46c6af22ad9dee67e7888ac1f8866f1fd5217683e462fe66d862c054ed565a7e3b37bb9a28",
            "file": "projects/quang-calendar/src/lib/calendar/calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-calendar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Calendar ${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonsIcons",
                    "defaultValue": "{\n    close: 'fas fa-times',\n    prev: 'fas fa-chevron-left',\n    next: 'fas fa-chevron-right',\n    prevYear: 'fas fa-angle-double-left',\n    nextYear: 'fas fa-angle-double-right'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the classes of the font-awesome icons that will be used in the buttons\n",
                    "description": "<p>Defines the classes of the font-awesome icons that will be used in the buttons</p>\n",
                    "line": 68,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "callBack",
                    "defaultValue": "(e, s, f) => []",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1110,
                            "end": 1124,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1111,
                                "end": 1116,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1117,
                                "end": 1118,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 1124,
                            "end": 1138,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1125,
                                "end": 1130,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1131,
                                "end": 1132,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "s"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 1138,
                            "end": 1150,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 1139,
                                "end": 1144,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1145,
                                "end": 1146,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "f"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefines what to do when the calendar view changes and the events of the current view should be loaded\n",
                    "description": "<p>Defines what to do when the calendar view changes and the events of the current view should be loaded</p>\n",
                    "line": 52,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "footer",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the format of the calendar footer\n",
                    "description": "<p>Defines the format of the calendar footer</p>\n",
                    "line": 64,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the format of the calendar header\n",
                    "description": "<p>Defines the format of the calendar header</p>\n",
                    "line": 60,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the calendar\n",
                    "description": "<p>the height of the calendar</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "locale",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe locale of the calendar\n",
                    "description": "<p>the locale of the calendar</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "view",
                    "defaultValue": "'dayGridMonth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the type of calendar view\n",
                    "description": "<p>Defines the type of calendar view</p>\n",
                    "line": 56,
                    "type": "\"timeGridWeek\" | \"dayGridMonth\" | \"dayGridWeek\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "whenDateClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered when a date on the calendar is clicked\n",
                    "description": "<p>Event triggered when a date on the calendar is clicked</p>\n",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "whenEventClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered when a calendar event is clicked\n",
                    "description": "<p>Event triggered when a calendar event is clicked</p>\n",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "whenViewChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered when the calendar view of the calendar changes\n",
                    "description": "<p>Event triggered when the calendar view of the calendar changes</p>\n",
                    "line": 87,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "calendarOptions",
                    "defaultValue": "{\n    initialView: this.view,\n    themeSystem: 'bootstrap',\n    events: this.viewChange.bind(this),\n    height: '',\n    eventClick: this.eventClick.bind(this),\n    headerToolbar: this.header,\n    footerToolbar: this.footer,\n    buttonIcons: this.buttonsIcons,\n    locale: '',\n    dateClick: this.dateClick.bind(this)\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "optional": false,
                    "description": "<p>calendar config</p>\n",
                    "line": 91,
                    "rawdescription": "\n\ncalendar config\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "dateClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nemits when a date is clicked\n",
                    "description": "<p>emits when a date is clicked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3616,
                                "end": 3621,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3610,
                                "end": 3615,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "eventClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nemits when a event is clicked\n",
                    "description": "<p>emits when a event is clicked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3477,
                                "end": 3482,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3471,
                                "end": 3476,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2771,
                                "end": 2778,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2765,
                                "end": 2770,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "viewChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "successCallback",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "failureCallback",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nemits when the calendar view changes,\nif a callback function has been defined it executes the function passed in input\n",
                    "description": "<p>emits when the calendar view changes,\nif a callback function has been defined it executes the function passed in input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3848,
                                "end": 3853,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3842,
                                "end": 3847,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3866,
                                "end": 3881,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "successCallback"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3860,
                                "end": 3865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3894,
                                "end": 3909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "failureCallback"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3888,
                                "end": 3893,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>calendar component decorator</p>\n",
            "rawdescription": "\n\ncalendar component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { CalendarOptions } from '@fullcalendar/angular'\n\n/**\n * calendar component decorator\n */\n@Component({\n  selector: 'quang-calendar',\n  templateUrl: './calendar.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * calendar component\n */\nexport class CalendarComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Calendar ${this.id}`\n  /**\n   * the height of the calendar\n   */\n  @Input() height: string = ''\n  /**\n   * the locale of the calendar\n   */\n  @Input() locale: string = ''\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines what to do when the calendar view changes and the events of the current view should be loaded\n   * @param e\n   * @param s\n   * @param f\n   */\n  @Input() callBack: (e: any, s: any, f: any) => {} = (e, s, f) => []\n  /**\n   * Defines the type of calendar view\n   */\n  @Input() view: 'timeGridWeek' | 'dayGridMonth' | 'dayGridWeek' = 'dayGridMonth'\n  /**\n   * Defines the format of the calendar header\n   */\n  @Input() header: { [key: string]: any } = {}\n  /**\n   * Defines the format of the calendar footer\n   */\n  @Input() footer: { [key: string]: any } = {}\n  /**\n   * Defines the classes of the font-awesome icons that will be used in the buttons\n   */\n  @Input() buttonsIcons: { [key: string]: any } = {\n    close: 'fas fa-times',\n    prev: 'fas fa-chevron-left',\n    next: 'fas fa-chevron-right',\n    prevYear: 'fas fa-angle-double-left',\n    nextYear: 'fas fa-angle-double-right'\n  }\n\n  /**\n   * Event triggered when a calendar event is clicked\n   */\n  @Output() whenEventClick: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * Event triggered when a date on the calendar is clicked\n   */\n  @Output() whenDateClick: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * Event triggered when the calendar view of the calendar changes\n   */\n  @Output() whenViewChange: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * calendar config\n   */\n  calendarOptions: CalendarOptions = {\n    initialView: this.view,\n    themeSystem: 'bootstrap',\n    events: this.viewChange.bind(this),\n    height: '',\n    eventClick: this.eventClick.bind(this),\n    headerToolbar: this.header,\n    footerToolbar: this.footer,\n    buttonIcons: this.buttonsIcons,\n    locale: '',\n    dateClick: this.dateClick.bind(this)\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.height?.currentValue) {\n      this.calendarOptions.height = changes.height.currentValue\n    }\n    if (changes.view?.currentValue) {\n      this.calendarOptions.initialView = changes.view?.currentValue\n    }\n    if (changes.header?.currentValue) {\n      this.calendarOptions.headerToolbar = changes.header?.currentValue\n    }\n    if (changes.footer?.currentValue) {\n      this.calendarOptions.footerToolbar = changes.footer?.currentValue\n    }\n    if (changes.locale?.currentValue) {\n      this.calendarOptions.locale = changes.locale?.currentValue\n    }\n  }\n\n  /**\n   * emits when a event is clicked\n   * @param event\n   */\n  eventClick (event: any): void {\n    this.whenEventClick.emit(event)\n  }\n\n  /**\n   * emits when a date is clicked\n   * @param event\n   */\n  dateClick (event: any): void {\n    this.whenDateClick.emit(event)\n  }\n\n  /**\n   * emits when the calendar view changes,\n   * if a callback function has been defined it executes the function passed in input\n   * @param event\n   * @param successCallback\n   * @param failureCallback\n   */\n  viewChange (event: any, successCallback: any, failureCallback: any): void {\n    this.whenViewChange.emit(event)\n    this.callBack(event, successCallback, failureCallback)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<full-calendar\n  [id]=\"id\"\n  [attr.aria-label]=\"ariaLabel | transloco\"\n  [tabIndex]=\"tabIndex\"\n  [options]=\"calendarOptions\"\n  role=\"dialog\"\n></full-calendar>\n\n"
        },
        {
            "name": "CardActionComponent",
            "id": "component-CardActionComponent-c05156bfb07b73d9a842272d202905ff0471908e0d438ac37015c4b8f8038ab4aa47dfb2e621ea4f65802bf8d31cf1edacec641c632ad72c5cbd4d1aef058b74",
            "file": "projects/quang-components/src/lib/card-action/card-action.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card-action",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./card-action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>card component decorator</p>\n",
            "rawdescription": "\n\ncard component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n\n/**\n * card component decorator\n */\n@Component({\n  selector: 'quang-card-action',\n  templateUrl: './card-action.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * bootstrap card wrapper with action\n */\nexport class CardActionComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "templateData": "<div class=\"card\">\n  <div class=\"card-header card-header-action\">\n    <ng-content select=\"[cardHeader]\"></ng-content>\n    <ng-content select=\"[cardAction]\"></ng-content>\n  </div>\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n  <div class=\"card-footer\">\n    <ng-content select=\"[cardFooter]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CardActionHeaderComponent",
            "id": "component-CardActionHeaderComponent-16fee241901dd7a4d275be4e2f8e586d88f82b66e0b52ec1098b13fc2396bd25223aa0c2feb3d5799120123dc3277dbeefc7cbbc360aa316d769f26595c6f88f",
            "file": "projects/quang-components/src/lib/card-action-header/card-action-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card-action-header",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./card-action-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>card action component decorator</p>\n",
            "rawdescription": "\n\ncard action component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n\n/**\n * card action component decorator\n */\n@Component({\n  selector: 'quang-card-action-header',\n  templateUrl: './card-action-header.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * bootstrap card wrapper with action and header\n */\nexport class CardActionHeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "templateData": "<div class=\"card\">\n  <div class=\"card-header card-header-action\">\n    <ng-content select=\"[cardHeader]\"></ng-content>\n    <ng-content select=\"[cardAction]\"></ng-content>\n  </div>\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-efa48c6625d33db7b4d2cdf7acf62051f77621a0c0bee1e6aa8772fbb089664d18be77c15d9ee5d92f9c765a8aee530e21402a7000f7147c00b3426fe632a289",
            "file": "projects/quang-components/src/lib/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>card component decorator</p>\n",
            "rawdescription": "\n\ncard component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n/**\n * card component decorator\n */\n@Component({\n  selector: 'quang-card',\n  templateUrl: './card.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * bootstrap card wrapper\n */\nexport class CardComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "templateData": "<div class=\"card\">\n  <div class=\"card-header\">\n    <ng-content select=\"[cardHeader]\"></ng-content>\n  </div>\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n  <div class=\"card-footer\">\n    <ng-content select=\"[cardFooter]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CardFooterComponent",
            "id": "component-CardFooterComponent-b828a646cdac2898f63da5a3009c70ea4b14ba9b331328f5629a7263436a69af3705188437ea30d58c4d06d6eaaf48d6420fe15e9ad55aad0d6fb1dc1c9193a4",
            "file": "projects/quang-components/src/lib/card-footer/card-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card-footer",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./card-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>card component decorator</p>\n",
            "rawdescription": "\n\ncard component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n/**\n * card component decorator\n */\n@Component({\n  selector: 'quang-card-footer',\n  templateUrl: './card-footer.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * bootstrap card wrapper\n */\nexport class CardFooterComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "templateData": "<div class=\"card\">\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n  <div class=\"card-footer\">\n    <ng-content select=\"[cardFooter]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CardHeaderComponent",
            "id": "component-CardHeaderComponent-d9195450491a1529d16bb64018b75a06ae240e36fa4bef290984fd8c2e74b137c68e6ffb8dde705c92a0d4a0f7eec3756d777ed36f04fbd5cdb02629deb15fc4",
            "file": "projects/quang-components/src/lib/card-header/card-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card-header",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./card-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>card header component decorator</p>\n",
            "rawdescription": "\n\ncard header component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n/**\n * card header component decorator\n */\n@Component({\n  selector: 'quang-card-header',\n  templateUrl: './card-header.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * bootstrap card wrapper with header\n */\nexport class CardHeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "templateData": "<div class=\"card\">\n  <div class=\"card-header\">\n    <ng-content select=\"[cardHeader]\"></ng-content>\n  </div>\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CardImageComponent",
            "id": "component-CardImageComponent-0053743cd66b47355dce4da266f161f6e0a603c9a967205e7ae3463062832d16187523b8e0e503def7cf890e62988547d68a999822de4b2d8dcce9e4d252ba18",
            "file": "projects/quang-components/src/lib/card-image/card-image.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card-image",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'quang-card-image',\n  templateUrl: './card-image.component.html',\n  styles: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardImageComponent {\n  @Input() src: string = ''\n  @Input() alt: string = ''\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"card\">\n  <img\n    [src]=\"src\"\n    class=\"card-img-top\"\n    [alt]=\"alt | transloco\">\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "CardSimpleComponent",
            "id": "component-CardSimpleComponent-916dca1f601a1d625089b2c53da8500365d5e91c81ce133cb38ccd30b39e6e16321aaf1e09b78f3c847e2498d69503652001636febefb73979d4232929090188",
            "file": "projects/quang-components/src/lib/card-simple/card-simple.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-card-simple",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./card-simple.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>card simple component decorator</p>\n",
            "rawdescription": "\n\ncard simple component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n/**\n * card simple component decorator\n */\n@Component({\n  selector: 'quang-card-simple',\n  templateUrl: './card-simple.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * bootstrap card wrapper with only body\n */\nexport class CardSimpleComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "templateData": "<div class=\"card\">\n  <div class=\"card-body\">\n    <ng-content select=\"[cardBody]\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ChartAreaComponent",
            "id": "component-ChartAreaComponent-757fbcec235cbb830c95234644070484b4c8e6f2f4889f7774202403d1a4de57df620a5c76eca3adcc91eeec27aa810424fc66e42a78bc2cfac3e4a7d6ebf186",
            "file": "projects/quang-chart/src/lib/chart-area/chart-area.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-area",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chart-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\n",
                    "description": "<p>Determine the arialabel tag for accessibility,</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 49,
                    "type": "ChartArea | null",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of colors of the chart\n",
                    "description": "<p>the list of colors of the chart</p>\n",
                    "line": 37,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 53,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 63,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    color: [],\n    xAxis: {},\n    yAxis: {\n      type: 'value'\n    },\n    series: [],\n    animationEasing: 'elasticOut',\n    animationDelayUpdate: (idx: any) => {\n      return idx * 5\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1734,
                                "end": 1741,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1728,
                                "end": 1733,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2535,
                                "end": 2536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2529,
                                "end": 2534,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart area component decorator</p>\n",
            "rawdescription": "\n\nchart area component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { EChartsOption } from 'echarts'\nimport { ChartArea } from './chart-area.model'\n\n/**\n * chart area component decorator\n */\n@Component({\n  selector: 'quang-chart-area',\n  templateUrl: './chart-area.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart area component\n */\nexport class ChartAreaComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * the list of colors of the chart\n   */\n  @Input() color: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartArea | null = null\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    color: [],\n    xAxis: {},\n    yAxis: {\n      type: 'value'\n    },\n    series: [],\n    animationEasing: 'elasticOut',\n    animationDelayUpdate: (idx: any) => {\n      return idx * 5\n    }\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.color?.currentValue) {\n      this.chartOption.color = changes.color.currentValue\n    }\n    if (changes.chartData?.currentValue) {\n      this.chartOption.xAxis = {\n        type: 'category',\n        data: changes.chartData.currentValue.category\n      }\n    }\n    if (changes.chartData?.currentValue?.series.length) {\n      this.chartOption.series = changes.chartData.currentValue.series.map((s: any) => ({\n        data: s,\n        type: 'line',\n        areaStyle: {}\n      }))\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e event\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [id]=\"id\"\n     [ngStyle]=\"{'height': height}\"\n     echarts\n     [options]=\"chartOption\"\n     [autoResize]=\"true\"\n     [tabIndex]=\"tabIndex\"\n     (chartClick)=\"onChartClick($event)\"\n     [attr.aria-describedby]=\"ariaLabel | transloco\"\n     aria-live=\"off\"\n     role=\"graphics-document\"\n></div>\n\n"
        },
        {
            "name": "ChartBarComponent",
            "id": "component-ChartBarComponent-02ba024351746be7c01fe86020087a6d0be8fe1750d603e0e1f3d8268755105a2de3e004b82645df6d856320f6387891ff62046fd63edd11f36aba2b629c0c83",
            "file": "projects/quang-chart/src/lib/chart-bar/chart-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chart-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\n",
                    "description": "<p>Determine the arialabel tag for accessibility,</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 53,
                    "type": "ChartBar | null",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of colors of the chart\n",
                    "description": "<p>the list of colors of the chart</p>\n",
                    "line": 37,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 57,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether the graph is displayed horizontally\n",
                    "description": "<p>defines whether the graph is displayed horizontally</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 67,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    color: [],\n    xAxis: {},\n    yAxis: {},\n    series: [],\n    animationEasing: 'elasticOut',\n    animationDelayUpdate: (idx: any) => {\n      return idx * 5\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1808,
                                "end": 1815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1802,
                                "end": 1807,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2849,
                                "end": 2850,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2843,
                                "end": 2848,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart bar component decorator</p>\n",
            "rawdescription": "\n\nchart bar component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\n\nimport { EChartsOption } from 'echarts'\nimport { ChartBar } from './chart-bar.model'\n/**\n * chart bar component decorator\n */\n@Component({\n  selector: 'quang-chart-bar',\n  templateUrl: './chart-bar.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart bar component\n */\nexport class ChartBarComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * the list of colors of the chart\n   */\n  @Input() color: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = '50vh'\n  /**\n   * defines whether the graph is displayed horizontally\n   */\n  @Input() horizontal: boolean = false\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartBar | null = null\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    color: [],\n    xAxis: {},\n    yAxis: {},\n    series: [],\n    animationEasing: 'elasticOut',\n    animationDelayUpdate: (idx: any) => {\n      return idx * 5\n    }\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.color?.currentValue) {\n      this.chartOption.color = changes.color?.currentValue\n    }\n    if (changes.chartData?.currentValue?.series.length) {\n      this.chartOption.series = changes.chartData.currentValue.series.map((s: any) => ({\n        data: s,\n        type: 'bar'\n      }))\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n    if (changes.horizontal?.currentValue) {\n      this.chartOption.xAxis = {\n        type: 'value'\n      }\n      this.chartOption.yAxis = {\n        type: 'category',\n        data: changes.chartData?.currentValue.category\n      }\n    } else {\n      this.chartOption.yAxis = {\n        type: 'value'\n      }\n      this.chartOption.xAxis = {\n        type: 'category',\n        data: changes.chartData?.currentValue.category\n      }\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e event\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [id]=\"id\"\n     [ngStyle]=\"{'height': height}\"\n     echarts\n     [options]=\"chartOption\"\n     [autoResize]=\"true\"\n     [tabIndex]=\"tabIndex\"\n     (chartClick)=\"onChartClick($event)\"\n     [attr.aria-describedby]=\"ariaLabel | transloco\"\n     aria-live=\"off\"\n     role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartCandlestickComponent",
            "id": "component-ChartCandlestickComponent-790b9347671f5aa4ccd23a6028f8bdb0df4f16ba34825670474ef58a2714f6fcc2866f4daa55f9bc7421768a4b94bdde998184188809f18289a926098ffbc02d",
            "file": "projects/quang-chart/src/lib/chart-candlestick/chart-candlestick.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-candlestick",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chart-candlestick.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 37,
                    "type": "ChartCandlestick | null",
                    "decorators": []
                },
                {
                    "name": "colors",
                    "defaultValue": "['red', 'green']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe color of the graph\n",
                    "description": "<p>the color of the graph</p>\n",
                    "line": 50,
                    "type": "[, ]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 54,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 46,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 64,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    xAxis: {},\n    yAxis: {},\n    series: []\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1751,
                                "end": 1758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1745,
                                "end": 1750,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2501,
                                "end": 2502,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2495,
                                "end": 2500,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart candlestick component decorator</p>\n",
            "rawdescription": "\n\nchart candlestick component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { ChartCandlestick } from './chart-candlestick.model'\nimport { EChartsOption } from 'echarts'\n\n/**\n * chart candlestick component decorator\n */\n@Component({\n  selector: 'quang-chart-candlestick',\n  templateUrl: './chart-candlestick.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart candlestick component\n */\nexport class ChartCandlestickComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartCandlestick | null = null\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the color of the graph\n   */\n  @Input() colors: [color: string, color0: string] = ['red', 'green']\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    xAxis: {},\n    yAxis: {},\n    series: []\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.chartData?.currentValue) {\n      this.chartOption.xAxis = {\n        data: changes.chartData.currentValue.category\n      }\n      this.chartOption.series = [{\n        type: 'candlestick',\n        itemStyle: {\n          color: this.colors[0],\n          borderColor: this.colors[0],\n          color0: this.colors[1],\n          borderColor0: this.colors[1]\n        },\n        data: changes.chartData.currentValue.series\n      }]\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div\n  [id]=\"id\"\n  [ngStyle]=\"{'height': height}\"\n  echarts\n  [options]=\"chartOption\"\n  [autoResize]=\"true\"\n  [tabIndex]=\"tabIndex\"\n  (chartClick)=\"onChartClick($event)\"\n  [attr.aria-describedby]=\"ariaLabel | transloco\"\n  aria-live=\"off\"\n  role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartDoughnutComponent",
            "id": "component-ChartDoughnutComponent-387d738c17c4cb7cae79b2f90305a8cfb46fadd946f17525203251981fec0f286b3275676273b94423ffcbf9b67acd60c4bb3f3f6b450f5469282f70315baa04",
            "file": "projects/quang-chart/src/lib/chart-doughnut/chart-doughnut.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-doughnut",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./chart-doughnut.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 41,
                    "type": "ChartDoughnut[]",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of colors of the chart\n",
                    "description": "<p>the list of colors of the chart</p>\n",
                    "line": 37,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 54,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 64,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    color: [],\n    series: [\n      {\n        type: 'pie',\n        radius: ['30%', '50%'],\n        center: ['50%', '50%'],\n        data: []\n      }\n    ],\n    animationEasing: 'elasticOut',\n    animationDelay: function (idx: any) {\n      return Math.random() * 200\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1918,
                                "end": 1925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1912,
                                "end": 1917,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2496,
                                "end": 2497,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2490,
                                "end": 2495,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart doughnut component decorator</p>\n",
            "rawdescription": "\n\nchart doughnut component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { ChartDoughnut } from './chart-doughnut.model'\nimport { EChartsOption } from 'echarts'\n\n/**\n * chart doughnut component decorator\n */\n@Component({\n  selector: 'quang-chart-doughnut',\n  templateUrl: './chart-doughnut.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart doughnut component\n */\nexport class ChartDoughnutComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * the list of colors of the chart\n   */\n  @Input() color: string[] = []\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartDoughnut[] = []\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    color: [],\n    series: [\n      {\n        type: 'pie',\n        radius: ['30%', '50%'],\n        center: ['50%', '50%'],\n        data: []\n      }\n    ],\n    animationEasing: 'elasticOut',\n    animationDelay: function (idx: any) {\n      return Math.random() * 200\n    }\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.color?.currentValue) {\n      this.chartOption.color = changes.color.currentValue\n    }\n    if (changes.chartData?.currentValue && (this.chartOption?.series as any[])[0]) {\n      (this.chartOption.series as any)[0].data = changes.chartData.currentValue\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div\n  [id]=\"id\"\n  [ngStyle]=\"{'height': height}\"\n  echarts\n  [options]=\"chartOption\"\n  [autoResize]=\"true\"\n  [tabIndex]=\"tabIndex\"\n  (chartClick)=\"onChartClick($event)\"\n  [attr.aria-describedby]=\"ariaLabel | transloco\"\n  aria-live=\"off\"\n  role=\"graphics-document\"\n></div>\n\n"
        },
        {
            "name": "ChartGaugeComponent",
            "id": "component-ChartGaugeComponent-a4848b4a4def325041c70c5b5d6ca9cc523dcefee3e8a8e0a187cf26ddf62d68924162fd01a325fbaed817de21b82ea5efa0b5ea610752830779902a9633cbf0",
            "file": "projects/quang-chart/src/lib/chart-gauge/chart-gauge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-gauge",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chart-gauge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the aria label tag for accessibility\n",
                    "description": "<p>Determine the aria label tag for accessibility</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 59,
                    "type": "ChartGauge | null",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'#000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "gaugeColor",
                    "defaultValue": "'#000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 63,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe maximum value indicated in the graph\n",
                    "description": "<p>the maximum value indicated in the graph</p>\n",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe minimum value indicated in the graph\n",
                    "description": "<p>the minimum value indicated in the graph</p>\n",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pointerColor",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 73,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    series: [\n      {\n        type: 'gauge',\n        min: this.min,\n        max: this.max,\n        data: [],\n        progress: {\n          show: true\n        },\n        detail: {\n          valueAnimation: true,\n          formatter: '{value}'\n        },\n        pointer: {\n          itemStyle: {\n            color: 'auto'\n          }\n        },\n        axisLine: {\n          lineStyle: {\n            color: [\n              [1, this.gaugeColor]\n            ]\n          }\n        },\n        itemStyle: {\n          color: this.color\n        }\n      }\n    ]\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 77,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2285,
                                "end": 2292,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2279,
                                "end": 2284,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3401,
                                "end": 3402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3395,
                                "end": 3400,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { EChartsOption } from 'echarts'\nimport { ChartGauge } from './chart-gauge.model'\n\n@Component({\n  selector: 'quang-chart-gauge',\n  templateUrl: './chart-gauge.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartGaugeComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Determine the aria label tag for accessibility\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the minimum value indicated in the graph\n   */\n  @Input() min: number = 0\n  /**\n   * the maximum value indicated in the graph\n   */\n  @Input() max: number = 100\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   *\n   */\n  @Input() pointerColor: string = 'auto'\n  /**\n   *\n   */\n  @Input() gaugeColor: string = '#000'\n  /**\n   *\n   */\n  @Input() color: string = '#000'\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartGauge | null = null\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    series: [\n      {\n        type: 'gauge',\n        min: this.min,\n        max: this.max,\n        data: [],\n        progress: {\n          show: true\n        },\n        detail: {\n          valueAnimation: true,\n          formatter: '{value}'\n        },\n        pointer: {\n          itemStyle: {\n            color: 'auto'\n          }\n        },\n        axisLine: {\n          lineStyle: {\n            color: [\n              [1, this.gaugeColor]\n            ]\n          }\n        },\n        itemStyle: {\n          color: this.color\n        }\n      }\n    ]\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.chartData?.currentValue) {\n      (this.chartOption.series as any)[0].data = [changes.chartData.currentValue]\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n    if (changes.min?.currentValue) {\n      (this.chartOption.series as any)[0].min = changes.min.currentValue\n    }\n    if (changes.max?.currentValue) {\n      (this.chartOption.series as any)[0].max = changes.max.currentValue\n    }\n    if (changes.pointerColor?.currentValue) {\n      (this.chartOption.series as any)[0].pointer.itemStyle = { color: changes.pointerColor.currentValue }\n    }\n    if (changes.gaugeColor?.currentValue) {\n      (this.chartOption.series as any)[0].axisLine.lineStyle.color = [[1, changes.gaugeColor.currentValue]]\n    }\n    if (changes.color?.currentValue) {\n      (this.chartOption.series as any)[0].itemStyle.color = changes.color.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e event\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [id]=\"id\"\n     [ngStyle]=\"{'height': height}\"\n     echarts\n     [options]=\"chartOption\"\n     [autoResize]=\"true\"\n     [tabIndex]=\"tabIndex\"\n     (chartClick)=\"onChartClick($event)\"\n     [attr.aria-describedby]=\"ariaLabel | transloco\"\n     aria-live=\"off\"\n     role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartLineComponent",
            "id": "component-ChartLineComponent-dcb15a3a1c7839adc297c6e85db618785fc52ec3c0d354b3f99ca80c5b447ba274ee4933ad604b8898d639c2f12f8516fdbdddb16cd719e90768822a32f8f91c",
            "file": "projects/quang-chart/src/lib/chart-line/chart-line.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-line",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./chart-line.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 50,
                    "type": "ChartLine | null",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of colors of the chart\n",
                    "description": "<p>the list of colors of the chart</p>\n",
                    "line": 38,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 54,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 64,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    color: [],\n    xAxis: {},\n    yAxis: {\n      type: 'value'\n    },\n    series: [],\n    animationEasing: 'elasticOut',\n    animationDelayUpdate: (idx: any) => {\n      return idx * 5\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1813,
                                "end": 1820,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1807,
                                "end": 1812,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2537,
                                "end": 2538,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2531,
                                "end": 2536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart line component decorator</p>\n",
            "rawdescription": "\n\nchart line component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { ChartLine } from './chart-line.model'\nimport { EChartsOption } from 'echarts'\n\n/**\n * chart line component decorator\n */\n@Component({\n  selector: 'quang-chart-line',\n  templateUrl: './chart-line.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart line component\n */\nexport class ChartLineComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * the list of colors of the chart\n   */\n  @Input() color: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartLine | null = null\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    color: [],\n    xAxis: {},\n    yAxis: {\n      type: 'value'\n    },\n    series: [],\n    animationEasing: 'elasticOut',\n    animationDelayUpdate: (idx: any) => {\n      return idx * 5\n    }\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.color?.currentValue) {\n      this.chartOption.color = changes.color?.currentValue\n    }\n    if (changes.chartData?.currentValue) {\n      this.chartOption.xAxis = {\n        type: 'category',\n        data: changes.chartData?.currentValue.category\n      }\n      this.chartOption.series = changes.chartData?.currentValue.series.map((s: any) => ({\n        data: s,\n        type: 'line'\n      })\n      )\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e event\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [id]=\"id\"\n     [ngStyle]=\"{'height': height}\"\n     echarts\n     [options]=\"chartOption\"\n     [autoResize]=\"true\"\n     [tabIndex]=\"tabIndex\"\n     (chartClick)=\"onChartClick($event)\"\n     [attr.aria-describedby]=\"ariaLabel | transloco\"\n     aria-live=\"off\"\n     role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartPieComponent",
            "id": "component-ChartPieComponent-f42097298bebc00f3ab99cd777ae326800bf37875952773ac661a63f978e825cd00ee82d665177073d3a5da83f8560b3359ecd56b51371e02827f4eac4fff636",
            "file": "projects/quang-chart/src/lib/chart-pie/chart-pie.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-pie",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./chart-pie.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 40,
                    "type": "ChartPie[]",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of colors of the chart\n",
                    "description": "<p>the list of colors of the chart</p>\n",
                    "line": 36,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 53,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 63,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    color: [],\n    series: [\n      {\n        type: 'pie',\n        radius: '50%',\n        center: ['50%', '50%'],\n        data: []\n      }\n    ],\n    animationEasing: 'elasticOut',\n    animationDelay: function (idx: any) {\n      return Math.random() * 200\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1868,
                                "end": 1875,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1862,
                                "end": 1867,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2446,
                                "end": 2447,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2440,
                                "end": 2445,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart pie component decorator</p>\n",
            "rawdescription": "\n\nchart pie component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { ChartPie } from './chart-pie.model'\nimport { EChartsOption } from 'echarts'\n/**\n * chart pie component decorator\n */\n@Component({\n  selector: 'quang-chart-pie',\n  templateUrl: './chart-pie.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart pie component\n */\nexport class ChartPieComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * the list of colors of the chart\n   */\n  @Input() color: string[] = []\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartPie[] = []\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    color: [],\n    series: [\n      {\n        type: 'pie',\n        radius: '50%',\n        center: ['50%', '50%'],\n        data: []\n      }\n    ],\n    animationEasing: 'elasticOut',\n    animationDelay: function (idx: any) {\n      return Math.random() * 200\n    }\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.color?.currentValue) {\n      this.chartOption.color = changes.color.currentValue\n    }\n    if (changes.chartData?.currentValue && (this.chartOption?.series as any[])[0]) {\n      (this.chartOption.series as any)[0].data = changes.chartData.currentValue\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e event\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div\n  [id]=\"id\"\n  [ngStyle]=\"{'height': height}\"\n  echarts\n  [options]=\"chartOption\"\n  [autoResize]=\"true\"\n  [tabIndex]=\"tabIndex\"\n  (chartClick)=\"onChartClick($event)\"\n  [attr.aria-describedby]=\"ariaLabel | transloco\"\n  aria-live=\"off\"\n  role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartRadarComponent",
            "id": "component-ChartRadarComponent-b0fe371384c2832f539e71878f2d059e07c7163c7b0169ed35d1b11e4004686ce1c8be634c158448d5632b164f49c4f1195650a1622ae98ddb7e31d33062b22b",
            "file": "projects/quang-chart/src/lib/chart-radar/chart-radar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-radar",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./chart-radar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 41,
                    "type": "ChartRadar[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 54,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radarIndicators",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nradar type section indicators\n",
                    "description": "<p>radar type section indicators</p>\n",
                    "line": 37,
                    "type": "ChartRadarIndicator[]",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 64,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    radar: {},\n    series: [{ type: 'radar', data: [] }]\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1723,
                                "end": 1730,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1717,
                                "end": 1722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2295,
                                "end": 2296,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2289,
                                "end": 2294,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart radar component decorator</p>\n",
            "rawdescription": "\n\nchart radar component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { ChartRadar, ChartRadarIndicator } from './chart-radar.model'\nimport { EChartsOption } from 'echarts'\n\n/**\n * chart radar component decorator\n */\n@Component({\n  selector: 'quang-chart-radar',\n  templateUrl: './chart-radar.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart radar component\n */\nexport class ChartRadarComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * radar type section indicators\n   */\n  @Input() radarIndicators: ChartRadarIndicator[] = []\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartRadar[] = []\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    radar: {},\n    series: [{ type: 'radar', data: [] }]\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.chartData?.currentValue) {\n      (this.chartOption.series as any)[0].data = changes.chartData.currentValue\n    }\n    if (changes.radarIndicators?.currentValue) {\n      this.chartOption.radar = { indicator: changes.radarIndicators?.currentValue }\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div\n  [id]=\"id\"\n  [ngStyle]=\"{'height': height}\"\n  echarts\n  [options]=\"chartOption\"\n  [tabIndex]=\"tabIndex\"\n  (chartClick)=\"onChartClick($event)\"\n  [attr.aria-describedby]=\"ariaLabel | transloco\"\n  aria-live=\"off\"\n  role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartTreeComponent",
            "id": "component-ChartTreeComponent-9d4518ab245077f9da7f9ed45bd83dead64a3a6d35fd16cc4aaa928ca3c306146fda0571981f075389fba8bbc98221f857506bb7ce43af9d384da49f52af01f5",
            "file": "projects/quang-chart/src/lib/chart-tree/chart-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chart-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the aria label tag for accessibility\n",
                    "description": "<p>Determine the aria label tag for accessibility</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 38,
                    "type": "ChartTree[]",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'#000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 42,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "nodeColor",
                    "defaultValue": "'#000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 52,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    series: [\n      {\n        type: 'tree',\n        data: [],\n        label: {\n          position: 'left',\n          verticalAlign: 'middle',\n          align: 'right',\n          fontSize: 9\n        },\n        leaves: {\n          label: {\n            position: 'right',\n            verticalAlign: 'middle',\n            align: 'left'\n          }\n        },\n        itemStyle: {\n          color: this.nodeColor\n        },\n        lineStyle: {\n          color: this.color\n        },\n        expandAndCollapse: true,\n        animationDuration: 300,\n        animationDurationUpdate: 300\n      }\n    ]\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1992,
                                "end": 1999,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1986,
                                "end": 1991,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2697,
                                "end": 2698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2691,
                                "end": 2696,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core'\nimport { EChartsOption } from 'echarts'\nimport { ChartTree } from './chart-tree.model'\n\n@Component({\n  selector: 'quang-chart-tree',\n  templateUrl: './chart-tree.component.html',\n  styles: []\n})\nexport class ChartTreeComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Determine the aria label tag for accessibility\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = '50vh'\n  /**\n   *\n   */\n  @Input() color: string = '#000'\n  /**\n   *\n   */\n  @Input() nodeColor: string = '#000'\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartTree[] = []\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    series: [\n      {\n        type: 'tree',\n        data: [],\n        label: {\n          position: 'left',\n          verticalAlign: 'middle',\n          align: 'right',\n          fontSize: 9\n        },\n        leaves: {\n          label: {\n            position: 'right',\n            verticalAlign: 'middle',\n            align: 'left'\n          }\n        },\n        itemStyle: {\n          color: this.nodeColor\n        },\n        lineStyle: {\n          color: this.color\n        },\n        expandAndCollapse: true,\n        animationDuration: 300,\n        animationDurationUpdate: 300\n      }\n    ]\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.chartData?.currentValue) {\n      (this.chartOption.series as any)[0].data = changes.chartData.currentValue\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n    if (changes.color?.currentValue) {\n      (this.chartOption.series as any)[0].lineStyle.color = changes.color.currentValue\n    }\n    if (changes.nodeColor?.currentValue) {\n      (this.chartOption.series as any)[0].itemStyle.color = changes.nodeColor.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e event\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [id]=\"id\"\n     [ngStyle]=\"{'height': height}\"\n     echarts\n     [options]=\"chartOption\"\n     [autoResize]=\"true\"\n     [tabIndex]=\"tabIndex\"\n     (chartClick)=\"onChartClick($event)\"\n     [attr.aria-describedby]=\"ariaLabel | transloco\"\n     aria-live=\"off\"\n     role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "ChartTreemapComponent",
            "id": "component-ChartTreemapComponent-961c5256a62b0f708041f99eb2715b46fe3bf93ed26a273a57785536da8c3d16a2768c75fef353554291e31941d4b6914252b20c562b76a5009941a60192b6f1",
            "file": "projects/quang-chart/src/lib/chart-treemap/chart-treemap.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-chart-treemap",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./chart-treemap.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe object that contains the data to make the graph\n",
                    "description": "<p>the object that contains the data to make the graph</p>\n",
                    "line": 36,
                    "type": "ChartTreemap[]",
                    "decorators": []
                },
                {
                    "name": "grid",
                    "defaultValue": "{ top: 0, left: 0, right: 0, bottom: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe grid that contains the graph defines the padding in the four directions\n",
                    "description": "<p>the grid that contains the graph defines the padding in the four directions</p>\n",
                    "line": 49,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "' 50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the chart container\n",
                    "description": "<p>the height of the chart container</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "chartClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclick event on the graph\n",
                    "description": "<p>click event on the graph</p>\n",
                    "line": 59,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "defaultValue": "{\n    series: []\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "<p>basic configuration of the chart</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nbasic configuration of the chart\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange input management\n",
                    "description": "<p>change input management</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1573,
                                "end": 1580,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1567,
                                "end": 1572,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChartClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered by clicking on an element of the chart emits an event to the parent component\n",
                    "description": "<p>function triggered by clicking on an element of the chart emits an event to the parent component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2192,
                                "end": 2193,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2186,
                                "end": 2191,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>chart treemap component decorator</p>\n",
            "rawdescription": "\n\nchart treemap component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core'\nimport { ChartTreemap } from './chart-treemap.model'\nimport { EChartsOption } from 'echarts'\n/**\n * chart treemap component decorator\n */\n@Component({\n  selector: 'quang-chart-treemap',\n  templateUrl: './chart-treemap.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * chart treemap component\n */\nexport class ChartTreemapComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * the height of the chart container\n   */\n  @Input() height: string = ' 50vh'\n  /**\n   * the object that contains the data to make the graph\n   */\n  @Input() chartData: ChartTreemap[] = []\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = 'Chart'\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the grid that contains the graph defines the padding in the four directions\n   */\n  @Input() grid: {\n    top: number\n    bottom: number\n    left: number\n    right: number\n  } = { top: 0, left: 0, right: 0, bottom: 0 }\n\n  /**\n   * click event on the graph\n   */\n  @Output() chartClick: EventEmitter<any> = new EventEmitter()\n  /**\n   * basic configuration of the chart\n   */\n  chartOption: EChartsOption = {\n    series: []\n  }\n\n  /**\n   * change input management\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.chartData?.currentValue?.length) {\n      this.chartOption.series = [{\n        type: 'treemap',\n        roam: false,\n        breadcrumb: { show: false, emptyItemWidth: 0 },\n        nodeClick: 'zoomToNode',\n        data: [{\n          children: changes.chartData.currentValue\n        }]\n      }]\n    }\n    if (changes.grid?.currentValue) {\n      this.chartOption.grid = changes.grid.currentValue\n    }\n  }\n\n  /**\n   * function triggered by clicking on an element of the chart emits an event to the parent component\n   * @param e\n   */\n  onChartClick (e: any): void {\n    this.chartClick.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div\n  [id]=\"id\"\n  [ngStyle]=\"{'height': height}\"\n  echarts\n  [options]=\"chartOption\"\n  [autoResize]=\"true\"\n  [tabIndex]=\"tabIndex\"\n  (chartClick)=\"onChartClick($event)\"\n  [attr.aria-describedby]=\"ariaLabel | transloco\"\n  aria-live=\"off\"\n  role=\"graphics-document\"\n></div>\n"
        },
        {
            "name": "CodeReaderComponent",
            "id": "component-CodeReaderComponent-e285d07b401c510a2c08137c5d79d5416eecc3135687f58be17bbe2d8ad66a295476c7d8dc137d0188a28a88120aecbdc2f9351bb6bc50b74c66206d0fc74262",
            "file": "projects/quang-media/src/lib/code-reader/code-reader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-code-reader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./code-reader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNo device found error message\n",
                    "description": "<p>No device found error message</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formats",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsupported formats\n",
                    "description": "<p>supported formats</p>\n",
                    "line": 41,
                    "type": "Html5QrcodeSupportedFormats[]",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncomponent id\n",
                    "description": "<p>component id</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "qrBox",
                    "defaultValue": "{ width: 250, height: 250 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the size of the box in which the code will be identified\n",
                    "description": "<p>Defines the size of the box in which the code will be identified</p>\n",
                    "line": 45,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncomponent tabindex\n",
                    "description": "<p>component tabindex</p>\n",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "whenFindCode",
                    "defaultValue": "new EventEmitter<Html5QrcodeResult>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent emitter for co\n",
                    "description": "<p>event emitter for co</p>\n",
                    "line": 49,
                    "type": "EventEmitter<Html5QrcodeResult>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_cameraId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>selected device</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nselected device\n"
                },
                {
                    "name": "_devices",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "<p>Devices list</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nDevices list\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_reader",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Html5Qrcode | null",
                    "optional": false,
                    "description": "<p>html5 reader</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nhtml5 reader\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "getCameras",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsearch for available cameras to start the reader\n",
                    "description": "<p>search for available cameras to start the reader</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startReader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStarts the reading of the code,\nwhen it identifies a valid code it emits an event\n",
                    "description": "<p>Starts the reading of the code,\nwhen it identifies a valid code it emits an event</p>\n"
                },
                {
                    "name": "stopReader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nstop reader\n",
                    "description": "<p>stop reader</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { Html5Qrcode, Html5QrcodeSupportedFormats } from 'html5-qrcode'\nimport { from } from 'rxjs'\nimport { Html5QrcodeResult } from 'html5-qrcode/core'\n\n@Component({\n  selector: 'quang-code-reader',\n  templateUrl: './code-reader.component.html',\n  styles: []\n})\nexport class CodeReaderComponent implements OnInit {\n  /**\n   * component id\n   */\n  @Input() id: string = ''\n  /**\n   * component tabindex\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * No device found error message\n   */\n  @Input() errorMessage: string = ''\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * supported formats\n   */\n  @Input() formats: Html5QrcodeSupportedFormats[] = []\n  /**\n   * Defines the size of the box in which the code will be identified\n   */\n  @Input() qrBox: { width: number, height: number } = { width: 250, height: 250 }\n  /**\n   * event emitter for co\n   */\n  @Output() whenFindCode: EventEmitter<Html5QrcodeResult> = new EventEmitter<Html5QrcodeResult>()\n  /**\n   * Devices list\n   */\n  _devices: Array<{ [key: string]: any }> = []\n  /**\n   * selected device\n   */\n  _cameraId: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: boolean = false\n  /**\n   * html5 reader\n   */\n  _reader: Html5Qrcode | null = null\n\n  ngOnInit (): void {\n    this.getCameras()\n  }\n\n  /**\n   * search for available cameras to start the reader\n   */\n  getCameras (): void {\n    from(Html5Qrcode.getCameras()).subscribe(\n      d => {\n        this._errorMessage = false\n        this._devices = d\n      },\n      err => {\n        console.log(err)\n        this._errorMessage = true\n      })\n  }\n\n  /**\n   * Starts the reading of the code,\n   * when it identifies a valid code it emits an event\n   */\n  startReader (): void {\n    this._reader = new Html5Qrcode(\n      'wrapper-reader',\n      { formatsToSupport: this.formats, verbose: false }\n    )\n    this._reader.start(\n      this._cameraId,\n      {\n        fps: 10,\n        qrbox: this.qrBox\n      },\n      (decodedText: string, decodedResult: Html5QrcodeResult) => {\n        this.whenFindCode.emit(decodedResult)\n      },\n      (e) => {\n      })\n      .catch((e) => {\n        console.error(e)\n      })\n  }\n\n  /**\n   * stop reader\n   */\n  public stopReader (): void {\n    if (this._reader) {\n      from(this._reader.stop()).subscribe(\n        (ignore) => {},\n        (e) => console.error(e)\n      )\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [id]=\"id\"\n     class=\"mb-3\">\n  <div id=\"wrapper-reader\"\n       [hidden]=\"!_cameraId\"\n  ></div>\n  <div id=\"wrapper-devices\"\n       [hidden]=\"_cameraId\">\n    <div class=\"mb-3\">\n      <label [htmlFor]=\"id\"\n             class=\"form-label\"\n             [attr.aria-label]=\"ariaLabel | transloco\"\n             *ngIf=\"label\">\n        {{label | transloco}}\n      </label>\n      <select id=\"devices-select\"\n              [(ngModel)]=\"_cameraId\"\n              (change)=\"startReader()\"\n              [id]=\"id + '-selector'\"\n              [tabindex]=\"tabIndex\"\n              [class.is-invalid]=\"_errorMessage\"\n              [attr.aria-label]=\"ariaLabel | transloco\"\n              [attr.aria-autocomplete]=\"autocomplete\"\n              [attr.aria-errormessage]=\"id + '-error'\"\n              [attr.aria-describedby]=\"id + '-help'\"\n              class=\"form-select\">\n        <option *ngFor=\"let d of _devices\"\n                [ngValue]=\"d.id\">\n          {{d.label}}\n        </option>\n      </select>\n      <div class=\"invalid-feedback\"\n           aria-live=\"polite\"\n           [id]=\"id + '-error'\">\n        {{errorMessage | transloco}}\n      </div>\n      <small [id]=\"id + '-help'\"\n             [hidden]=\"_errorMessage\"\n             aria-live=\"assertive\"\n             class=\"form-text text-muted\">\n        {{'quang-code-reader.helper' | transloco}}\n      </small>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DatalistComponent",
            "id": "component-DatalistComponent-8bb73cc21ba5be6b0b85c89f36a2efc43a15e5cdbaa40aee476dcf48ab115d5cd02176bcd7319fd480566902829d08c43f8249cfcae6d70ab2b130e2bad9339e",
            "file": "projects/quang-core/src/lib/datalist/datalist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-datalist",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./datalist.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 67,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of options\n",
                    "description": "<p>The list of options</p>\n",
                    "line": 63,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 76,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "translateValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if the option labels are to be translated\n",
                    "description": "<p>Defines if the option labels are to be translated</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 93,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 97,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 121,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSelectElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nWhen you define that the select does not have the empty field,\nthe value is initialized with the value of the option in the first position\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nWhen you define that the select does not have the empty field,\nthe value is initialized with the value of the option in the first position</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4017,
                                "end": 4024,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4011,
                                "end": 4016,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4623,
                                "end": 4624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4617,
                                "end": 4622,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit, Optional,\n  Renderer2,\n  Self, SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n@Component({\n  selector: 'quang-datalist',\n  templateUrl: './datalist.component.html',\n  styles: []\n})\nexport class DatalistComponent implements ControlValueAccessor, AfterViewInit, OnChanges, OnInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines if the option labels are to be translated\n   */\n  @Input() translateValue: boolean = false\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * The list of options\n   */\n  @Input() list: string[] = []\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLSelectElement> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * When you define that the select does not have the empty field,\n   * the value is initialized with the value of the option in the first position\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            this._requiredValue = this.control.errors[error].requiredValue\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 112,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2910,
                            "end": 2918,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2904,
                            "end": 2909,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2943,
                            "end": 2950,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2937,
                            "end": 2942,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input class=\"form-control\"\n         [id]=\"id\"\n         [name]=\"id\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [tabIndex]=\"tabIndex\"\n         [attr.list]=\"id + 'list'\"\n         #input\n  >\n  <datalist\n    [id]=\"id + 'list'\">\n    <option *ngFor=\"let item of list\"\n            [value]=\"item\"\n            [selected]=\"item === _value\">\n      {{translateValue ? (item | transloco) : item }}\n    </option>\n  </datalist>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n"
        },
        {
            "name": "GoogleMapComponent",
            "id": "component-GoogleMapComponent-dcfd43e38cd22b21779cc0d087487c9f7faff347dc16da43cfafc42c3d232a8a610f2376d1faa776585146dd674a7bcdb1df26f5310b4314dc0168d8830b28a8",
            "file": "projects/quang-map/src/lib/google-map/google-map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-google-map",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./google-map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe label that describes the accessibility component\n",
                    "description": "<p>the label that describes the accessibility component</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customIcons",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nenable custom marker icons\n",
                    "description": "<p>enable custom marker icons</p>\n",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "defaultCenter",
                    "defaultValue": "[0, 0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe default center of the map\n",
                    "description": "<p>the default center of the map</p>\n",
                    "line": 60,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "defaultZoom",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe initial zoom of the map\n",
                    "description": "<p>the initial zoom of the map</p>\n",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enableClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nenable the click on the markers\n",
                    "description": "<p>enable the click on the markers</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'50vh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the map\n",
                    "description": "<p>the height of the map</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mapType",
                    "defaultValue": "'roadmap'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of map to display\n",
                    "description": "<p>The type of map to display</p>\n",
                    "line": 56,
                    "type": "\"roadmap\" | \"satellite\" | \"hybrid\" | \"terrain\"",
                    "decorators": []
                },
                {
                    "name": "markers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of markers to be drawn on the map\n",
                    "description": "<p>the list of markers to be drawn on the map</p>\n",
                    "line": 72,
                    "type": "GoogleMarker[]",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nindex within the navigation flow by tab\n",
                    "description": "<p>index within the navigation flow by tab</p>\n",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "markerClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent triggered by clicking on a marker\n",
                    "description": "<p>event triggered by clicking on a marker</p>\n",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>the variable that contains the map</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nthe variable that contains the map\n"
                },
                {
                    "name": "_markers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>temporary marker list</p>\n",
                    "line": 92,
                    "rawdescription": "\n\ntemporary marker list\n"
                },
                {
                    "name": "_window",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>function to access the window</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nfunction to access the window\n"
                },
                {
                    "name": "mapDiv",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement> | null",
                    "optional": false,
                    "description": "<p>The html element in which the map will be created</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nThe html element in which the map will be created\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'map', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate markers starting from the marker list if needed add a listener on the click event.\n",
                    "description": "<p>Create markers starting from the marker list if needed add a listener on the click event.</p>\n"
                },
                {
                    "name": "loadMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the map\n",
                    "description": "<p>Create the map</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwhen the marker list is changed, it deletes the existing ones and creates the new ones\nwhen the center changes it updates the center of the map,\nwhen the map type changes it builds a new map\n",
                    "description": "<p>when the marker list is changed, it deletes the existing ones and creates the new ones\nwhen the center changes it updates the center of the map,\nwhen the map type changes it builds a new map</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2417,
                                "end": 2424,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2411,
                                "end": 2416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "removeMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nremoves the markers from the map\n",
                    "description": "<p>removes the markers from the map</p>\n"
                },
                {
                    "name": "renderMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if there is already the script that loads the Google map library,\nif it is not active the service to add the script otherwise try to create to the map\n",
                    "description": "<p>Check if there is already the script that loads the Google map library,\nif it is not active the service to add the script otherwise try to create to the map</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>google map component decorator</p>\n",
            "rawdescription": "\n\ngoogle map component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { QuangGoogleMapService } from './google-map.service'\nimport { GoogleMarker } from './google-marker.model'\nimport { of, timer } from 'rxjs'\nimport { delay, delayWhen, map, retryWhen } from 'rxjs/operators'\n\n/**\n * global declaration for google async library\n */\ndeclare let google: any\n\n/**\n * google map component decorator\n */\n@Component({\n  selector: 'quang-google-map',\n  templateUrl: './google-map.component.html',\n  styles: ['']\n})\n/**\n * google map component\n */\nexport class GoogleMapComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * index within the navigation flow by tab\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the label that describes the accessibility component\n   */\n  @Input() ariaLabel: string = ''\n  /**\n   * the height of the map\n   */\n  @Input() height: string = '50vh'\n  /**\n   * the initial zoom of the map\n   */\n  @Input() defaultZoom: number = 0\n  /**\n   * The type of map to display\n   */\n  @Input() mapType: 'roadmap' | 'satellite' | 'hybrid' | 'terrain' = 'roadmap'\n  /**\n   * the default center of the map\n   */\n  @Input() defaultCenter: number[] = [0, 0]\n  /**\n   * enable the click on the markers\n   */\n  @Input() enableClick: boolean = false\n  /**\n   * enable custom marker icons\n   */\n  @Input() customIcons: boolean = false\n  /**\n   * the list of markers to be drawn on the map\n   */\n  @Input() markers: GoogleMarker[] = []\n  /**\n   * event triggered by clicking on a marker\n   */\n  @Output() markerClick = new EventEmitter<any>()\n  /**\n   * The html element in which the map will be created\n   */\n  @ViewChild('map', { static: false }) mapDiv: ElementRef<HTMLDivElement> | null = null\n  /**\n   * function to access the window\n   */\n  _window = (): any => window\n  /**\n   * the variable that contains the map\n   */\n  _map: any\n  /**\n   * temporary marker list\n   */\n  _markers: any[] = []\n\n  /**\n   * constructor\n   * @param googleMapService\n   */\n  constructor (\n    private readonly googleMapService: QuangGoogleMapService) {\n    this.renderMap()\n  }\n\n  /**\n   * when the marker list is changed, it deletes the existing ones and creates the new ones\n   * when the center changes it updates the center of the map,\n   * when the map type changes it builds a new map\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.markers?.currentValue) {\n      of('')\n        .pipe(\n          map(() => {\n            if (!this._window().google) {\n              throw new Error()\n            }\n            return ''\n          }),\n          retryWhen(errors => errors.pipe(\n            delayWhen(val => timer(100))\n          ))\n        )\n        .subscribe(() => {\n          this.removeMarkers()\n          this.createMarkers()\n        })\n    }\n    if (changes.mapType?.currentValue) {\n      if (this._window().google) {\n        this.loadMap()\n      }\n    }\n    if (changes.defaultCenter?.currentValue) {\n      if (this._window().google && this._map) {\n        this._map.setCenter({ lat: this.defaultCenter[0], lng: this.defaultCenter[1] })\n      }\n    }\n  }\n\n  /**\n   * Check if there is already the script that loads the Google map library,\n   * if it is not active the service to add the script otherwise try to create to the map\n   */\n  renderMap (): void {\n    if (!window.document.getElementById('google-map-script')) {\n      this.googleMapService.addMapScript()\n      this.renderMap()\n    } else {\n      try {\n        this.loadMap()\n      } catch (e) {\n        of('')\n          .pipe(\n            delay(100)\n          )\n          .subscribe(() => this.renderMap())\n      }\n    }\n  }\n\n  /**\n   * Create the map\n   */\n  loadMap (): void {\n    this._map = new google.maps.Map(this.mapDiv?.nativeElement, {\n      center: { lat: this.defaultCenter[0], lng: this.defaultCenter[1] },\n      zoom: this.defaultZoom,\n      mapTypeId: this.mapType\n    })\n  }\n\n  /**\n   * Create markers starting from the marker list if needed add a listener on the click event.\n   */\n  createMarkers (): void {\n    this.markers.forEach((markerModel: GoogleMarker) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(markerModel.lat, markerModel.long),\n        map: this._map,\n        clickable: false\n      })\n      marker.setValues({\n        data: markerModel\n      })\n      if (this.customIcons) {\n        marker.setIcon(markerModel.customIcon)\n      }\n      if (this.enableClick) {\n        marker.setClickable(true)\n        marker.addListener('click', () => {\n          this.markerClick.emit(marker)\n        })\n      }\n      this._markers.push(marker)\n    })\n  }\n\n  /**\n   * removes the markers from the map\n   */\n  removeMarkers (): void {\n    this._markers.forEach((m, i) => {\n      this._markers[i].setMap(null)\n    })\n    this._markers = []\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "googleMapService",
                        "type": "QuangGoogleMapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2064,
                            "end": 2080,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "googleMapService"
                        },
                        "type": "QuangGoogleMapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2058,
                            "end": 2063,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [id]=\"id\"\n     #map\n     [ngStyle]=\"{'height': height}\"\n     [tabIndex]=\"tabIndex\"\n     [attr.aria-describedby]=\"ariaLabel\"\n></div>\n"
        },
        {
            "name": "InputCheckboxComponent",
            "id": "component-InputCheckboxComponent-4f92081d28d7d5223dcf9ead1dbbe18b9db0f8eed1e88bf8c530e52e0eba3bdf1f13641de1a06292b9f3113ece233b88ba8ca7b343759dfb0da43c6eba19434f",
            "file": "projects/quang-core/src/lib/input-checkbox/input-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-checkbox",
            "styleUrls": [
                "./input-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 75,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the checkbox should align with the other checkboxes next to it\n",
                    "description": "<p>Defines whether the checkbox should align with the other checkboxes next to it</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 93,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 97,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 101,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 129,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4034,
                                "end": 4041,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4028,
                                "end": 4033,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4640,
                                "end": 4641,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4634,
                                "end": 4639,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4898,
                                "end": 4903,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4892,
                                "end": 4897,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input checkbox component decorator</p>\n",
            "rawdescription": "\n\ninput checkbox component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input checkbox component decorator\n */\n@Component({\n  selector: 'quang-input-checkbox',\n  templateUrl: './input-checkbox.component.html',\n  styleUrls: ['./input-checkbox.component.scss']\n})\n/**\n * input checkbox component\n */\nexport class InputCheckboxComponent implements OnInit, ControlValueAccessor, AfterViewInit, OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Defines whether the checkbox should align with the other checkboxes next to it\n   */\n  @Input() inline: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: boolean = false\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).checked\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: boolean): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'checked', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          this._requiredValue = this.control.errors[error].requiredValue\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-check {\n  .form-check-label {\n    &:hover {\n      cursor: pointer;\n    }\n  }\n  small {\n    display: block;\n  }\n}\n",
                    "styleUrl": "./input-checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 120,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3059,
                            "end": 3067,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3053,
                            "end": 3058,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3092,
                            "end": 3099,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3086,
                            "end": 3091,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"form-check\"\n     role=\"checkbox\"\n     [class.form-check-inline]=\"inline\">\n  <input type=\"checkbox\"\n         class=\"form-check-input\"\n         [name]=\"id\"\n         [id]=\"id\"\n         [attr.aria-checked]=\"_value\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [attr.aria-labelledby]=\"label | transloco\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [tabIndex]=\"tabIndex\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n         #input>\n  <label class=\"form-check-label\"\n         [htmlFor]=\"id\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         [attr.aria-describedby]=\"id\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputColorComponent",
            "id": "component-InputColorComponent-9a008e037d7c46b7c4b75840aaa9f36ba21f71f820057431c8829611731e553259757cb35d3ec45e4783bdc07245adbdec0183f2701ef92940e374d769321682",
            "file": "projects/quang-core/src/lib/input-color/input-color.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-color",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-color.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 75,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 84,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 62,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 98,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 138,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 128,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4239,
                                "end": 4246,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4233,
                                "end": 4238,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4845,
                                "end": 4846,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4839,
                                "end": 4844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5101,
                                "end": 5106,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5095,
                                "end": 5100,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input color component decorator</p>\n",
            "rawdescription": "\n\ninput color component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input color component decorator\n */\n@Component({\n  selector: 'quang-input-color',\n  templateUrl: './input-color.component.html',\n  styles: []\n})\n/**\n * input color component\n */\nexport class InputColorComponent implements OnInit, ControlValueAccessor, AfterViewInit, OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (Object.prototype.hasOwnProperty.call(this.control.errors.error, '')) {\n            if (this.control.errors[error]) {\n              this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n              if (error === 'minlength' || error === 'maxlength') {\n                this._requiredValue = this.control.errors[error].requiredLength\n              } else {\n                this._requiredValue = this.control.errors[error].requiredValue\n              }\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 129,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3264,
                            "end": 3272,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3258,
                            "end": 3263,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3297,
                            "end": 3304,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3291,
                            "end": 3296,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input type=\"color\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [readOnly]=\"readonly\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [autocomplete]=\"autocomplete\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputDateComponent",
            "id": "component-InputDateComponent-b4194cd3a971c38cb7ba7cbda1506b63474d9955e8d540b8aaab8eb73bad17b3956e0b10c3b1850b4a67fd7e5f5ed060d6e020db9aa08f35fbeceb09bd3c886e",
            "file": "projects/quang-date/src/lib/input-date/input-date.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-date",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-date.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 126,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the class of the selector open button\n",
                    "description": "<p>Defines the class of the selector open button</p>\n",
                    "line": 100,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds css classes to the component\n",
                    "description": "<p>Adds css classes to the component</p>\n",
                    "line": 113,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the format of the return date\n",
                    "description": "<p>defines the format of the return date</p>\n",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabledDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of dates that cannot be selected in the calendar\n",
                    "description": "<p>the list of dates that cannot be selected in the calendar</p>\n",
                    "line": 87,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "disabledDaysOfTheWeek",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines which days of the week to disable from the selection\n",
                    "description": "<p>defines which days of the week to disable from the selection</p>\n",
                    "line": 83,
                    "type": "Array<\"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\">",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 109,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the maximum selectable date\n",
                    "description": "<p>defines the maximum selectable date</p>\n",
                    "line": 79,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the minimum selectable date\n",
                    "description": "<p>defines the minimum selectable date</p>\n",
                    "line": 75,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minView",
                    "defaultValue": "'year'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the starting view\n",
                    "description": "<p>defines the starting view</p>\n",
                    "line": 91,
                    "type": "\"year\" | \"month\" | \"day\"",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placement",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines where to place the date selector in response to the input field\n",
                    "description": "<p>Defines where to place the date selector in response to the input field</p>\n",
                    "line": 117,
                    "type": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "returnISODate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines if the selected date must return in ISO ISO 8601 format\n",
                    "description": "<p>defines if the selected date must return in ISO ISO 8601 format</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showWeekNumbers",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines you want to see the week numbers in the selector\n",
                    "description": "<p>defines you want to see the week numbers in the selector</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the size of the input field following the bootstrap css rules\n",
                    "description": "<p>Define the size of the input field following the bootstrap css rules</p>\n",
                    "line": 121,
                    "type": "\"sm\" | \"lg\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 104,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>internal status disabled</p>\n",
                    "line": 156,
                    "rawdescription": "\n\ninternal status disabled\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 144,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 148,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 152,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 131,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "config",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<BsDatepickerConfig> | null",
                    "optional": false,
                    "description": "<p>Contains the component configurations</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nContains the component configurations\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 185,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datePicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsDatepickerInlineDirective | undefined",
                    "optional": false,
                    "description": "",
                    "line": 161,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drp', {static: true}"
                        }
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 160,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "actual locale",
                    "line": 184,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 171,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 165,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6060,
                                "end": 6067,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6054,
                                "end": 6059,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit locale\ncheck help message and init the key\n",
                    "description": "<p>init locale\ncheck help message and init the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmethod triggered when the date selection changes, it triggers the native events of the cva\n",
                    "description": "<p>method triggered when the date selection changes, it triggers the native events of the cva</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6637,
                                "end": 6641,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6631,
                                "end": 6636,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the form is initialized it saves the data in the component state\n",
                    "description": "<p>When the form is initialized it saves the data in the component state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7139,
                                "end": 7144,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7133,
                                "end": 7138,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input date component decorator</p>\n",
            "rawdescription": "\n\ninput date component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef, Inject,\n  Input, LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { format } from 'date-fns'\nimport { BsDatepickerConfig, BsDatepickerInlineDirective, BsLocaleService } from 'ngx-bootstrap/datepicker'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input date component decorator\n */\n@Component({\n  selector: 'quang-input-date',\n  templateUrl: './input-date.component.html',\n  styles: []\n})\n/**\n * input date component\n */\nexport class InputDateComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * defines if the selected date must return in ISO ISO 8601 format\n   */\n  @Input() returnISODate: boolean = false\n  /**\n   * defines you want to see the week numbers in the selector\n   */\n  @Input() showWeekNumbers: boolean = false\n  /**\n   * defines the format of the return date\n   */\n  @Input() dateFormat: string = ''\n  /**\n   * defines the minimum selectable date\n   */\n  @Input() minDate: Date | null = null\n  /**\n   * defines the maximum selectable date\n   */\n  @Input() maxDate: Date | null = null\n  /**\n   * defines which days of the week to disable from the selection\n   */\n  @Input() disabledDaysOfTheWeek: Array<0 | 1 | 2 | 3 | 4 | 5 | 6> = []\n  /**\n   * the list of dates that cannot be selected in the calendar\n   */\n  @Input() disabledDates: Date[] = []\n  /**\n   * defines the starting view\n   */\n  @Input() minView: 'year' | 'month' | 'day' = 'year'\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Defines the class of the selector open button\n   */\n  @Input() buttonClass: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Adds css classes to the component\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines where to place the date selector in response to the input field\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'bottom'\n  /**\n   * Define the size of the input field following the bootstrap css rules\n   */\n  @Input() size: 'sm' | 'lg' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: any\n  /**\n   * Contains the component configurations\n   */\n  config: Partial<BsDatepickerConfig> | null = null\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * internal status disabled\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | undefined\n  @ViewChild('drp', { static: true }) datePicker: BsDatepickerInlineDirective | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param localeService locale utility\n   * @param locale actual locale\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly localeService: BsLocaleService,\n    @Inject(LOCALE_ID) public locale: string,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * init locale\n   * check help message and init the key\n   */\n  ngOnInit (): void {\n    this.config = {\n      containerClass: 'theme-default',\n      isAnimated: true,\n      adaptivePosition: true,\n      dateInputFormat: this.dateFormat,\n      rangeInputFormat: this.dateFormat,\n      showWeekNumbers: this.showWeekNumbers\n    }\n    if (this.locale) {\n      this.localeService.use(this.locale)\n    }\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n    this.control.control?.markAsPristine()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * method triggered when the date selection changes, it triggers the native events of the cva\n   * @param date\n   */\n  onChangedHandler (date: Date): void {\n    if (!date) {\n      this.onChanged(null)\n    } else if (date.toString() === 'Invalid Date') {\n      this.control.control?.setErrors({ invalidDate: true })\n      this.control.control?.markAsDirty()\n    } else if (this.returnISODate) {\n      this.onChanged(date)\n    } else {\n      this.onChanged(format(date, 'yyyy-MM-dd'))\n    }\n    this.onTouched()\n  }\n\n  /**\n   * When the form is initialized it saves the data in the component state\n   * @param value\n   */\n  writeValue (value: any): void {\n    if (this.returnISODate && value\n    ) {\n      this._value = new Date(value)\n    } else {\n      this._value = value\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n    this._disabled = isDisabled\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n            if (error === 'dateBetween') {\n              if (this.dateFormat) {\n                this._requiredValue = format(new Date(this.control.errors.dateBetween.requiredValue[0]), this.dateFormat)\n                this._requiredValue += ' - '\n                this._requiredValue += format(new Date(this.control.errors.dateBetween.requiredValue[1]), this.dateFormat)\n              } else {\n                this._requiredValue = this.control.errors.dateBetween.requiredValue[0]\n                this._requiredValue += ' - '\n                this._requiredValue += this.control.errors.dateBetween.requiredValue[1]\n              }\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 172,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4558,
                            "end": 4566,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4552,
                            "end": 4557,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4591,
                            "end": 4604,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "localeService"
                        },
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4585,
                            "end": 4590,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>locale utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4632,
                            "end": 4638,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "locale"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4626,
                            "end": 4631,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>actual locale</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4665,
                            "end": 4672,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4659,
                            "end": 4664,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label class=\"form-label\"\n         [htmlFor]=\"id\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <div class=\"input-group\"\n       [class.input-group-sm]=\"size === 'sm'\"\n       [class.input-group-lg]=\"size === 'lg'\">\n    <input type=\"text\"\n           class=\"form-control\"\n           bsDatepicker\n           #input\n           [id]=\"id\"\n           [placeholder]=\"placeholder | transloco\"\n           [maxDate]=\"maxDate\"\n           [minDate]=\"minDate\"\n           [ngClass]=\"customClass\"\n           [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n           [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n           [bsConfig]=\"config\"\n           [daysDisabled]=\"disabledDaysOfTheWeek\"\n           [datesDisabled]=\"disabledDates\"\n           [autocomplete]=\"autocomplete\"\n           [attr.aria-label]=\"ariaLabel | transloco\"\n           [attr.aria-disabled]=\"_disabled\"\n           [tabIndex]=\"tabIndex\"\n           [bsValue]=\"_value\"\n           [placement]=\"placement\"\n           (bsValueChange)=\"onChangedHandler($event)\"\n           (blur)=\"onTouched()\"\n           #drp=\"bsDatepicker\"\n    >\n    <div class=\"input-group-append\">\n      <button\n        class=\"btn\"\n        [ngClass]=\"buttonClass\"\n        type=\"button\"\n        (click)=\"_disabled ? null : drp.toggle()\"\n      >\n        <ng-content select=\"[calendarIcon]\"></ng-content>\n      </button>\n    </div>\n\n    <div class=\"valid-feedback\">\n      {{_successMessage | transloco}}\n    </div>\n    <div class=\"invalid-feedback\"\n         [attr.aria-errormessage]=\"_errorMessage\">\n      {{_errorMessage | transloco }}\n    </div>\n  </div>\n  <small [id]=\"id + 'Help'\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputDateRangeComponent",
            "id": "component-InputDateRangeComponent-7d5e139ea4c70433ebfb34e20c210f9773e98550cccedda524df064a33ade4680001c38ad0bb9f95a0f89162d412e2fcc5b201af46269b02274dc2f21a01f2aa",
            "file": "projects/quang-date/src/lib/input-date-range/input-date-range.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-date-range",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-date-range.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 97,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 127,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the class of the selector open button\n",
                    "description": "<p>Defines the class of the selector open button</p>\n",
                    "line": 101,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds css classes to the component\n",
                    "description": "<p>Adds css classes to the component</p>\n",
                    "line": 114,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the format of the return date\n",
                    "description": "<p>defines the format of the return date</p>\n",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabledDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of dates that cannot be selected in the calendar\n",
                    "description": "<p>the list of dates that cannot be selected in the calendar</p>\n",
                    "line": 87,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "disabledDaysOfTheWeek",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines which days of the week to disable from the selection\n",
                    "description": "<p>defines which days of the week to disable from the selection</p>\n",
                    "line": 83,
                    "type": "Array<\"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\">",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the maximum selectable date\n",
                    "description": "<p>defines the maximum selectable date</p>\n",
                    "line": 79,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the minimum selectable date\n",
                    "description": "<p>defines the minimum selectable date</p>\n",
                    "line": 75,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minView",
                    "defaultValue": "'year'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the starting view\n",
                    "description": "<p>defines the starting view</p>\n",
                    "line": 91,
                    "type": "\"year\" | \"month\" | \"day\"",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placement",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines where to place the date selector in response to the input field\n",
                    "description": "<p>Defines where to place the date selector in response to the input field</p>\n",
                    "line": 118,
                    "type": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "returnISODate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines if the selected date must return in ISO ISO 8601 format\n",
                    "description": "<p>defines if the selected date must return in ISO ISO 8601 format</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showWeekNumbers",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines you want to see the week numbers in the selector\n",
                    "description": "<p>defines you want to see the week numbers in the selector</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the size of the input field following the bootstrap css rules\n",
                    "description": "<p>Define the size of the input field following the bootstrap css rules</p>\n",
                    "line": 122,
                    "type": "\"sm\" | \"lg\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 105,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>internal status disabled</p>\n",
                    "line": 155,
                    "rawdescription": "\n\ninternal status disabled\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 143,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 147,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 151,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "config",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<BsDatepickerConfig> | null",
                    "optional": false,
                    "description": "<p>Contains the component configurations</p>\n",
                    "line": 131,
                    "rawdescription": "\n\nContains the component configurations\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 181,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 159,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "line": 180,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 169,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 163,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5960,
                                "end": 5967,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5954,
                                "end": 5959,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n init locale\n chek hel message and create key\n",
                    "description": "<p> init locale\n chek hel message and create key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "dates",
                            "type": "Date[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmethod triggered when the date selection changes, it triggers the native events of the cva\n",
                    "description": "<p>method triggered when the date selection changes, it triggers the native events of the cva</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6537,
                                "end": 6542,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dates"
                            },
                            "type": "Date[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6531,
                                "end": 6536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the form is initialized it saves the data in the component state\n",
                    "description": "<p>When the form is initialized it saves the data in the component state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6928,
                                "end": 6933,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6922,
                                "end": 6927,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input date range component decorator</p>\n",
            "rawdescription": "\n\ninput date range component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef, Inject,\n  Input, LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { format } from 'date-fns'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { BsDatepickerConfig, BsLocaleService } from 'ngx-bootstrap/datepicker'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input date range component decorator\n */\n@Component({\n  selector: 'quang-input-date-range',\n  templateUrl: './input-date-range.component.html',\n  styles: []\n})\n/**\n * input date range component\n */\nexport class InputDateRangeComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * defines if the selected date must return in ISO ISO 8601 format\n   */\n  @Input() returnISODate: boolean = false\n  /**\n   * defines you want to see the week numbers in the selector\n   */\n  @Input() showWeekNumbers: boolean = false\n  /**\n   * defines the format of the return date\n   */\n  @Input() dateFormat: string = ''\n  /**\n   * defines the minimum selectable date\n   */\n  @Input() minDate: Date | null = null\n  /**\n   * defines the maximum selectable date\n   */\n  @Input() maxDate: Date | null = null\n  /**\n   * defines which days of the week to disable from the selection\n   */\n  @Input() disabledDaysOfTheWeek: Array<0 | 1 | 2 | 3 | 4 | 5 | 6> = []\n  /**\n   * the list of dates that cannot be selected in the calendar\n   */\n  @Input() disabledDates: Date[] = []\n  /**\n   * defines the starting view\n   */\n  @Input() minView: 'year' | 'month' | 'day' = 'year'\n\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Defines the class of the selector open button\n   */\n  @Input() buttonClass: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Adds css classes to the component\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines where to place the date selector in response to the input field\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'bottom'\n  /**\n   * Define the size of the input field following the bootstrap css rules\n   */\n  @Input() size: 'sm' | 'lg' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * Contains the component configurations\n   */\n  config: Partial<BsDatepickerConfig> | null = null\n  /**\n   * The value of the input\n   */\n  _value: any[] = []\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * internal status disabled\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param locale\n   * @param control cva access\n   * @param renderer html access\n   * @param localeService locale utility\n   */\n  constructor (\n    @Inject(LOCALE_ID) public locale: string,\n    @Self() @Optional() public control: NgControl,\n    private readonly renderer: Renderer2,\n    private readonly localeService: BsLocaleService\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   *  init locale\n   *  chek hel message and create key\n   */\n  ngOnInit (): void {\n    this.config = {\n      containerClass: 'theme-default',\n      isAnimated: true,\n      adaptivePosition: true,\n      dateInputFormat: this.dateFormat,\n      rangeInputFormat: this.dateFormat,\n      showWeekNumbers: this.showWeekNumbers\n    }\n    if (this.locale) {\n      this.localeService.use(this.locale)\n    }\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n    this.control.control?.markAsPristine()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * method triggered when the date selection changes, it triggers the native events of the cva\n   * @param dates\n   */\n  onChangedHandler (dates: Date[] | null): void {\n    this.onTouched()\n    if (this.returnISODate) {\n      this.onChanged(dates)\n    } else if (dates) {\n      const tmp = dates.map(d => format(d, 'yyyy-MM-dd'))\n      this.onChanged(tmp)\n    } else {\n      this.onChanged([])\n    }\n  }\n\n  /**\n   * When the form is initialized it saves the data in the component state\n   * @param value\n   */\n  writeValue (value: any): void {\n    if (value) {\n      if (!this.returnISODate && value?.length) {\n        this._value = value.map((d: any) => new Date(d))\n      } else {\n        this._value = value\n      }\n    } else {\n      this._value = []\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n    this._disabled = isDisabled\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (!this._value.length && this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 170,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4474,
                            "end": 4480,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "locale"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4468,
                            "end": 4473,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 4493,
                            "end": 4500,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4487,
                            "end": 4492,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4524,
                            "end": 4532,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4518,
                            "end": 4523,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4557,
                            "end": 4570,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "localeService"
                        },
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4551,
                            "end": 4556,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>locale utility</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label class=\"form-label\"\n         [htmlFor]=\"id\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <div class=\"input-group\"\n       [class.input-group-sm]=\"size === 'sm'\"\n       [class.input-group-lg]=\"size === 'lg'\">\n    <input type=\"text\"\n           class=\"form-control\"\n           bsDaterangepicker\n           #input\n           [id]=\"id\"\n           [placeholder]=\"placeholder | transloco\"\n           [minDate]=\"minDate\"\n           [maxDate]=\"maxDate\"\n           [ngClass]=\"customClass\"\n           [class.is-valid]=\"control.valid && successMessage\"\n           [class.is-invalid]=\"!_value?.length && control.invalid && control?.dirty && errorMessage\"\n           [bsConfig]=\"config\"\n           [isDisabled]=\"_disabled\"\n           [datesDisabled]=\"disabledDates\"\n           [autocomplete]=\"autocomplete\"\n           [attr.aria-label]=\"ariaLabel | transloco\"\n           [autofocus]=\"autofocus\"\n           [bsValue]=\"_value\"\n           [placement]=\"placement\"\n           (bsValueChange)=\"onChangedHandler($event)\"\n           (blur)=\"onTouched()\"\n           #drp=\"bsDaterangepicker\"\n    >\n    <div class=\"input-group-append\">\n      <button class=\"btn\"\n              [ngClass]=\"buttonClass\"\n              type=\"button\"\n              [ngStyle]=\"{'pointer-event': _disabled ? 'none' : null}\"\n              (click)=\"drp.toggle()\"\n      >\n        <ng-content select=\"[calendarIcon]\"></ng-content>\n      </button>\n    </div>\n\n    <div class=\"valid-feedback\">\n      {{_successMessage | transloco}}\n    </div>\n    <div class=\"invalid-feedback\"\n         [attr.aria-errormessage]=\"_errorMessage | transloco\">\n      {{_errorMessage | transloco}}\n    </div>\n  </div>\n  <small [id]=\"id + 'Help'\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (_value?.length && control.valid && successMessage || !_value?.length && control.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputDateTimeComponent",
            "id": "component-InputDateTimeComponent-b25345a5d98dbb69b09e2c70b7af86eae0f6368dd9531571cf15676e5aa2ad1abce2ba2f9c2eedb52851474b29e444e7474ef2702db499e6fd4ce34586346c9a",
            "file": "projects/quang-date/src/lib/input-date-time/input-date-time.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-date-time",
            "styleUrls": [
                "./input-date-time.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-date-time.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 124,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 154,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the class of the selector open button\n",
                    "description": "<p>Defines the class of the selector open button</p>\n",
                    "line": 128,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds css classes to the component\n",
                    "description": "<p>Adds css classes to the component</p>\n",
                    "line": 141,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the format of the return date\n",
                    "description": "<p>defines the format of the return date</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabledDates",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of dates that cannot be selected in the calendar\n",
                    "description": "<p>the list of dates that cannot be selected in the calendar</p>\n",
                    "line": 103,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "disabledDaysOfTheWeek",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines which days of the week to disable from the selection\n",
                    "description": "<p>defines which days of the week to disable from the selection</p>\n",
                    "line": 119,
                    "type": "Array<\"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\">",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 137,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hoursPlaceholder",
                    "defaultValue": "'hh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the hours input field\n",
                    "description": "<p>The placeholder of the hours input field</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hourStep",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe hour advance interval\n",
                    "description": "<p>the hour advance interval</p>\n",
                    "line": 107,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the maximum selectable date\n",
                    "description": "<p>defines the maximum selectable date</p>\n",
                    "line": 94,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the minimum selectable date\n",
                    "description": "<p>defines the minimum selectable date</p>\n",
                    "line": 90,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minutesPlaceholder",
                    "defaultValue": "'mm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the minutes input field\n",
                    "description": "<p>The placeholder of the minutes input field</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minuteStep",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe minute advance interval\n",
                    "description": "<p>the minute advance interval</p>\n",
                    "line": 111,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placement",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines where to place the date selector in response to the input field\n",
                    "description": "<p>Defines where to place the date selector in response to the input field</p>\n",
                    "line": 145,
                    "type": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "name": "secondsPlaceholder",
                    "defaultValue": "'ss'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the seconds input field\n",
                    "description": "<p>The placeholder of the seconds input field</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "secondStep",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe second advance interval\n",
                    "description": "<p>the second advance interval</p>\n",
                    "line": 115,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "showMeridianButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether to display the button to change the selection from 24h to 12h\n",
                    "description": "<p>defines whether to display the button to change the selection from 24h to 12h</p>\n",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSecond",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether to display the seconds input\n",
                    "description": "<p>defines whether to display the seconds input</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSelector",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether to display the chevrons for time selection\n",
                    "description": "<p>defines whether to display the chevrons for time selection</p>\n",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showWeekNumbers",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether to display the week number\n",
                    "description": "<p>defines whether to display the week number</p>\n",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine the size of the input field following the bootstrap css rules\n",
                    "description": "<p>Define the size of the input field following the bootstrap css rules</p>\n",
                    "line": 149,
                    "type": "\"sm\" | \"lg\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 132,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>internal status disabled</p>\n",
                    "line": 190,
                    "rawdescription": "\n\ninternal status disabled\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 178,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 182,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_margin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the top margin of the component</p>\n",
                    "line": 170,
                    "rawdescription": "\n\nthe top margin of the component\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 186,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 174,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_valueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>the internal state of the date</p>\n",
                    "line": 158,
                    "rawdescription": "\n\nthe internal state of the date\n"
                },
                {
                    "name": "_valueTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>the internal state of the time</p>\n",
                    "line": 162,
                    "rawdescription": "\n\nthe internal state of the time\n"
                },
                {
                    "name": "config",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<BsDatepickerConfig> | null",
                    "optional": false,
                    "description": "<p>Contains the component configurations</p>\n",
                    "line": 166,
                    "rawdescription": "\n\nContains the component configurations\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 221,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datePicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsDatepickerInlineDirective | undefined",
                    "optional": false,
                    "description": "<p>Dropdown selector html element ref</p>\n",
                    "line": 198,
                    "rawdescription": "\n\nDropdown selector html element ref\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drp', {static: true}"
                        }
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 194,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "actual locale",
                    "line": 222,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 208,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 202,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7181,
                                "end": 7188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7175,
                                "end": 7180,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchek style\ninit locale\ncheck help message and init key\n",
                    "description": "<p>chek style\ninit locale\ncheck help message and init key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent triggered when the date changes\n",
                    "description": "<p>event triggered when the date changes</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8225,
                                "end": 8229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8219,
                                "end": 8224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onChangedTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent triggered at the change of time\n",
                    "description": "<p>event triggered at the change of time</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8635,
                                "end": 8639,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8629,
                                "end": 8634,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the form is initialized it saves the data in the component state\n",
                    "description": "<p>When the form is initialized it saves the data in the component state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7723,
                                "end": 7728,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7717,
                                "end": 7722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input date time component decorator</p>\n",
            "rawdescription": "\n\ninput date time component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef, Inject,\n  Input, LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\n\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { BsDatepickerConfig, BsDatepickerInlineDirective, BsLocaleService } from 'ngx-bootstrap/datepicker'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input date time component decorator\n */\n@Component({\n  selector: 'quang-input-date-time',\n  templateUrl: './input-date-time.component.html',\n  styleUrls: ['./input-date-time.component.scss']\n})\n/**\n * input date time component\n */\nexport class InputDateTimeComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * The placeholder of the hours input field\n   */\n  @Input() hoursPlaceholder: string = 'hh'\n  /**\n   * The placeholder of the minutes input field\n   */\n  @Input() minutesPlaceholder: string = 'mm'\n  /**\n   * The placeholder of the seconds input field\n   */\n  @Input() secondsPlaceholder: string = 'ss'\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * defines the format of the return date\n   */\n  @Input() dateFormat: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * defines whether to display the seconds input\n   */\n  @Input() showSecond: boolean = false\n  /**\n   * defines whether to display the week number\n   */\n  @Input() showWeekNumbers: boolean = false\n  /**\n   * defines whether to display the chevrons for time selection\n   */\n  @Input() showSelector: boolean = false\n  /**\n   * defines whether to display the button to change the selection from 24h to 12h\n   */\n  @Input() showMeridianButton: boolean = false\n  /**\n   * defines the minimum selectable date\n   */\n  @Input() minDate: Date | null = null\n  /**\n   * defines the maximum selectable date\n   */\n  @Input() maxDate: Date | null = null\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * the list of dates that cannot be selected in the calendar\n   */\n  @Input() disabledDates: Date[] = []\n  /**\n   * the hour advance interval\n   */\n  @Input() hourStep: number | null = null\n  /**\n   * the minute advance interval\n   */\n  @Input() minuteStep: number | null = null\n  /**\n   * the second advance interval\n   */\n  @Input() secondStep: number | null = null\n  /**\n   * defines which days of the week to disable from the selection\n   */\n  @Input() disabledDaysOfTheWeek: Array<0 | 1 | 2 | 3 | 4 | 5 | 6> = []\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Defines the class of the selector open button\n   */\n  @Input() buttonClass: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Adds css classes to the component\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines where to place the date selector in response to the input field\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'bottom'\n  /**\n   * Define the size of the input field following the bootstrap css rules\n   */\n  @Input() size: 'sm' | 'lg' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * the internal state of the date\n   */\n  _valueDate: any\n  /**\n   * the internal state of the time\n   */\n  _valueTime: any\n  /**\n   * Contains the component configurations\n   */\n  config: Partial<BsDatepickerConfig> | null = null\n  /**\n   * the top margin of the component\n   */\n  _margin: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * internal status disabled\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | undefined\n  /**\n   * Dropdown selector html element ref\n   */\n  @ViewChild('drp', { static: true }) datePicker: BsDatepickerInlineDirective | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param localeService locale utility\n   * @param control cva access\n   * @param locale actual locale\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly localeService: BsLocaleService,\n    @Self() @Optional() public control: NgControl,\n    @Inject(LOCALE_ID) public locale: string\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * chek style\n   * init locale\n   * check help message and init key\n   */\n  ngOnInit (): void {\n    this.config = {\n      containerClass: 'theme-default',\n      isAnimated: true,\n      adaptivePosition: true,\n      dateInputFormat: this.dateFormat,\n      rangeInputFormat: this.dateFormat,\n      showWeekNumbers: this.showWeekNumbers\n    }\n    if (this.label) {\n      if (this.showSelector) {\n        this._margin = '.3rem'\n      } else {\n        this._margin = '2rem'\n      }\n    } else {\n      this._margin = '0'\n    }\n    if (this.locale) {\n      this.localeService.use(this.locale)\n    }\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n    this.control.control?.markAsPristine()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the form is initialized it saves the data in the component state\n   * @param value\n   */\n  writeValue (value: any): void {\n    this._valueTime = value\n    this._valueDate = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n    this._disabled = isDisabled\n  }\n\n  /**\n   * event triggered when the date changes\n   * @param date\n   */\n  onChangedDate (date: Date): void {\n    if (!date) {\n      this.onChanged(null)\n    } else if (date.toString() === 'Invalid Date') {\n      this.control.control?.setErrors({ invalidDate: true })\n      this.control.control?.markAsDirty()\n    } else {\n      this.onChanged(date)\n      this._valueTime = date\n    }\n    this.onTouched()\n  }\n\n  /**\n   * event triggered at the change of time\n   * @param date\n   */\n  onChangedTime (date: Event): void {\n    this.onTouched()\n    this._valueDate = date\n    this.onChanged(date)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".inputWrapper {\n  margin-bottom: 1rem;\n\n  .dateTimeWrapper {\n    display: flex;\n    flex-wrap: nowrap;\n    align-items: flex-start;\n    justify-content: flex-start;\n    flex-basis: 100%;\n\n    .form-group {\n      margin-bottom: 0;\n\n      &:nth-child(1) {\n        flex-basis: 100%;\n      }\n\n      &:nth-child(2) {\n        margin-left: 1rem;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./input-date-time.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 209,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5486,
                            "end": 5494,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5480,
                            "end": 5485,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5519,
                            "end": 5532,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "localeService"
                        },
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5513,
                            "end": 5518,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>locale utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5560,
                            "end": 5567,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5554,
                            "end": 5559,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5591,
                            "end": 5597,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "locale"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5585,
                            "end": 5590,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>actual locale</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"inputWrapper\">\n  <div class=\"dateTimeWrapper\">\n    <div class=\"mb-3\">\n      <label class=\"form-label\"\n             [htmlFor]=\"id\"\n             [attr.aria-label]=\"ariaLabel\"\n             *ngIf=\"label\">\n        {{label | transloco}}\n        <span [hidden]=\"!control?.errors?.required\">*</span>\n      </label>\n      <div class=\"input-group\"\n           [class.input-group-sm]=\"size === 'sm'\"\n           [class.input-group-lg]=\"size === 'lg'\">\n        <input type=\"text\" [id]=\"id\"\n               class=\"form-control\"\n               bsDatepicker\n               [placeholder]=\"placeholder | transloco\"\n               [ngClass]=\"customClass\"\n               [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n               [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n               [bsConfig]=\"config\"\n               [autofocus]=\"autofocus\"\n               [minDate]=\"minDate\"\n               [maxDate]=\"maxDate\"\n               [daysDisabled]=\"disabledDaysOfTheWeek\"\n               [datesDisabled]=\"disabledDates\"\n               [attr.aria-label]=\"ariaLabel + ' date'\"\n               [tabIndex]=\"tabIndex\"\n               [autocomplete]=\"autocomplete\"\n               [bsValue]=\"_valueDate\"\n               [disabled]=\"_disabled\"\n               [placement]=\"placement\"\n               (bsValueChange)=\"onChangedDate($event)\"\n               (blur)=\"onTouched()\"\n               #drp=\"bsDatepicker\"\n               #input\n        >\n        <div class=\"input-group-append\">\n          <button\n            class=\"btn\"\n            type=\"button\"\n            [ngClass]=\"buttonClass\"\n            (click)=\"_disabled ? null : drp.toggle()\"\n          >\n            <ng-content select=\"[calendarIcon]\"></ng-content>\n          </button>\n        </div>\n        <div class=\"valid-feedback\">\n          {{_successMessage | transloco}}\n        </div>\n\n        <div class=\"invalid-feedback\" [attr.aria-errormessage]=\"_errorMessage\">\n          {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n        </div>\n      </div>\n    </div>\n    <div class=\"mb-3\"\n         [ngStyle]=\"{'margin-top': _margin}\">\n      <timepicker\n        [id]=\"id\"\n        [ngClass]=\"customClass\"\n        [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n        [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n        [disabled]=\"_disabled\"\n        [min]=\"minDate\"\n        [max]=\"maxDate\"\n        [showSeconds]=\"showSecond\"\n        [hourStep]=\"hourStep\"\n        [minuteStep]=\"minuteStep\"\n        [secondsStep]=\"secondStep\"\n        [mousewheel]=\"true\"\n        [arrowkeys]=\"true\"\n        [showSpinners]=\"showSelector\"\n        [showMeridian]=\"showMeridianButton\"\n        [hoursPlaceholder]=\"hoursPlaceholder | transloco\"\n        [minutesPlaceholder]=\"minutesPlaceholder | transloco\"\n        [secondsPlaceholder]=\"secondsPlaceholder | transloco\"\n        [ngModel]=\"_valueTime\"\n        [attr.aria-label]=\"ariaLabel + ' time' | transloco\"\n        [tabIndex]=\"tabIndex + 1\"\n        (ngModelChange)=\"onChangedTime($event)\"\n        (blur)=\"onTouched()\"\n      ></timepicker>\n    </div>\n  </div>\n\n  <small [id]=\"id + 'Help'\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputEmailComponent",
            "id": "component-InputEmailComponent-3579d21f8b0c4c0f5fb6234c395b6772565b0d9a9f89818c7a83e553f972a1eba07274a7715d69e220beff34f5d6bd987223af918f705c3bac1bd067666fab73",
            "file": "projects/quang-core/src/lib/input-email/input-email.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-email",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-email.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 104,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 86,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 94,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field can accept multiple value\n",
                    "description": "<p>Defines whether the input field can accept multiple value</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern of the input field\n",
                    "description": "<p>Defines the validation pattern of the input field</p>\n",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 99,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 77,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 154,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 134,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 144,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 138,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4610,
                                "end": 4617,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4604,
                                "end": 4609,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5216,
                                "end": 5217,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5210,
                                "end": 5215,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5472,
                                "end": 5477,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5466,
                                "end": 5471,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input email component decorator</p>\n",
            "rawdescription": "\n\ninput email component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input email component decorator\n */\n@Component({\n  selector: 'quang-input-email',\n  templateUrl: './input-email.component.html',\n  styles: []\n})\n/**\n * input email component\n */\nexport class InputEmailComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Defines whether the input field can accept multiple value\n   */\n  @Input() multiple: boolean = false\n  /**\n   * Defines the validation pattern of the input field\n   */\n  @Input() pattern: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: string): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (error === 'minlength' || error === 'maxlength') {\n            this._requiredValue = this.control.errors[error].requiredLength\n          } else {\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 145,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3656,
                            "end": 3664,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3650,
                            "end": 3655,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3689,
                            "end": 3696,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3683,
                            "end": 3688,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input type=\"email\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco\"\n         [readOnly]=\"readonly\"\n         [multiple]=\"multiple\"\n         [pattern]=\"pattern\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [maxLength]=\"max\"\n         [minLength]=\"min\"\n         #input\n         [autocomplete]=\"autocomplete\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control.valid && successMessage || control.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputFileComponent",
            "id": "component-InputFileComponent-6668d14bb50cc08164b205f5f64b7f50f1794f891a7b0c36b901c013a32b737b462b3402ed3bde553b4ce10cb5ca127b8e238425c8c424fba9c078a0f605dd03",
            "file": "projects/quang-core/src/lib/input-file/input-file.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-file",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-file.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe classes that define the style of the button for selecting the file\n",
                    "description": "<p>The classes that define the style of the button for selecting the file</p>\n",
                    "line": 75,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "buttonLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display in the button for file selection\n",
                    "description": "<p>The label to display in the button for file selection</p>\n",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 79,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field can accept multiple value\n",
                    "description": "<p>Defines whether the input field can accept multiple value</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "whenDragLeave",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent that emits when the file in drag state is dropped on the input field\n",
                    "description": "<p>Event that emits when the file in drag state is dropped on the input field</p>\n",
                    "line": 87,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "whenDragOver",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent that emits when the file being dragged is above the input field\n",
                    "description": "<p>Event that emits when the file being dragged is above the input field</p>\n",
                    "line": 83,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dropMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the drop message</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nthe status of the drop message\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 115,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 107,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 99,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "_values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "<p>The value of the input with multiple selection</p>\n",
                    "line": 103,
                    "rawdescription": "\n\nThe value of the input with multiple selection\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 143,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgxFileDropComponent | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 91,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: false}"
                        }
                    ]
                },
                {
                    "name": "inputBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement> | undefined",
                    "optional": false,
                    "description": "<p>The html button of selection</p>\n",
                    "line": 95,
                    "rawdescription": "\n\nThe html button of selection\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputBtn', {static: false}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 127,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDelete the file, change the input status and start the cva flow\n",
                    "description": "<p>Delete the file, change the input status and start the cva flow</p>\n"
                },
                {
                    "name": "deleteFiles",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDelete the file list, change the input status and start the cva flow\n",
                    "description": "<p>Delete the file list, change the input status and start the cva flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6424,
                                "end": 6429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6418,
                                "end": 6423,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fileLeave",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the file is dropped into the input field during a drag action, it emits an event\n",
                    "description": "<p>When the file is dropped into the input field during a drag action, it emits an event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7644,
                                "end": 7645,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7638,
                                "end": 7643,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fileOver",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the file during a drag action and above the input field emits an event\n",
                    "description": "<p>When the file during a drag action and above the input field emits an event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7464,
                                "end": 7465,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7458,
                                "end": 7463,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the key for the help and drop message\n",
                    "description": "<p>Create the key for the help and drop message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "files",
                            "type": "NgxFileDropEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes value,\nit extracts the data of the selected file and starts the flow of the cva\n",
                    "description": "<p>When the input field changes value,\nit extracts the data of the selected file and starts the flow of the cva</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4733,
                                "end": 4738,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "files"
                            },
                            "type": "NgxFileDropEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4727,
                                "end": 4732,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "File | File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\ncheck if the value is a list or not and decide which state to initialize\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states\ncheck if the value is a list or not and decide which state to initialize</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5541,
                                "end": 5546,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "File | File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5535,
                                "end": 5540,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input file component decorator</p>\n",
            "rawdescription": "\n\ninput file component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  Self,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\nimport { FileSystemFileEntry, NgxFileDropComponent, NgxFileDropEntry } from 'ngx-file-drop'\n\n/**\n * input file component decorator\n */\n@Component({\n  selector: 'quang-input-file',\n  templateUrl: './input-file.component.html',\n  styles: []\n})\n/**\n * input file component\n */\nexport class InputFileComponent implements ControlValueAccessor, OnInit, AfterViewInit {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * The label to display in the button for file selection\n   */\n  @Input() buttonLabel: string = ''\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines whether the input field can accept multiple value\n   */\n  @Input() multiple: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The classes that define the style of the button for selecting the file\n   */\n  @Input() buttonClass: string[] = []\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Event that emits when the file being dragged is above the input field\n   */\n  @Output() whenDragOver: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * Event that emits when the file in drag state is dropped on the input field\n   */\n  @Output() whenDragLeave: EventEmitter<any> = new EventEmitter<any>()\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: false }) input: NgxFileDropComponent | undefined\n  /**\n   * The html button of selection\n   */\n  @ViewChild('inputBtn', { static: false }) inputBtn: ElementRef<HTMLButtonElement> | undefined\n  /**\n   * The value of the input\n   */\n  _value: File | null = null\n  /**\n   * The value of the input with multiple selection\n   */\n  _values: File[] = []\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * the status of the drop message\n   */\n  _dropMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Create the key for the help and drop message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n    this._dropMessage = `${this.formName}.${this.control?.name}.drop`\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    this.observeValidate()\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input field changes value,\n   * it extracts the data of the selected file and starts the flow of the cva\n   * @param files\n   */\n  onChangedHandler (files: NgxFileDropEntry[]): void {\n    if (this.multiple) {\n      this._values = []\n    } else {\n      this._value = null\n    }\n    files.forEach(f => {\n      if (f.fileEntry.isFile) {\n        const fileEntry = f.fileEntry as FileSystemFileEntry\n        fileEntry.file((file: File) => {\n          if (this.multiple) {\n            this._values = [...this._values, file]\n            this.onTouched()\n            this.onChanged(this._values)\n          } else {\n            this._value = file\n            this.onTouched()\n            this.onChanged(this._value)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * check if the value is a list or not and decide which state to initialize\n   * @param value\n   */\n  writeValue (value: File | File []): void {\n    if (this.multiple) {\n      if (value) {\n        this._values = value as File[]\n      } else {\n        this._values = []\n      }\n    } else {\n      this._value = value as File\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    if (this.input) this.input.disabled = isDisabled\n    this.renderer.setProperty(this.inputBtn?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * Delete the file, change the input status and start the cva flow\n   */\n  deleteFile (): void {\n    this._value = null\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Delete the file list, change the input status and start the cva flow\n   * @param index\n   */\n  deleteFiles (index: number): void {\n    this._values = this._values.splice(index, 1)\n    this.onTouched()\n    this.onChanged(this._values)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (this.control.errors[error]) {\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n        }\n      }\n    })\n  }\n\n  /**\n   * When the file during a drag action and above the input field emits an event\n   * @param e\n   */\n  fileOver (e: any): void {\n    this.whenDragOver.emit(e)\n  }\n\n  /**\n   * When the file is dropped into the input field during a drag action, it emits an event\n   * @param e\n   */\n  fileLeave (e: any): void {\n    this.whenDragLeave.emit(e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 134,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3498,
                            "end": 3506,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3492,
                            "end": 3497,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3531,
                            "end": 3538,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3525,
                            "end": 3530,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\" [ngClass]=\"customClass\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <ngx-file-drop [dropZoneLabel]=\"_dropMessage | transloco\"\n                 (onFileDrop)=\"onChangedHandler($event)\"\n                 (onFileOver)=\"fileOver($event)\"\n                 (onFileLeave)=\"fileLeave($event)\"\n                 [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n                 [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n                 (blur)=\"onTouched()\"\n                 [multiple]=\"multiple\"\n                 #input>\n    <ng-template ngx-file-drop-content-tmp\n                 let-openFileSelector=\"openFileSelector\">\n      <ng-content select=\"[uploadIcon]\"></ng-content>\n      <p *ngFor=\"let f of _values;  let i = index\">\n        <button class=\"btn btn-link btn-sm\"\n                (click)=\"deleteFiles(i)\">&times;</button>\n        {{f.name}}\n      </p>\n      <p  [hidden]=\"!_value\">\n        <button class=\"btn btn-link btn-sm\"\n                (click)=\"deleteFile()\">&times;</button>\n        {{_value?.name}}\n      </p>\n      <button type=\"button\"\n              [ngClass]=\"buttonClass\"\n              (click)=\"openFileSelector()\"\n              #inputBtn>\n        {{buttonLabel | transloco}}\n      </button>\n    </ng-template>\n  </ngx-file-drop>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputFractionComponent",
            "id": "component-InputFractionComponent-b4747cf4e172d33ccbe0d00a022094f80e2770ea5ae13d36db06bf664c100ecacb7a9b518936e960ac1f0c9828835ae3a601228cb4e3d8b25f4a687b153a1378",
            "file": "projects/quang-core/src/lib/input-fraction/input-fraction.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-fraction",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-fraction.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addButtonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe classes that define the style of the add button\n",
                    "description": "<p>The classes that define the style of the add button</p>\n",
                    "line": 86,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 109,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 99,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 95,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum value of the input field\n",
                    "description": "<p>Defines the maximum value of the input field</p>\n",
                    "line": 82,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum value of the input field\n",
                    "description": "<p>Defines the minimum value of the input field</p>\n",
                    "line": 78,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removeButtonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe classes that define the style of the remove button\n",
                    "description": "<p>The classes that define the style of the remove button</p>\n",
                    "line": 90,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 104,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "stepFraction",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe jump to be made when the fractional part of the fraction is increased\n",
                    "description": "<p>the jump to be made when the fractional part of the fraction is increased</p>\n",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "stepInteger",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe jump to be made when the whole part of the fraction is increased\n",
                    "description": "<p>the jump to be made when the whole part of the fraction is increased</p>\n",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 74,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>the status of the disabled</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nthe status of the disabled\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 156,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputFraction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputFraction', {static: true}"
                        }
                    ]
                },
                {
                    "name": "inputInteger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 146,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputInteger', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 143,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 137,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addFraction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered by the add decimal button,\nvalidates the status and starts the flow of the cva\n",
                    "description": "<p>Event triggered by the add decimal button,\nvalidates the status and starts the flow of the cva</p>\n"
                },
                {
                    "name": "addInteger",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered by the add integer button,\nvalidates the status and starts the flow of the cva\n",
                    "description": "<p>Event triggered by the add integer button,\nvalidates the status and starts the flow of the cva</p>\n"
                },
                {
                    "name": "checkMaxMin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4896,
                                "end": 4903,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4890,
                                "end": 4895,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFraction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered by the add integer button,\nvalidates the status and starts the flow of the cva\n",
                    "description": "<p>Event triggered by the add integer button,\nvalidates the status and starts the flow of the cva</p>\n"
                },
                {
                    "name": "removeInteger",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered by the remove integer button,\nvalidates the status and starts the flow of the cva\n",
                    "description": "<p>Event triggered by the remove integer button,\nvalidates the status and starts the flow of the cva</p>\n"
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the input values to display the fraction\n",
                    "description": "<p>Set the input values to display the fraction</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5470,
                                "end": 5475,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5464,
                                "end": 5469,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "writeValueFraction",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the decimal part of the fraction\n",
                    "description": "<p>Calculate the decimal part of the fraction</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6520,
                                "end": 6521,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6514,
                                "end": 6519,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "writeValueInteger",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the integer part of the fraction\n",
                    "description": "<p>Calculate the integer part of the fraction</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6223,
                                "end": 6224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6217,
                                "end": 6222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input fraction component decorator</p>\n",
            "rawdescription": "\n\ninput fraction component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input fraction component decorator\n */\n@Component({\n  selector: 'quang-input-fraction',\n  templateUrl: './input-fraction.component.html',\n  styles: []\n})\n/**\n * input fraction component\n */\nexport class InputFractionComponent implements OnInit, ControlValueAccessor, AfterViewInit, OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * the jump to be made when the whole part of the fraction is increased\n   */\n  @Input() stepInteger: number = 1\n  /**\n   * the jump to be made when the fractional part of the fraction is increased\n   */\n  @Input() stepFraction: number = 1\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines the minimum value of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum value of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * The classes that define the style of the add button\n   */\n  @Input() addButtonClass: string[] = []\n  /**\n   * The classes that define the style of the remove button\n   */\n  @Input() removeButtonClass: string[] = []\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * The value of the input\n   */\n  _value: number | null = null\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * the status of the disabled\n   */\n  _disabled: boolean = false\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  @ViewChild('inputInteger', { static: true }) inputInteger: ElementRef<HTMLInputElement> | undefined\n  @ViewChild('inputFraction', { static: true }) inputFraction: ElementRef<HTMLInputElement> | undefined\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.inputInteger?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.inputInteger) {\n      this.inputInteger.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: number): void {\n    if (!value) {\n      this._value = 0\n    } else {\n      this._value = value\n    }\n    this.setInput()\n  }\n\n  /**\n   * Set the input values to display the fraction\n   */\n  setInput (): void {\n    this.renderer.setProperty(this.inputInteger?.nativeElement,\n      'value',\n      Math\n        .floor((this._value))\n        .toString())\n    this.renderer.setProperty(this.inputFraction?.nativeElement,\n      'value',\n      ((this._value) - Math\n        .floor((this._value)))\n        .toFixed(3)\n        .replace('0.', ''))\n  }\n\n  checkMaxMin (): void {\n    this.setDisabledState((this._value) > this.max && (this._value) >= this.min)\n  }\n\n  /**\n   * Calculate the integer part of the fraction\n   * @param e\n   */\n  writeValueInteger (e: Event): void {\n    (this._value) -= Math.floor(this._value);\n    (this._value) += Math.floor(parseInt((e.target as HTMLInputElement).value))\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Calculate the decimal part of the fraction\n   * @param e\n   */\n  writeValueFraction (e: Event): void {\n    (this._value) -= Math.floor(this._value % 1);\n    (this._value) += parseFloat(`0.${(e.target as HTMLInputElement).value}`)\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Event triggered by the add integer button,\n   * validates the status and starts the flow of the cva\n   */\n  addInteger (): void {\n    if ((this._value) < this.max && (this._value) >= this.min) {\n      (this._value) += this.stepInteger\n    }\n    this.setInput()\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Event triggered by the add decimal button,\n   * validates the status and starts the flow of the cva\n   */\n  addFraction (): void {\n    if ((this._value) < this.max && (this._value) >= this.min) {\n      const tmp = (this._value) += this.stepFraction\n      this._value = parseFloat((tmp.toFixed(3)))\n    }\n    this.setInput()\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Event triggered by the remove integer button,\n   * validates the status and starts the flow of the cva\n   */\n  removeInteger (): void {\n    if ((this._value) <= this.max && (this._value) > this.min) {\n      (this._value) -= this.stepInteger\n    }\n    this.setInput()\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Event triggered by the add integer button,\n   * validates the status and starts the flow of the cva\n   */\n  removeFraction (): void {\n    if ((this._value) <= this.max && (this._value) > this.min) {\n      const tmp = (this._value) -= this.stepFraction\n      this._value = parseFloat((tmp.toFixed(3)))\n    }\n    this.setInput()\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.inputInteger?.nativeElement, 'disabled', isDisabled)\n    this.renderer.setProperty(this.inputFraction?.nativeElement, 'disabled', isDisabled)\n    this._disabled = isDisabled\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (Object.prototype.hasOwnProperty.call(this.control.errors.error, '')) {\n            if (this.control.errors[error]) {\n              this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n              this._requiredValue = this.control.errors[error].requiredValue\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 147,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3935,
                            "end": 3943,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3929,
                            "end": 3934,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3968,
                            "end": 3975,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3962,
                            "end": 3967,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <div class=\"input-group\">\n    <div class=\"input-group-prepend\">\n      <button type=\"button\"\n              [ngClass]=\"addButtonClass\"\n              (click)=\"addInteger()\"\n              [disabled]=\"_disabled || readonly\">\n        <ng-content select=\"[addIntegerIcon]\"></ng-content>\n      </button>\n    </div>\n    <input type=\"text\"\n           class=\"form-control text-right\"\n           [id]=\"id + 'dec'\"\n           [step]=\"stepInteger\"\n           [readOnly]=\"readonly\"\n           [attr.aria-label]=\"ariaLabel | transloco\"\n           [tabIndex]=\"tabIndex\"\n           [ngClass]=\"customClass\"\n           [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n           [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n           (input)=\"writeValueInteger($event)\"\n           (blur)=\"onTouched()\"\n           [autocomplete]=\"autocomplete\"\n           [attr.aria-disabled]=\"_disabled\"\n           [attr.aria-autocomplete]=\"autocomplete\"\n           [attr.aria-readonly]=\"readonly\"\n           [attr.aria-describedby]=\"id + '-help'\"\n           [attr.aria-errormessage]=\"id + '-error'\"\n           [attr.aria-invalid]=\"control.invalid\"\n           #inputInteger>\n    <div class=\"input-group-append\">\n      <button type=\"button\"\n              [ngClass]=\"removeButtonClass\"\n              (click)=\"removeInteger()\"\n              [disabled]=\"_disabled || readonly\">\n        <ng-content select=\"[removeIntegerIcon]\"></ng-content>\n      </button>\n    </div>\n    <div class=\"input-group-append\">\n      <span class=\"input-group-text\">,</span>\n    </div>\n    <div class=\"input-group-append\">\n      <button type=\"button\"\n              [ngClass]=\"addButtonClass\"\n              (click)=\"addFraction()\"\n              [disabled]=\"_disabled || readonly\">\n        <ng-content select=\"[addFractionIcon]\"></ng-content>\n      </button>\n    </div>\n    <input type=\"text\"\n           class=\"form-control\"\n           [id]=\"id + 'int'\"\n           [step]=\"stepFraction\"\n           [attr.aria-label]=\"ariaLabel | transloco\"\n           [readOnly]=\"readonly\"\n           [ngClass]=\"customClass\"\n           [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n           [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n           (input)=\"writeValueFraction($event)\"\n           (blur)=\"onTouched()\"\n           [autocomplete]=\"autocomplete\"\n           [attr.aria-disabled]=\"_disabled\"\n           [attr.aria-autocomplete]=\"autocomplete\"\n           [attr.aria-readonly]=\"readonly\"\n           [attr.aria-describedby]=\"id + '-help'\"\n           [attr.aria-errormessage]=\"id + '-error'\"\n           [attr.aria-invalid]=\"control.invalid\"\n           #inputFraction\n    >\n    <div class=\"input-group-append\">\n      <button type=\"button\"\n              [ngClass]=\"removeButtonClass\"\n              (click)=\"removeFraction()\"\n              [disabled]=\"_disabled || readonly\">\n        <ng-content select=\"[removeFractionIcon]\"></ng-content>\n      </button>\n    </div>\n    <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n      {{_successMessage | transloco}}\n    </div>\n    <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n      {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n    </div>\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputNumberComponent",
            "id": "component-InputNumberComponent-851f07ffe61ea728831d3714d2a75d7cbd87738f82edf34a06b64d47fb37268da129cf31f275802cf7b014a4c994f6ce84ed56cc79273242e1cbb9c40a26beed",
            "file": "projects/quang-core/src/lib/input-number/input-number.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-number",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-number.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 106,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 96,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum value of the input field\n",
                    "description": "<p>Defines the maximum value of the input field</p>\n",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum value of the input field\n",
                    "description": "<p>Defines the minimum value of the input field</p>\n",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern of the input field\n",
                    "description": "<p>Defines the validation pattern of the input field</p>\n",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 101,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt defines the advancement or reduction steps of the input field\nbetween one number and the next selected by the user\n",
                    "description": "<p>It defines the advancement or reduction steps of the input field\nbetween one number and the next selected by the user</p>\n",
                    "line": 87,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 82,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 130,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 126,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 151,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 134,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 142,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 138,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nStart the check on the validation of the field\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nStart the check on the validation of the field</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\n",
                    "description": "<p>Checks if focus is required when displaying the input field.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4617,
                                "end": 4624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4611,
                                "end": 4616,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5223,
                                "end": 5224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5217,
                                "end": 5222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input number component decorator</p>\n",
            "rawdescription": "\n\ninput number component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input number component decorator\n */\n@Component({\n  selector: 'quang-input-number',\n  templateUrl: './input-number.component.html',\n  styles: []\n})\n/**\n * input number component\n */\nexport class InputNumberComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines the minimum value of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum value of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Defines the validation pattern of the input field\n   */\n  @Input() pattern: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * It defines the advancement or reduction steps of the input field\n   * between one number and the next selected by the user\n   */\n  @Input() step: number = 1\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * The value of the input\n   */\n  _value: number | null = null\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {}\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {}\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * Start the check on the validation of the field\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).valueAsNumber\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: number): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (error === 'min' || error === 'max') {\n            this._requiredValue = this.control.errors[error][error]\n          } else {\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 142,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3717,
                            "end": 3725,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3711,
                            "end": 3716,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3750,
                            "end": 3757,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3744,
                            "end": 3749,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span></label>\n  <input type=\"number\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [max]=\"max\"\n         [min]=\"min\"\n         [pattern]=\"pattern\"\n         [readOnly]=\"readonly\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         [step]=\"step\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [autocomplete]=\"autocomplete\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputPasswordComponent",
            "id": "component-InputPasswordComponent-7595f49972a615743595d226b333a235d2345b52b170368b43d9587eadd9d0bf72c614deea59c9f1b740efab00fd6a3b17b426a4da31db3401d445def201cc7c",
            "file": "projects/quang-core/src/lib/input-password/input-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'new-password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 109,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe classes that define the style of the button for password visualization\n",
                    "description": "<p>The classes that define the style of the button for password visualization</p>\n",
                    "line": 60,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 56,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 99,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 64,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern of the input field\n",
                    "description": "<p>Defines the validation pattern of the input field</p>\n",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 104,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 94,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "viewPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the display of the input can be activated with the ability to see the password\n",
                    "description": "<p>Defines whether the display of the input can be activated with the ability to see the password</p>\n",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>the status of disabled</p>\n",
                    "line": 137,
                    "rawdescription": "\n\nthe status of disabled\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_type",
                    "defaultValue": "'password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Defines the type of input</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nDefines the type of input\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 158,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 141,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 149,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 145,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4863,
                                "end": 4870,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4857,
                                "end": 4862,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5469,
                                "end": 5470,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5463,
                                "end": 5468,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the type of input when you want to view the password\n",
                    "description": "<p>Change the type of input when you want to view the password</p>\n"
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input password component decorator</p>\n",
            "rawdescription": "\n\ninput password component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input password component decorator\n */\n@Component({\n  selector: 'quang-input-password',\n  templateUrl: './input-password.component.html',\n  styles: []\n})\n/**\n * input password component\n */\nexport class InputPasswordComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * The classes that define the style of the button for password visualization\n   */\n  @Input() buttonClass: string[] = []\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Defines the validation pattern of the input field\n   */\n  @Input() pattern: string = ''\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Defines whether the display of the input can be activated with the ability to see the password\n   */\n  @Input() viewPassword: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'new-password'\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Defines the type of input\n   */\n  _type = 'password'\n  /**\n   * the status of disabled\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {}\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {}\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: string): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * Change the type of input when you want to view the password\n   */\n  toggleType (): void {\n    if (this._type === 'password') {\n      this._type = 'text'\n    } else {\n      this._type = 'password'\n    }\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (error === 'minlength' || error === 'maxlength') {\n            this._requiredValue = this.control.errors[error].requiredLength\n          } else {\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 149,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3909,
                            "end": 3917,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3903,
                            "end": 3908,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3942,
                            "end": 3949,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3936,
                            "end": 3941,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <div class=\"input-group\">\n    <input [type]=\"_type\"\n           class=\"form-control\"\n           [id]=\"id\"\n           [placeholder]=\"placeholder | transloco\"\n           [maxLength]=\"max\"\n           [minLength]=\"min\"\n           [pattern]=\"pattern\"\n           [readOnly]=\"readonly\"\n           [attr.aria-label]=\"ariaLabel | transloco\"\n           [tabIndex]=\"tabIndex\"\n           [ngClass]=\"customClass\"\n           [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n           [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n           (input)=\"onChangedHandler($event)\"\n           (blur)=\"onTouched()\"\n           [autocomplete]=\"autocomplete\"\n           [class.form-control-lg]=\"size === 'lg'\"\n           [class.form-control-sm]=\"size === 'sm'\"\n           #input\n    >\n    <div class=\"input-group-append\"\n         [hidden]=\"!viewPassword\">\n      <button class=\"btn\"\n              type=\"button\"\n              [ngClass]=\"buttonClass\"\n              [id]=\"'button-addon' + id\"\n              [disabled]=\"_disabled\"\n              (click)=\"toggleType()\">\n        <span [hidden]=\"_type === 'text'\">\n          <ng-content select=\"[iconView]\"></ng-content>\n        </span>\n        <span [hidden]=\"_type === 'password'\">\n        <ng-content select=\"[iconHide]\"></ng-content>\n        </span>\n      </button>\n    </div>\n    <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n      {{_successMessage | transloco}}\n    </div>\n    <div class=\"invalid-feedback\"\n         aria-live=\"polite\"\n         [id]=\"id + '-error'\">\n      {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n    </div>\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control.valid && successMessage || control.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n"
        },
        {
            "name": "InputRadioComponent",
            "id": "component-InputRadioComponent-ec842534ddd047c084367f9b9b106d650c8492fe51df9e94b9bd40ecbf0e9ab17af0dce4548b71c07adfd65c2d1093cac3d807647b463d9b43e17571f9838dc8",
            "file": "projects/quang-core/src/lib/input-radio/input-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-radio",
            "styleUrls": [
                "./input-radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 97,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 92,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groupName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe name of the radio button group\n",
                    "description": "<p>the name of the radio button group</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the radio should align with the other radios next to it\n",
                    "description": "<p>Defines whether the radio should align with the other radios next to it</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the key of the value that will be used as the label for the input\n",
                    "description": "<p>Defines the key of the value that will be used as the label for the input</p>\n",
                    "line": 84,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "radioList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of objects representing the radio fields\n",
                    "description": "<p>The list of objects representing the radio fields</p>\n",
                    "line": 49,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "returnValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the key of the value that will be returned as the value of the input\n",
                    "description": "<p>Defines the key of the value that will be returned as the value of the input</p>\n",
                    "line": 88,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 63,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 143,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef<HTMLInputElement>> | null",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 127,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4492,
                                "end": 4499,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4486,
                                "end": 4491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5106,
                                "end": 5107,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5100,
                                "end": 5105,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input radio component decorator</p>\n",
            "rawdescription": "\n\ninput radio component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  QueryList,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input radio component decorator\n */\n@Component({\n  selector: 'quang-input-radio',\n  templateUrl: './input-radio.component.html',\n  styleUrls: ['./input-radio.component.scss']\n})\n/**\n * input radio component\n */\nexport class InputRadioComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit {\n  /**\n   * the name of the radio button group\n   */\n  @Input() groupName: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Defines whether the radio should align with the other radios next to it\n   */\n  @Input() inline: boolean = false\n  /**\n   * The list of objects representing the radio fields\n   */\n  @Input() radioList: any[] = []\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines the key of the value that will be used as the label for the input\n   */\n  @Input() labelValue: string | null = null\n  /**\n   * Defines the key of the value that will be returned as the value of the input\n   */\n  @Input() returnValue: string | null = null\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string | number = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  @ViewChildren('input') input: QueryList<ElementRef<HTMLInputElement>> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.forEach((item) => {\n          item.nativeElement.focus()\n        })\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.get(0)?.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: string | number): void {\n    this._value = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    setTimeout(() => {\n      this.input?.forEach((item) => {\n        this.renderer.setProperty(item.nativeElement, 'disabled', isDisabled)\n      })\n    }, 0)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          this._requiredValue = this.control.errors[error].requiredValue\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom-radio {\n  .custom-control-label::after{\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./input-radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 134,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3471,
                            "end": 3479,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3465,
                            "end": 3470,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3504,
                            "end": 3511,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3498,
                            "end": 3503,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <div class=\"form-check\"\n       [class.form-check-inline]=\"inline\"\n       *ngFor=\"let radio of radioList; let index = index;\">\n    <input type=\"radio\"\n           role=\"radio\"\n           [attr.aria-labelledby]=\"label | transloco\"\n           [attr.aria-checked]=\"_value === radio[returnValue]\"\n           class=\"form-check-input\"\n           [name]=\"groupName\"\n           [id]=\"id + radio[labelValue]\"\n           [tabIndex]=\"tabIndex + index\"\n           [ngClass]=\"customClass\"\n           [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n           [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n           [value]=\"radio[returnValue]\"\n           [checked]=\"radio[returnValue] === _value\"\n           (input)=\"onChangedHandler($event)\"\n           (blur)=\"onTouched()\"\n           [autocomplete]=\"autocomplete\"\n           [attr.aria-disabled]=\"_disabled\"\n           [attr.aria-autocomplete]=\"autocomplete\"\n           [attr.aria-describedby]=\"id + '-help'\"\n           [attr.aria-errormessage]=\"id + '-error'\"\n           [attr.aria-invalid]=\"control.invalid\"\n           #input>\n    <label class=\"form-check-label\"\n           [attr.aria-label]=\"ariaLabel | transloco\"\n           [htmlFor]=\"id + radio[labelValue]\">\n      {{radio[labelValue] |transloco}}\n    </label>\n  </div>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\"\n       [ngStyle]=\"{display: control?.valid && control?.dirty && successMessage ? 'block' : 'none'}\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\"\n       [ngStyle]=\"{display: control?.invalid && control?.dirty && errorMessage ? 'block': 'none'}\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         [attr.aria-describedby]=\"id\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control.valid && successMessage || control.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n\n"
        },
        {
            "name": "InputSearchComponent",
            "id": "component-InputSearchComponent-2d13a73c0fd09c5427a3b7639d49a6a971ae32c33661af8a0c0bdcdebe9e7bf17e393dd8b531a602f1afb5791bdfde700c6b3852150bdf711b34c92efc435098",
            "file": "projects/quang-core/src/lib/input-search/input-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-search",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 91,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 70,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 66,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern of the input field\n",
                    "description": "<p>Defines the validation pattern of the input field</p>\n",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 96,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 87,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 150,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 141,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nStart the check on the validation of the field\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nStart the check on the validation of the field</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\n",
                    "description": "<p>Checks if focus is required when displaying the input field.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4448,
                                "end": 4455,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4442,
                                "end": 4447,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5054,
                                "end": 5055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5048,
                                "end": 5053,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input search component decorator</p>\n",
            "rawdescription": "\n\ninput search component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input search component decorator\n */\n@Component({\n  selector: 'quang-input-search',\n  templateUrl: './input-search.component.html',\n  styles: []\n})\n/**\n * input search component\n */\nexport class InputSearchComponent implements ControlValueAccessor, AfterViewInit, OnChanges, OnInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Defines the validation pattern of the input field\n   */\n  @Input() pattern: string = ''\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | undefined\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * Start the check on the validation of the field\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (Object.prototype.hasOwnProperty.call(this.control.errors.error, '')) {\n            if (this.control.errors[error]) {\n              this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n              if (error === 'minlength' || error === 'maxlength') {\n                this._requiredValue = this.control.errors[error].requiredLength\n              } else {\n                this._requiredValue = this.control.errors[error].requiredValue\n              }\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 141,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3548,
                            "end": 3556,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3542,
                            "end": 3547,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3581,
                            "end": 3588,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3575,
                            "end": 3580,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input type=\"search\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [maxLength]=\"max\"\n         [minLength]=\"min\"\n         [pattern]=\"pattern\"\n         [readOnly]=\"readonly\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         [autocomplete]=\"autocomplete\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n\n"
        },
        {
            "name": "InputTelComponent",
            "id": "component-InputTelComponent-fa29f9b78f1ee29f8e498176dd2b3cc20d837559bd61becf0d4369f7688a26981d588addb61935493f96396c738a4216098303fd4cad5f45603f793a2b90e736",
            "file": "projects/quang-core/src/lib/input-tel/input-tel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-tel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-tel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 108,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 90,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a disabled state\n",
                    "description": "<p>Defines whether the input field is in a disabled state</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the maximum length of the input field\n",
                    "description": "<p>defines the maximum length of the input field</p>\n",
                    "line": 98,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the minimum length of the input field\n",
                    "description": "<p>defines the minimum length of the input field</p>\n",
                    "line": 94,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field can accept multiple value\n",
                    "description": "<p>Defines whether the input field can accept multiple value</p>\n",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "'[0-9]{4}-[0-9]{6}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern that the input must accept\n",
                    "description": "<p>Defines the validation pattern that the input must accept</p>\n",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 103,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 81,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 158,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 138,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 148,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 142,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4690,
                                "end": 4697,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4684,
                                "end": 4689,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes its value, it saves the state of the field and activates the CVA flow\n",
                    "description": "<p>When the input field changes its value, it saves the state of the field and activates the CVA flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5275,
                                "end": 5276,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5269,
                                "end": 5274,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5531,
                                "end": 5536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5525,
                                "end": 5530,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input tel component decorator</p>\n",
            "rawdescription": "\n\ninput tel component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input tel component decorator\n */\n@Component({\n  selector: 'quang-input-tel',\n  templateUrl: './input-tel.component.html',\n  styles: []\n})\n/**\n * input tel component\n */\nexport class InputTelComponent implements OnInit, OnChanges, AfterViewInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Defines whether the input field is in a disabled state\n   */\n  @Input() disabled: boolean = false\n  /**\n   * Defines whether the input field can accept multiple value\n   */\n  @Input() multiple: boolean = false\n  /**\n   * Defines the validation pattern that the input must accept\n   */\n  @Input() pattern: string = '[0-9]{4}-[0-9]{6}'\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input field changes its value, it saves the state of the field and activates the CVA flow\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: string): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (error === 'minlength' || error === 'maxlength') {\n            this._requiredValue = this.control.errors[error].requiredLength\n          } else {\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 149,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3736,
                            "end": 3744,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3730,
                            "end": 3735,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3769,
                            "end": 3776,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3763,
                            "end": 3768,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input type=\"tel\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco\"\n         [readOnly]=\"readonly\"\n         [multiple]=\"multiple\"\n         [pattern]=\"pattern\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [maxLength]=\"max\"\n         [minLength]=\"min\"\n         [autocomplete]=\"autocomplete\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control.valid && successMessage || control.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n"
        },
        {
            "name": "InputTextComponent",
            "id": "component-InputTextComponent-b804892f740f56b9141ffb611e5eac438069a28ca20535b43a5e40e33975b6d37375145df42eb160572c124ccdac2c5bcd54f2d992b47bf585a437505d8488a1",
            "file": "projects/quang-core/src/lib/input-text/input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 54,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 84,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 80,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern of the input field\n",
                    "description": "<p>Defines the validation pattern of the input field</p>\n",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 102,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 126,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 148,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nStart the check on the validation of the field\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nStart the check on the validation of the field</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\n",
                    "description": "<p>Checks if focus is required when displaying the input field.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4445,
                                "end": 4452,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4439,
                                "end": 4444,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5051,
                                "end": 5052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5045,
                                "end": 5050,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input text component decorator</p>\n",
            "rawdescription": "\n\ninput text component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input text component decorator\n */\n@Component({\n  selector: 'quang-input-text',\n  templateUrl: './input-text.component.html',\n  styles: [],\n})\n/**\n * input text component\n */\nexport class InputTextComponent implements ControlValueAccessor, AfterViewInit, OnChanges, OnInit {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines the validation pattern of the input field\n   */\n  @Input() pattern: string = ''\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched(){}\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged(value: string){}\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * Start the check on the validation of the field\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: string): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n    this._disabled = isDisabled\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            if (error === 'minlength' || error === 'maxlength') {\n              this._requiredValue = this.control.errors[error].requiredLength\n            } else {\n              this._requiredValue = this.control.errors[error].requiredValue\n            }\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 139,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3524,
                            "end": 3532,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3518,
                            "end": 3523,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3557,
                            "end": 3564,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3551,
                            "end": 3556,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input type=\"text\"\n         class=\"form-control\"\n         #input\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco \"\n         [maxLength]=\"max\"\n         [minLength]=\"min\"\n         [pattern]=\"pattern\"\n         [readOnly]=\"readonly\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [autocomplete]=\"autocomplete\"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [tabIndex]=\"tabIndex\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control?.invalid\"\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco }}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         [attr.aria-hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "InputTimeComponent",
            "id": "component-InputTimeComponent-cbdb06410c45009c0c6023117d6003417c69a8e2c42aa4785a8f4a22e0568162a9ef919092f783f607634bdbc3ff4c5d49864f6bdf31437bebe04d3e57494fdb",
            "file": "projects/quang-date/src/lib/input-time/input-time.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-time",
            "styleUrls": [
                "./input-time.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-time.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 91,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds css classes to the component\n",
                    "description": "<p>Adds css classes to the component</p>\n",
                    "line": 99,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hoursPlaceholder",
                    "defaultValue": "'hh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the hours input field\n",
                    "description": "<p>The placeholder of the hours input field</p>\n",
                    "line": 103,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hourStep",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe hour advance interval\n",
                    "description": "<p>the hour advance interval</p>\n",
                    "line": 77,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxTime",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the maximum selectable date\n",
                    "description": "<p>defines the maximum selectable date</p>\n",
                    "line": 65,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minTime",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines the minimum selectable date\n",
                    "description": "<p>defines the minimum selectable date</p>\n",
                    "line": 61,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minutesPlaceholder",
                    "defaultValue": "'mm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the minutes input field\n",
                    "description": "<p>The placeholder of the minutes input field</p>\n",
                    "line": 107,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minuteStep",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe minute advance interval\n",
                    "description": "<p>the minute advance interval</p>\n",
                    "line": 81,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "secondsPlaceholder",
                    "defaultValue": "'ss'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the seconds input field\n",
                    "description": "<p>The placeholder of the seconds input field</p>\n",
                    "line": 111,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "secondStep",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe second advance interval\n",
                    "description": "<p>the second advance interval</p>\n",
                    "line": 85,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "showMeridianButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether to display the button that allows you to enter the hours in 24h or 12h format\n",
                    "description": "<p>Defines whether to display the button that allows you to enter the hours in 24h or 12h format</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSecond",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether to display the seconds input\n",
                    "description": "<p>defines whether to display the seconds input</p>\n",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSelector",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether to display the chevrons for time selection\n",
                    "description": "<p>defines whether to display the chevrons for time selection</p>\n",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 95,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>internal status disabled</p>\n",
                    "line": 135,
                    "rawdescription": "\n\ninternal status disabled\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 127,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 131,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 115,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 163,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsTimepickerViewComponent | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "actual locale",
                    "line": 162,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 149,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 143,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit locale\nchek help message and init the key\n",
                    "description": "<p>init locale\nchek help message and init the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent triggered when the time changes\n",
                    "description": "<p>event triggered when the time changes</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5025,
                                "end": 5029,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "date"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5019,
                                "end": 5024,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the form is initialized it saves the data in the component state\n",
                    "description": "<p>When the form is initialized it saves the data in the component state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5219,
                                "end": 5224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5213,
                                "end": 5218,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input time component decorator</p>\n",
            "rawdescription": "\n\ninput time component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  Inject,\n  Input, LOCALE_ID,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { BsLocaleService } from 'ngx-bootstrap/datepicker'\nimport { delay, filter } from 'rxjs/operators'\nimport { BsTimepickerViewComponent } from 'ngx-bootstrap/datepicker/themes/bs/bs-timepicker-view.component'\n\n/**\n * input time component decorator\n */\n@Component({\n  selector: 'quang-input-time',\n  templateUrl: './input-time.component.html',\n  styleUrls: ['./input-time.component.scss']\n})\n/**\n * input time component\n */\nexport class InputTimeComponent implements ControlValueAccessor, AfterViewInit, OnInit {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines whether to display the button that allows you to enter the hours in 24h or 12h format\n   */\n  @Input() showMeridianButton: boolean = false\n  /**\n   * defines the minimum selectable date\n   */\n  @Input() minTime: Date | null = null\n  /**\n   * defines the maximum selectable date\n   */\n  @Input() maxTime: Date | null = null\n  /**\n   * defines whether to display the chevrons for time selection\n   */\n  @Input() showSelector: boolean = false\n  /**\n   * defines whether to display the seconds input\n   */\n  @Input() showSecond: boolean = false\n  /**\n   * the hour advance interval\n   */\n  @Input() hourStep: number | null = null\n  /**\n   * the minute advance interval\n   */\n  @Input() minuteStep: number | null = null\n  /**\n   * the second advance interval\n   */\n  @Input() secondStep: number | null = null\n\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Adds css classes to the component\n   */\n  @Input() customClass: string[] = []\n  /**\n   * The placeholder of the hours input field\n   */\n  @Input() hoursPlaceholder: string = 'hh'\n  /**\n   * The placeholder of the minutes input field\n   */\n  @Input() minutesPlaceholder: string = 'mm'\n  /**\n   * The placeholder of the seconds input field\n   */\n  @Input() secondsPlaceholder: string = 'ss'\n  /**\n   * The value of the input\n   */\n  _value: any\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * internal status disabled\n   */\n  _disabled: boolean = false\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: BsTimepickerViewComponent | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param localeService locale utility\n   * @param locale actual locale\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly localeService: BsLocaleService,\n    @Inject(LOCALE_ID) public locale: string,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * init locale\n   * chek help message and init the key\n   */\n  ngOnInit (): void {\n    if (this.locale) {\n      this.localeService.use(this.locale)\n    }\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    this.observeValidate()\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * event triggered when the time changes\n   * @param date\n   */\n  onChangedHandler (date: any): void {\n    this.onTouched()\n    this.onChanged(date)\n  }\n\n  /**\n   * When the form is initialized it saves the data in the component state\n   * @param value\n   */\n  writeValue (value: any): void {\n    this._value = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.valid && this.successMessage) {\n        this._successMessage = `${this.formName}.${this.control?.name}.valid`\n      }\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          this._requiredValue = this.control.errors[error].requiredValue\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "timepicker {\n  &.is-valid {\n    & + .valid-feedback {\n      display: block;\n    }\n  }\n\n  &.is-invalid {\n    & + .valid-feedback {\n      & + .invalid-feedback {\n        display: block;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./input-time.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 150,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3798,
                            "end": 3806,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3792,
                            "end": 3797,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3831,
                            "end": 3844,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "localeService"
                        },
                        "type": "BsLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3825,
                            "end": 3830,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>locale utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3872,
                            "end": 3878,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "locale"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3866,
                            "end": 3871,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>actual locale</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3905,
                            "end": 3912,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3899,
                            "end": 3904,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label class=\"form-label\"\n         [htmlFor]=\"id\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <timepicker\n    [accessKey]=\"true\"\n    [mousewheel]=\"true\"\n    [id]=\"id\"\n    [ngModel]=\"_value\"\n    [min]=\"minTime\"\n    [max]=\"maxTime\"\n    [showSeconds]=\"showSecond\"\n    [hourStep]=\"hourStep\"\n    [minuteStep]=\"minuteStep\"\n    [secondsStep]=\"secondStep\"\n    [showSpinners]=\"showSelector\"\n    [showMeridian]=\"showMeridianButton\"\n    [ngClass]=\"customClass\"\n    [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n    [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n    [attr.aria-label]=\"ariaLabel | transloco\"\n    [tabIndex]=\"tabIndex\"\n    [hoursPlaceholder]=\"hoursPlaceholder | transloco\"\n    [minutesPlaceholder]=\"minutesPlaceholder | transloco\"\n    [secondsPlaceholder]=\"secondsPlaceholder | transloco\"\n    [disabled]=\"_disabled\"\n    (ngModelChange)=\"onChangedHandler($event)\"\n    (blur)=\"onTouched()\"\n    #input\n  ></timepicker>\n  <small [id]=\"id + 'Help'\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n  <div class=\"valid-feedback\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       [attr.aria-errormessage]=\"_errorMessage | transloco\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n</div>\n"
        },
        {
            "name": "InputUrlComponent",
            "id": "component-InputUrlComponent-e13ad5ec1d7035f41c555eb358edf801234c7ffa03f01a6afcb45588d6f8e462845d4ffcda6017034aeca96c45d4fba9f522050812d566fed8cc60abff1621d0",
            "file": "projects/quang-core/src/lib/input-url/input-url.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-input-url",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-url.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in\n",
                    "description": "<p>Defines the autocomplete tag to indicate to the browser what type of field it is\nand how to help the user fill it in</p>\n",
                    "line": 100,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 40,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the validation pattern that the input must accept\n",
                    "description": "<p>Defines the validation pattern that the input must accept</p>\n",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 95,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Define disabled state</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nDefine disabled state\n"
                },
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 150,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 141,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4452,
                                "end": 4459,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4446,
                                "end": 4451,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes its value, it saves the state of the field and activates the CVA flow\n",
                    "description": "<p>When the input field changes its value, it saves the state of the field and activates the CVA flow</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5037,
                                "end": 5038,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5031,
                                "end": 5036,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the CVA is initialized as control it initializes the internal states\n",
                    "description": "<p>When the CVA is initialized as control it initializes the internal states</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5293,
                                "end": 5298,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5287,
                                "end": 5292,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>input url component decorator</p>\n",
            "rawdescription": "\n\ninput url component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * input url component decorator\n */\n@Component({\n  selector: 'quang-input-url',\n  templateUrl: './input-url.component.html',\n  styles: []\n})\n/**\n * input url component\n */\nexport class InputUrlComponent implements OnInit, OnChanges, AfterViewInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Defines the validation pattern that the input must accept\n   */\n  @Input() pattern: string = ''\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines the autocomplete tag to indicate to the browser what type of field it is\n   * and how to help the user fill it in\n   */\n  @Input() autocomplete: string = 'off'\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Define disabled state\n   */\n  _disabled: boolean = false\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLInputElement> | null = null\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input field changes its value, it saves the state of the field and activates the CVA flow\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * When the CVA is initialized as control it initializes the internal states\n   * @param value\n   */\n  writeValue (value: string): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this._disabled = isDisabled\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe((v) => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (error === 'minlength' || error === 'maxlength') {\n            this._requiredValue = this.control.errors[error].requiredLength\n          } else {\n            this._requiredValue = this.control.errors[error].requiredValue\n          }\n          this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 141,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3498,
                            "end": 3506,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3492,
                            "end": 3497,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3531,
                            "end": 3538,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3525,
                            "end": 3530,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <input type=\"url\"\n         class=\"form-control\"\n         [id]=\"id\"\n         [placeholder]=\"placeholder | transloco \"\n         [ngClass]=\"customClass\"\n         [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n         [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n         [maxLength]=\"max\"\n         [minLength]=\"min\"\n         [pattern]=\"pattern\"\n         [readOnly]=\"readonly\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         [tabIndex]=\"tabIndex\"\n         (input)=\"onChangedHandler($event)\"\n         (blur)=\"onTouched()\"\n         [autocomplete]=\"autocomplete\"\n         [class.form-control-lg]=\"size === 'lg'\"\n         [class.form-control-sm]=\"size === 'sm'\"\n         [attr.aria-disabled]=\"_disabled\"\n         [attr.aria-autocomplete]=\"autocomplete\"\n         [attr.aria-placeholder]=\"placeholder | transloco\"\n         [attr.aria-readonly]=\"readonly\"\n         [attr.aria-describedby]=\"id + '-help'\"\n         [attr.aria-errormessage]=\"id + '-error'\"\n         [attr.aria-invalid]=\"control.invalid\"\n         #input\n  >\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco }}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-4c9da23d2b986354144d86f444593995d96dbfc4c58642891e2daa62760d28644c61ed7234bb09f130960da9a2b98113a8c19cdf39743726994ff4753bc88b69",
            "file": "projects/quang-dialog/src/lib/loader/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-loader",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeLoader",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>counter for active call</p>\n",
                    "line": 34,
                    "rawdescription": "\n\ncounter for active call\n"
                },
                {
                    "name": "configModule",
                    "defaultValue": "new QuangDialogConfig(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangDialogConfig",
                    "optional": false,
                    "description": "<p>wrapper for module configuration</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nwrapper for module configuration\n"
                },
                {
                    "name": "loader",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement> | null",
                    "optional": false,
                    "description": "<p>loader html element</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nloader html element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'loader'"
                        }
                    ]
                },
                {
                    "name": "loader$",
                    "defaultValue": "this.store.select(LoaderSelectors.selectLoader)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>observable for loader state</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nobservable for loader state\n"
                },
                {
                    "name": "loaderSubscription$",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>loader subscription</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nloader subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit observer\n",
                    "description": "<p>init observer</p>\n"
                },
                {
                    "name": "observeLoader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nif we are in a development environment it traces the changes in the loader state\n",
                    "description": "<p>if we are in a development environment it traces the changes in the loader state</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>loader component decorator</p>\n",
            "rawdescription": "\n\nloader component decorator\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core'\nimport { Observable, Subscription } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { QuangDialogConfig } from '../../quang-dialog.config'\nimport { QuangDialogStateModule } from '../../quang-dialog.reducers'\nimport { LoaderSelectors } from '../loader-store/selectors'\n/**\n * loader component decorator\n */\n@Component({\n  selector: 'quang-loader',\n  templateUrl: './loader.component.html',\n  styles: ['']\n})\n/**\n * loader component\n */\nexport class LoaderComponent implements OnInit, OnDestroy {\n  /**\n   * loader html element\n   */\n  @ViewChild('loader') loader: ElementRef<HTMLDivElement> | null = null\n  /**\n   * loader subscription\n   */\n  loaderSubscription$: Subscription = new Subscription()\n  /**\n   * observable for loader state\n   */\n  loader$: Observable<any> = this.store.select(LoaderSelectors.selectLoader)\n  /**\n   * counter for active call\n   */\n  activeLoader: number = 0\n  /**\n   * wrapper for module configuration\n   */\n  configModule: QuangDialogConfig = new QuangDialogConfig(false)\n\n  /**\n   * constructor\n   * @param store store access\n   * @param config module config\n   */\n  constructor (\n    private readonly store: Store<QuangDialogStateModule>,\n    @Optional() config?: QuangDialogConfig\n  ) {\n    this.configModule = config\n  }\n\n  /**\n   * init observer\n   */\n  ngOnInit (): void {\n    this.observeLoader()\n  }\n\n  /**\n   * if we are in a development environment it traces the changes in the loader state\n   */\n  observeLoader (): void {\n    if (!this.configModule?.production) {\n      this.loaderSubscription$ = this.loader$.subscribe((loaderNumber) => {\n        this.activeLoader = loaderNumber\n      })\n    }\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    if (this.loaderSubscription$) {\n      this.loaderSubscription$.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "QuangDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 38,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1140,
                            "end": 1145,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1134,
                            "end": 1139,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1171,
                            "end": 1177,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "config"
                        },
                        "type": "QuangDialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 1165,
                            "end": 1170,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>module config</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div\n  class=\"loader-wrapper\"\n  #loader\n  [hidden]=\"(loader$ | async) === 0\">\n  <ng-content\n    select=\"[loader]\"\n    class=\"loader\"\n  ></ng-content>\n</div>\n"
        },
        {
            "name": "MultiSelectObjComponent",
            "id": "component-MultiSelectObjComponent-679cef817376bdead021b045eb5af13351d1d70859e55c26bd6eb8ca17498fa951f0829b642b971594fe58ed53f338e7f6d5ed2bd064cc72bee238d8422b249e",
            "file": "projects/quang-core/src/lib/multi-select-obj/multi-select-obj.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-multi-select-obj",
            "styleUrls": [
                "./multi-select-obj.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select-obj.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 95,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe key of the label that the input field visualize\n",
                    "description": "<p>The key of the label that the input field visualize</p>\n",
                    "line": 70,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of selectable options\n",
                    "description": "<p>the list of selectable options</p>\n",
                    "line": 62,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "nullOption",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether the user can select the blank field\n",
                    "description": "<p>defines whether the user can select the blank field</p>\n",
                    "line": 91,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "returnValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe key of the value that the input field returns\n",
                    "description": "<p>The key of the value that the input field returns</p>\n",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rowVisible",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNumber of visible options\n",
                    "description": "<p>Number of visible options</p>\n",
                    "line": 78,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 100,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 82,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "translateValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if the option labels are to be translated\n",
                    "description": "<p>Defines if the option labels are to be translated</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 112,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 116,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 120,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 108,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 146,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSelectElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 136,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 130,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef<HTMLOptionElement>> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4587,
                                "end": 4594,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4581,
                                "end": 4586,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5193,
                                "end": 5194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5187,
                                "end": 5192,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>multi elect object component decorator</p>\n",
            "rawdescription": "\n\nmulti elect object component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional, QueryList,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild, ViewChildren\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * multi elect object component decorator\n */\n@Component({\n  selector: 'quang-multi-select-obj',\n  templateUrl: './multi-select-obj.component.html',\n  styleUrls: ['./multi-select-obj.component.scss']\n})\n/**\n * multi elect object component\n */\nexport class MultiSelectObjComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * the list of selectable options\n   */\n  @Input() list: Array<{ [key: string]: any }> = []\n  /**\n   * Defines if the option labels are to be translated\n   */\n  @Input() translateValue: boolean = false\n  /**\n   * The key of the label that the input field visualize\n   */\n  @Input() labelValue: string | null = null\n  /**\n   * The key of the value that the input field returns\n   */\n  @Input() returnValue: string = ''\n  /**\n   * Number of visible options\n   */\n  @Input() rowVisible: number = 0\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * defines whether the user can select the blank field\n   */\n  @Input() nullOption: boolean = true\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * The value of the input\n   */\n  _value: string[] = []\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLSelectElement> | undefined\n  @ViewChildren('options') options: QueryList<ElementRef<HTMLOptionElement>> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    if (this.options) {\n      this._value = this.options\n        .filter(o => o.nativeElement.selected)\n        .map(o => this.list[o.nativeElement.index - 1][this.returnValue])\n    }\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            this._requiredValue = this.control.errors[error].requiredValue\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-control {\n  &.is-valid,\n  &.is-invalid {\n    background-position: center right calc(0.375em + 1rem);\n  }\n}\n",
                    "styleUrl": "./multi-select-obj.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 137,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3612,
                            "end": 3620,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3606,
                            "end": 3611,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3645,
                            "end": 3652,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3639,
                            "end": 3644,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <select class=\"form-select\"\n          multiple\n          [size]=\"rowVisible\"\n          [id]=\"id\"\n          [ngClass]=\"customClass\"\n          [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n          [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n          [attr.aria-label]=\"ariaLabel | transloco\"\n          (input)=\"onChangedHandler($event)\"\n          (blur)=\"onTouched()\"\n          [class.form-select-lg]=\"size === 'lg'\"\n          [class.form-select-sm]=\"size === 'sm'\"\n          [tabIndex]=\"tabIndex\"\n          #input\n  >\n    <option [ngValue]=\"null\"\n            *ngIf=\"nullOption\"></option>\n    <option *ngFor=\"let item of list\"\n            [value]=\"item[returnValue]\"\n            [selected]=\"_value?.includes(item[returnValue])\"\n            #options\n    >\n      {{translateValue ? (item[labelValue] | transloco) : item[labelValue] }}\n    </option>\n  </select>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "MultiSelectStrgComponent",
            "id": "component-MultiSelectStrgComponent-c03c821817502e316bca55a89be9239e0a400164dfaebafddf4ef9bb25f438bba33a90c159cb29bbc99f1a908c758632884118845eca9be9caf6b70718345c72",
            "file": "projects/quang-core/src/lib/multi-select-strg/multi-select-strg.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-multi-select-strg",
            "styleUrls": [
                "./multi-select-strg.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select-strg.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 81,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe list of selectable options\n",
                    "description": "<p>the list of selectable options</p>\n",
                    "line": 64,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "nullOption",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether the user can select the blank field\n",
                    "description": "<p>defines whether the user can select the blank field</p>\n",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rowVisible",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNumber of visible options\n",
                    "description": "<p>Number of visible options</p>\n",
                    "line": 60,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 86,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "translateValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if the option labels are to be translated\n",
                    "description": "<p>Defines if the option labels are to be translated</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 102,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 98,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 135,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSelectElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef<HTMLOptionElement>> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4356,
                                "end": 4363,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4350,
                                "end": 4355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4962,
                                "end": 4963,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4956,
                                "end": 4961,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>multi select string component decorator</p>\n",
            "rawdescription": "\n\nmulti select string component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, OnChanges, OnInit,\n  Optional, QueryList,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild, ViewChildren\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * multi select string component decorator\n */\n@Component({\n  selector: 'quang-multi-select-strg',\n  templateUrl: './multi-select-strg.component.html',\n  styleUrls: ['./multi-select-strg.component.scss']\n})\n/**\n * multi select string component\n */\nexport class MultiSelectStrgComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Number of visible options\n   */\n  @Input() rowVisible: number = 0\n  /**\n   * the list of selectable options\n   */\n  @Input() list: Array<string> = []\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * defines whether the user can select the blank field\n   */\n  @Input() nullOption: boolean = true\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n  /**\n   * Defines if the option labels are to be translated\n   */\n  @Input() translateValue: boolean = false\n  /**\n   * The value of the input\n   */\n  _value: string[] = []\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLSelectElement> | undefined\n  @ViewChildren('options') options: QueryList<ElementRef<HTMLOptionElement>> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    if (this.options) {\n      this._value = this.options\n        .filter(o => o.nativeElement.selected)\n        .map(o => o.nativeElement.value)\n    }\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            this._requiredValue = this.control.errors[error].requiredValue\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-control {\n  &.is-valid,\n  &.is-invalid {\n    background-position: center right calc(0.375em + 1rem);\n  }\n}\n",
                    "styleUrl": "./multi-select-strg.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 126,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3381,
                            "end": 3389,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3375,
                            "end": 3380,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3414,
                            "end": 3421,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3408,
                            "end": 3413,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <select class=\"form-select\"\n          multiple\n          [size]=\"rowVisible\"\n          [id]=\"id\"\n          [autofocus]=\"autofocus\"\n          [ngClass]=\"customClass\"\n          [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n          [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n          [attr.aria-label]=\"ariaLabel | transloco\"\n          (input)=\"onChangedHandler($event)\"\n          (blur)=\"onTouched()\"\n          [class.form-select-lg]=\"size === 'lg'\"\n          [class.form-select-sm]=\"size === 'sm'\"\n          [tabIndex]=\"tabIndex\"\n          #input\n  >\n    <option [ngValue]=\"null\"\n            *ngIf=\"nullOption\"></option>\n    <option *ngFor=\"let item of list\"\n            [value]=\"item\"\n            [selected]=\"_value?.includes(item)\"\n            #options\n    >\n      {{translateValue ? (item | transloco) : item }}\n    </option>\n  </select>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n\n\n</div>\n"
        },
        {
            "name": "OpenStreetMapComponent",
            "id": "component-OpenStreetMapComponent-a19c3fa74f5b9522fc1fdbbbe73e2a9b63116c2464ea6d35c519138df4b792503b720d22268af23b7311720e4f571d68ffbcfaa16c8c54bc78d4bfe7b7e62fde",
            "file": "projects/quang-map/src/lib/osmap/osmap.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-osmap",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./osmap.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe label that describes the accessibility component\n",
                    "description": "<p>the label that describes the accessibility component</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultCenter",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCenter of the starting map\n",
                    "description": "<p>Center of the starting map</p>\n",
                    "line": 59,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "defaultZoom",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitial zoom level\n",
                    "description": "<p>Initial zoom level</p>\n",
                    "line": 47,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enableClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable the click on the map\n",
                    "description": "<p>Enable the click on the map</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the map\n",
                    "description": "<p>the height of the map</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxZoom",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMaximum zoom level\n",
                    "description": "<p>Maximum zoom level</p>\n",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minZoom",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMinimum zoom level\n",
                    "description": "<p>Minimum zoom level</p>\n",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nindex within the navigation flow by tab\n",
                    "description": "<p>index within the navigation flow by tab</p>\n",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_map",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map | null",
                    "optional": false,
                    "description": "<p>the map variable</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nthe map variable\n"
                },
                {
                    "name": "_tile",
                    "defaultValue": "new Tile({\n    source: new OSM()\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>map tile</p>\n",
                    "line": 75,
                    "rawdescription": "\n\nmap tile\n"
                },
                {
                    "name": "mapDiv",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement> | null",
                    "optional": false,
                    "description": "<p>The html element in which the map will be created</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nThe html element in which the map will be created\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'map', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the map and add the listener for the events\n",
                    "description": "<p>Create the map and add the listener for the events</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the map\n",
                    "description": "<p>Create the map</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the center of defualt changes it generates a new map\nWhen the default zoom changes it generates a new map\n",
                    "description": "<p>When the center of defualt changes it generates a new map\nWhen the default zoom changes it generates a new map</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2110,
                                "end": 2117,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2104,
                                "end": 2109,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>open street map component decorator</p>\n",
            "rawdescription": "\n\nopen street map component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport { Tile } from 'ol/layer'\nimport { OSM } from 'ol/source'\nimport * as olProj from 'ol/proj'\n\n/**\n * open street map component decorator\n */\n@Component({\n  selector: 'quang-osmap',\n  templateUrl: './osmap.component.html',\n  styles: ['']\n})\n/**\n * open street map component\n */\nexport class OpenStreetMapComponent implements OnChanges, AfterViewInit {\n  /**\n   * the height of the map\n   */\n  @Input() height: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * index within the navigation flow by tab\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * the label that describes the accessibility component\n   */\n  @Input() ariaLabel: string = ''\n  /**\n   * Initial zoom level\n   */\n  @Input() defaultZoom: number = 0\n  /**\n   * Minimum zoom level\n   */\n  @Input() minZoom: number = 0\n  /**\n   * Maximum zoom level\n   */\n  @Input() maxZoom: number = 20\n  /**\n   * Center of the starting map\n   */\n  @Input() defaultCenter: number[] = []\n  /**\n   * Enable the click on the map\n   */\n  @Input() enableClick: boolean = false\n  /**\n   * The html element in which the map will be created\n   */\n  @ViewChild('map', { static: false }) mapDiv: ElementRef<HTMLDivElement> | null = null\n  /**\n   * the map variable\n   */\n  _map: Map | null = null\n  /**\n   * map tile\n   */\n  _tile = new Tile({\n    source: new OSM()\n  })\n\n  /**\n   * Create the map\n   */\n  ngAfterViewInit (): void {\n    this.createMap()\n  }\n\n  /**\n   * Create the map and add the listener for the events\n   */\n  createMap (): void {\n    this._map = new Map({\n      target: this.id,\n      layers: [this._tile],\n      view: new View({\n        center: olProj.fromLonLat(this.defaultCenter),\n        zoom: this.defaultZoom,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom\n      })\n    })\n  }\n\n  /**\n   * When the center of defualt changes it generates a new map\n   * When the default zoom changes it generates a new map\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.defaultCenter?.currentValue) {\n      this.createMap()\n    }\n    if (changes.defaultZoom?.currentValue) {\n      this.createMap()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div [id]=\"id\"\n     [ngStyle]=\"{'height': height}\"\n></div>\n\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-70e31737528b0b50b3a1e3b0b3766863fde1c6d2c32fe3b215a216f82c89fe32f9230ab85d26586916b7a02321df8f11a63da0454216dee9cff19b0f0dff1d5e",
            "file": "projects/quang-core/src/lib/paginator/paginator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-paginator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Paginator ${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 31,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPage index\n",
                    "description": "<p>Page index</p>\n",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPage size\n",
                    "description": "<p>Page size</p>\n",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "sizeList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList of selectable page sizes\n",
                    "description": "<p>List of selectable page sizes</p>\n",
                    "line": 48,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTotal number of records\n",
                    "description": "<p>Total number of records</p>\n",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "whenPageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRaises an event when the page index changes\n",
                    "description": "<p>Raises an event when the page index changes</p>\n",
                    "line": 60,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "whenSizeChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRaises an event when the page size changes\n",
                    "description": "<p>Raises an event when the page size changes</p>\n",
                    "line": 64,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_length",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Size of the list</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nSize of the list\n"
                },
                {
                    "name": "_pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Page index state</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nPage index state\n"
                },
                {
                    "name": "_pageSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>page size state</p>\n",
                    "line": 84,
                    "rawdescription": "\n\npage size state\n"
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSelectElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator | undefined",
                    "optional": false,
                    "description": "<p>mat paginator html element</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nmat paginator html element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'quangPaginator', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goToFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the first page of the pager\n",
                    "description": "<p>Go to the first page of the pager</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the inputs change, it constricts the internal states of the component and updates the properties of the pager if necessary\n",
                    "description": "<p>When the inputs change, it constricts the internal states of the component and updates the properties of the pager if necessary</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2245,
                                "end": 2252,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2239,
                                "end": 2244,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "onChangePage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the page index changes, it saves the state and issues the event\n",
                    "description": "<p>When the page index changes, it saves the state and issues the event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3214,
                                "end": 3219,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onChangeSize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the page size changes, it saves the state and issues the event\n",
                    "description": "<p>When the page size changes, it saves the state and issues the event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3505,
                                "end": 3510,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3499,
                                "end": 3504,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>paginator component decorator</p>\n",
            "rawdescription": "\n\npaginator component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component, ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output, Renderer2,\n  SimpleChanges, ViewChild\n} from '@angular/core'\nimport { MatPaginator } from '@angular/material/paginator'\n/**\n * paginator component decorator\n */\n@Component({\n  selector: 'quang-paginator',\n  templateUrl: './paginator.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * paginator component\n */\nexport class PaginatorComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Total number of records\n   */\n  @Input() totalItems: number = 0\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Paginator ${this.id}`\n  /**\n   * List of selectable page sizes\n   */\n  @Input() sizeList: number[] = []\n  /**\n   * Page size\n   */\n  @Input() pageSize: number = 0\n  /**\n   * Page index\n   */\n  @Input() pageIndex: number = 0\n  /**\n   * Raises an event when the page index changes\n   */\n  @Output() whenPageChange: EventEmitter<number> = new EventEmitter<number>()\n  /**\n   * Raises an event when the page size changes\n   */\n  @Output() whenSizeChange: EventEmitter<number> = new EventEmitter<number>()\n  /**\n   * mat paginator html element\n   */\n  @ViewChild('quangPaginator', { static: true }) paginator: MatPaginator|undefined\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLSelectElement>|undefined\n  /**\n   * Size of the list\n   */\n  _length: number = 0\n  /**\n   * Page index state\n   */\n  _pageIndex: number = 0\n  /**\n   * page size state\n   */\n  _pageSize: number = 0\n\n  /**\n   * constructor\n   * @param renderer html access\n   */\n  constructor (\n    private readonly renderer: Renderer2\n  ) {}\n\n  /**\n   * When the inputs change, it constricts the internal states of the component and updates the properties of the pager if necessary\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.totalItems?.currentValue && this.paginator) {\n      this._length = changes.totalItems?.currentValue\n      this.paginator.length = changes.totalItems?.currentValue\n    }\n    if (changes.pageIndex && this.paginator) {\n      if (changes.pageIndex.currentValue >= 0 && changes.pageIndex.currentValue !== this._pageIndex) {\n        this._pageIndex = changes.pageIndex.currentValue\n        this.paginator.pageIndex = changes.pageIndex.currentValue\n      }\n    }\n    if (changes.pageSize && this.paginator) {\n      if (changes.pageSize?.currentValue >= 0 && changes.pageSize?.currentValue !== this._pageSize) {\n        this.paginator.pageSize = changes.pageSize.currentValue\n        this.renderer.setProperty(this.input?.nativeElement, 'value', changes.pageSize.currentValue)\n      }\n    }\n  }\n\n  /**\n   * When the page index changes, it saves the state and issues the event\n   * @param event\n   */\n  onChangePage (event: any): void {\n    if (event.pageIndex !== this._pageIndex) {\n      this._pageIndex = event.pageIndex\n      this.whenPageChange.emit(this._pageIndex)\n    }\n  }\n\n  /**\n   * When the page size changes, it saves the state and issues the event\n   * @param event\n   */\n  onChangeSize (event: any): void {\n    if (this.paginator) this.paginator.pageSize = parseInt((event.target as HTMLInputElement).value)\n    this._pageSize = parseInt((event.target as HTMLInputElement).value)\n    this.whenSizeChange.emit(this._pageSize)\n  }\n\n  /**\n   * Go to the first page of the pager\n   */\n  goToFirstPage (): void {\n    this.paginator?.firstPage()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2002,
                            "end": 2010,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1996,
                            "end": 2001,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"paginatorContainer\"\n     [id]=\"id\"\n     [ngClass]=\"customClass\">\n  <div>\n    <label for=\"pageSize\"\n           class=\"form-label\"\n      [attr.aria-label]=\"ariaLabel | transloco\">\n      {{'quangPaginator.size' | transloco}}\n    </label>\n    <select\n      [tabIndex]=\"tabIndex\"\n      name=\"pageSize\"\n      id=\"pageSize\"\n      class=\"form-select\"\n      [attr.aria-label]=\"'page size'\"\n      (change)=\"onChangeSize($event)\"\n      #input>\n      <option [ngValue]=\"size\"\n              [selected]=\"size === this._pageSize\"\n              *ngFor=\"let size of sizeList\">\n        {{size}}\n      </option>\n    </select>\n  </div>\n  <mat-paginator\n    id=\"page index\"\n    [tabIndex]=\"tabIndex + 1\"\n    [pageSizeOptions]=\"sizeList\"\n    (page)=\"onChangePage($event)\"\n    [hidePageSize]=\"true\"\n    [showFirstLastButtons]=\"true\"\n    [attr.aria-label]=\"'page index'\"\n    #quangPaginator\n  ></mat-paginator>\n</div>\n"
        },
        {
            "name": "PictureComponent",
            "id": "component-PictureComponent-9c4d082ddb42ca09068918d0ae0858fe42a9acaa7f7ce5b94b70c47a0ac8ed66256cb5d6877a810fdcf7f6e421ea13b0f4eacbd882dd639b5f010356a3927d97",
            "file": "projects/quang-media/src/lib/picture/picture.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-picture",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./picture.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe alt tag of the image\n",
                    "description": "<p>The alt tag of the image</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\narialael for the image\n",
                    "description": "<p>arialael for the image</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loadingSrc",
                    "defaultValue": "'assets/images/lazy/default-placeholder.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe image displayed by default while the browser is loading the real image\n",
                    "description": "<p>the image displayed by default while the browser is loading the real image</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "responsiveList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of images for the responsive view of the source,\nalways insert the sorted list from the smallest to the largest view\n",
                    "description": "<p>The list of images for the responsive view of the source,\nalways insert the sorted list from the smallest to the largest view</p>\n",
                    "line": 29,
                    "type": "QuangPicture[]",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe default image source\n",
                    "description": "<p>The default image source</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nobserve list changes and initialize src\n",
                    "description": "<p>observe list changes and initialize src</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1126,
                                "end": 1133,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1120,
                                "end": 1125,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>picture component decorator</p>\n",
            "rawdescription": "\n\npicture component decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core'\nimport { QuangPicture } from './picture.model'\n\n/**\n * picture component decorator\n */\n@Component({\n  selector: 'quang-picture',\n  templateUrl: './picture.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * picture component\n */\nexport class PictureComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * The alt tag of the image\n   */\n  @Input() alt: string = ''\n  /**\n   * The list of images for the responsive view of the source,\n   * always insert the sorted list from the smallest to the largest view\n   */\n  @Input() responsiveList: QuangPicture[] = []\n  /**\n   * The default image source\n   */\n  @Input() src: string = ''\n  /**\n   * the image displayed by default while the browser is loading the real image\n   */\n  @Input() loadingSrc: string = 'assets/images/lazy/default-placeholder.png'\n  /**\n   * arialael for the image\n   */\n  @Input() ariaLabel: string = ''\n\n  /**\n   * observe list changes and initialize src\n   * @param changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.responsiveList?.currentValue) {\n      this.src = changes.responsiveList?.currentValue[0].src\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<picture [id]=\"id\"\n         [attr.aria-label]=\"ariaLabel | transloco\">\n  <source\n    *ngFor=\"let i of responsiveList\"\n    [media]=\"i.minWidth\"\n    [attr.lazyLoad]=\"i.src\"\n    [attr.defaultImage]=\"loadingSrc\">\n  <img\n    [attr.defaultImage]=\"loadingSrc\"\n    [alt]=\"alt | transloco\"\n    [lazyLoad]=\"src\"\n    [useSrcset]=\"true\">\n</picture>\n"
        },
        {
            "name": "QuangHttpErrorModalComponent",
            "id": "component-QuangHttpErrorModalComponent-c057d696d84309e4dc91253091ad79ca932c74dd14a1958ff06bed82790d27d6d350efda28668df9ed8464c8d63d45d24e95a951767c800a96dbdd9cf8b7d823",
            "file": "projects/quang-dialog/src/lib/http-error/quang-http-error-modal/quang-http-error-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-http-error-modal",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./quang-http-error-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nhttp error\n",
                    "description": "<p>http error</p>\n",
                    "line": 20,
                    "type": "HttpErrorResponse | null",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntitle of the error\n",
                    "description": "<p>title of the error</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclose modal error\n",
                    "description": "<p>close modal error</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>error modal component decorator</p>\n",
            "rawdescription": "\n\nerror modal component decorator\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { QuangModalService } from '../../modal/quang-modal.service'\n\n/**\n * error modal component decorator\n */\n@Component({\n  selector: 'quang-http-error-modal',\n  templateUrl: './quang-http-error-modal.component.html',\n  styles: ['']\n})\n/**\n * error modal component\n */\nexport class QuangHttpErrorModalComponent {\n  /**\n   * http error\n   */\n  @Input() error: HttpErrorResponse | null = null\n  /**\n   * title of the error\n   */\n  @Input() title: string = ''\n\n  /**\n   * constructor\n   * @param modalService modal utility\n   */\n  constructor (\n    private readonly modalService: QuangModalService\n  ) {\n  }\n\n  /**\n   * close modal error\n   */\n  closeModal (): void {\n    this.modalService.closeModal('close')\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "QuangModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 602,
                            "end": 614,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "modalService"
                        },
                        "type": "QuangModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 596,
                            "end": 601,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>modal utility</p>\n"
                    }
                ]
            },
            "templateData": "<div id=\"httpErrorModal\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">{{title | transloco}}</h4>\n    <button type=\"button\"\n            class=\"close pull-right\"\n            aria-label=\"Close\"\n            (click)=\"closeModal()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"iconWrapper\">\n      <i class=\"fas fa-times-circle\"\n         *ngIf=\"error?.status === 400\"></i>\n      <i class=\"fas fa-user-lock\"\n         *ngIf=\"error?.status === 401\"></i>\n      <i class=\"fas fa-money-bill-alt\"\n         *ngIf=\"error?.status === 402\"></i>\n      <i class=\"fas fa-user-slash\"\n         *ngIf=\"error?.status === 403\"></i>\n      <i class=\"far fa-compass\"\n         *ngIf=\"error?.status === 404\"></i>\n      <i class=\"fas fa-ban\"\n         *ngIf=\"error?.status === 405\"></i>\n      <i class=\"fas fa-ban\"\n         *ngIf=\"error?.status === 406\"></i>\n      <i class=\"fas fa-project-diagram\"\n         *ngIf=\"error?.status === 407\"></i>\n      <i class=\"fas fa-stopwatch\"\n         *ngIf=\"error?.status === 408\"></i>\n      <i class=\"fas fa-compress-arrows-alt\"\n         *ngIf=\"error?.status === 409\"></i>\n      <i class=\"fas fa-eraser\"\n         *ngIf=\"error?.status === 410\"></i>\n      <i class=\"fas fa-expand\"\n         *ngIf=\"error?.status === 413\"></i>\n      <i class=\"fas fa-ruler-horizontal\"\n         *ngIf=\"error?.status === 414\"></i>\n      <i class=\"fas fa-file-code\"\n         *ngIf=\"error?.status === 415\"></i>\n      <i class=\"fas fa-server\"\n         *ngIf=\"error?.status === 500\"></i>\n      <i class=\"fas fa-code\"\n         *ngIf=\"error?.status === 501\"></i>\n      <i class=\"fas fa-project-diagram\"\n         *ngIf=\"error?.status === 502\"></i>\n      <i class=\"fas fa-laptop-house\"\n         *ngIf=\"error?.status === 503\"></i>\n      <i class=\"fas fa-stopwatch\"\n         *ngIf=\"error?.status === 504\"></i>\n    </div>\n    <p>\n      {{'httpErrorModal.' + error?.status + '.errorMessage' | transloco}}\n    </p>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\"\n            class=\"btn btn-secondary\"\n            (click)=\"closeModal()\">\n      {{'httpErrorModal.ok' | transloco}}\n    </button>\n  </div>\n</div>\n\n"
        },
        {
            "name": "QuangToastComponent",
            "id": "component-QuangToastComponent-6dd0fe2156c4f84a4d76a19c87b0e3d40ae906ddb7ced28001bfd86f7890ce890e8156053855598e13f122a6576b11aa57872e992be9afd86f6d4e6d564496a9",
            "file": "projects/quang-dialog/src/lib/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangToast | null",
                    "optional": false,
                    "description": "<p>toast wrapper</p>\n",
                    "line": 30,
                    "rawdescription": "\n\ntoast wrapper\n"
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subscription to a toast state</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nsubscription to a toast state\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "pos": 931,
                            "end": 943,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 932,
                                "end": 939,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toastDom",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | null",
                    "optional": false,
                    "description": "<p>html element</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nhtml element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'toastDom', {static: false}"
                        }
                    ]
                },
                {
                    "name": "toastState$",
                    "defaultValue": "this.store.select(ToastSelectors.selectToast)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<QuangToast>",
                    "optional": false,
                    "description": "<p>observable for toast state</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nobservable for toast state\n",
                    "modifierKind": [
                        121,
                        144
                    ],
                    "jsdoctags": [
                        {
                            "pos": 767,
                            "end": 779,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 332,
                            "tagName": {
                                "pos": 768,
                                "end": 775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncloses the toast by modifying the css rules\n",
                    "description": "<p>closes the toast by modifying the css rules</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit observer\n",
                    "description": "<p>init observer</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribe the observable\n",
                    "description": "<p>unsubscribe the observable</p>\n"
                },
                {
                    "name": "observeToasts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nobserve the change of state of the toast saved in the store\n",
                    "description": "<p>observe the change of state of the toast saved in the store</p>\n"
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nview the toast by changing the style of the component\nif a timing is configured it waits for the time to expire and closes the toast\n",
                    "description": "<p>view the toast by changing the style of the component\nif a timing is configured it waits for the time to expire and closes the toast</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>toast component decorator</p>\n",
            "rawdescription": "\n\ntoast component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild\n} from '@angular/core'\nimport { QuangToast } from './toast.model'\nimport { delay, Observable, of, Subscription } from 'rxjs'\nimport { Store } from '@ngrx/store'\nimport { ToastSelectors } from './toast-store/selectors'\nimport { QuangDialogStateModule } from '../quang-dialog.reducers'\nimport { take } from 'rxjs/operators'\n\n/**\n * toast component decorator\n */\n@Component({\n  selector: 'quang-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss']\n})\n/**\n * toast component\n */\nexport class QuangToastComponent implements AfterViewInit, OnDestroy {\n  /**\n   * toast wrapper\n   */\n  data: QuangToast | null = null\n  /**\n   * observable for toast state\n   * @private\n   */\n  private readonly toastState$: Observable<QuangToast> = this.store.select(ToastSelectors.selectToast)\n  /**\n   * subscription to a toast state\n   * @private\n   */\n  private subscription: Subscription = new Subscription()\n  /**\n   * html element\n   */\n  @ViewChild('toastDom', { static: false }) toastDom: ElementRef | null = null\n\n  /**\n   * constructor\n   * @param store store access\n   */\n  constructor (\n    private readonly store: Store<QuangDialogStateModule>\n  ) {\n  }\n\n  /**\n   * init observer\n   */\n  ngAfterViewInit (): void {\n    this.observeToasts()\n  }\n\n  /**\n   * observe the change of state of the toast saved in the store\n   */\n  observeToasts (): void {\n    this.subscription = this.toastState$.subscribe((t: QuangToast) => {\n      if (t) {\n        this.data = t\n        if (this.data.timing) {\n          setTimeout(() => {\n            this.close()\n          }, this.data.timing)\n        }\n      }\n    },\n    () => {\n      alert('Error on toast lifecycle')\n    })\n  }\n\n  /**\n   * view the toast by changing the style of the component\n   * if a timing is configured it waits for the time to expire and closes the toast\n   */\n  open (): void {\n    if (this.data?.timing) {\n      of('').pipe(\n        delay(this.data.timing),\n        take(1)\n      ).subscribe(() => {\n        this.close()\n      })\n    }\n  }\n\n  /**\n   * closes the toast by modifying the css rules\n   */\n  close (): void {\n    this.data = null\n  }\n\n  /**\n   * unsubscribe the observable\n   */\n  ngOnDestroy (): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toast {\n  position: fixed;\n  min-width: 200px;\n  z-index: 999999;\n\n  &.top-left {\n    top: 2rem;\n    left: 1rem;\n  }\n\n  &.top-right {\n    top: 2rem;\n    right: 1rem;\n  }\n\n  &.bottom-left {\n    bottom: 2rem;\n    left: 1rem;\n  }\n\n  &.bottom-right {\n    bottom: 2rem;\n    right: 1rem;\n  }\n\n  .toast-header {\n    .rounded  {\n      height: 1.125rem;\n      width: 1.125rem;\n      display: inline-block;\n    }\n    small {\n      margin-left: 1rem;\n    }\n  }\n}\n",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1149,
                            "end": 1154,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "store"
                        },
                        "type": "Store<QuangDialogStateModule>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1143,
                            "end": 1148,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>store access</p>\n"
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"toast fade\"\n     [class.hide]=\"!data\"\n     [class.show]=\"data\"\n     role=\"alert\"\n     aria-live=\"assertive\"\n     aria-atomic=\"true\"\n     [class.show]=\"data\"\n     [ngClass]=\"data?.position\">\n  <div class=\"toast-header\">\n    <span class=\"rounded me-2\"\n          [ngClass]=\"data?.type\"\n    ></span>\n    <strong class=\"me-auto\">{{data?.title | transloco}}</strong>\n    <small>{{data?.date | date: data?.dateFormat}}</small>\n    <button type=\"button\"\n            class=\"me-2 mb-1 btn-close\"\n            data-dismiss=\"toast\"\n            aria-label=\"Close\"\n            (click)=\"close()\">\n      <span aria-hidden=\"true\"></span>\n    </button>\n  </div>\n  <div class=\"toast-body\">\n    {{data?.text | transloco:{ textValue: data?.textValue } }}\n  </div>\n</div>\n"
        },
        {
            "name": "SelectObjComponent",
            "id": "component-SelectObjComponent-cfc9cf9df98db167ee5f05c439856eda7312373ca7801a99f93b671388cfc160cfe7e1dab5c1886f5e5fec7c0a56e86c54c9623d649aa27f06aab26e32869ee5",
            "file": "projects/quang-core/src/lib/select-obj/select-obj.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-select-obj",
            "styleUrls": [
                "./select-obj.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-obj.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 85,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the key of the value that will be used as the label for the input\n",
                    "description": "<p>Defines the key of the value that will be used as the label for the input</p>\n",
                    "line": 72,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of selectable options\n",
                    "description": "<p>The list of selectable options</p>\n",
                    "line": 68,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "nullOption",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether the user can select the blank field\n",
                    "description": "<p>defines whether the user can select the blank field</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "returnValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the key of the value that will be returned as the value of the input\n",
                    "description": "<p>Defines the key of the value that will be returned as the value of the input</p>\n",
                    "line": 76,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 94,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 89,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "translateValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if the option labels are to be translated\n",
                    "description": "<p>Defines if the option labels are to be translated</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 107,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 115,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 103,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 99,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 139,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSelectElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 123,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd focus to the input field if the need comes after component initialization\n",
                    "description": "<p>Add focus to the input field if the need comes after component initialization</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4415,
                                "end": 4422,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4409,
                                "end": 4414,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5296,
                                "end": 5297,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5290,
                                "end": 5295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>select object component decorator</p>\n",
            "rawdescription": "\n\nselect object component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, OnChanges, OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * select object component decorator\n */\n@Component({\n  selector: 'quang-select-obj',\n  templateUrl: './select-obj.component.html',\n  styleUrls: ['./select-obj.component.scss']\n})\n/**\n * select object component\n */\nexport class SelectObjComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Defines if the option labels are to be translated\n   */\n  @Input() translateValue: boolean = false\n  /**\n   * defines whether the user can select the blank field\n   */\n  @Input() nullOption: boolean = true\n  /**\n   * The list of selectable options\n   */\n  @Input() list: Array<{ [key: string]: any }> = []\n  /**\n   * Defines the key of the value that will be used as the label for the input\n   */\n  @Input() labelValue: string | null = null\n  /**\n   * Defines the key of the value that will be returned as the value of the input\n   */\n  @Input() returnValue: string | null = null\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLSelectElement> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Add focus to the input field if the need comes after component initialization\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n    if (changes.list?.currentValue) {\n      if (!this.nullOption && !this._value) {\n        if (this.returnValue) this._value = this._value = (changes.list.currentValue as any[])[0][this.returnValue]\n        this.onTouched()\n        this.onChanged(this._value)\n      }\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            this._requiredValue = this.control.errors[error].requiredValue\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n  .is-valid {\n    background-position: center right calc(0.375em + 1rem);\n  }\n\n  .is-invalid {\n    background-position: center right calc(0.375em + 1rem);\n  }\n\n\n",
                    "styleUrl": "./select-obj.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 130,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3440,
                            "end": 3448,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3434,
                            "end": 3439,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3473,
                            "end": 3480,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3467,
                            "end": 3472,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <select class=\"form-select\"\n          [id]=\"id\"\n          [ngClass]=\"customClass\"\n          [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n          [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n          [attr.aria-label]=\"ariaLabel | transloco\"\n          (input)=\"onChangedHandler($event)\"\n          (blur)=\"onTouched()\"\n          [class.form-select-lg]=\"size === 'lg'\"\n          [class.form-select-sm]=\"size === 'sm'\"\n          [tabIndex]=\"tabIndex\"\n          #input\n  >\n    <option [ngValue]=\"null\"\n            *ngIf=\"nullOption\"></option>\n    <option *ngFor=\"let item of list\"\n            [value]=\"item[returnValue]\"\n            [selected]=\"item[returnValue] === _value\">\n      {{translateValue ? (item[labelValue] | transloco) : item[labelValue] }}\n    </option>\n  </select>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "SelectStrgComponent",
            "id": "component-SelectStrgComponent-e37f2eeeb286220a1ea0181baa8dcbadb970624276cd6b5d4dbf5d07c7f67f79ff30f31572c0a40842b8070c0b9eebabaec5277cf5c947012ae0e15ca8858bce",
            "file": "projects/quang-core/src/lib/select-strg/select-strg.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-select-strg",
            "styleUrls": [
                "./select-strg.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-strg.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 78,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe list of options\n",
                    "description": "<p>The list of options</p>\n",
                    "line": 74,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "nullOption",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndefines whether the user can select the blank field\n",
                    "description": "<p>defines whether the user can select the blank field</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size\n",
                    "description": "<p>Adds bootstrap classes to the input that define the size of the field,\nif not specified the field is displayed with standard size</p>\n",
                    "line": 87,
                    "type": "\"lg\" | \"sm\" | null",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 82,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "translateValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if the option labels are to be translated\n",
                    "description": "<p>Defines if the option labels are to be translated</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 108,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 92,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 132,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLSelectElement> | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 112,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 122,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 116,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nWhen you define that the select does not have the empty field,\nthe value is initialized with the value of the option in the first position\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nWhen you define that the select does not have the empty field,\nthe value is initialized with the value of the option in the first position</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4252,
                                "end": 4259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4246,
                                "end": 4251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5093,
                                "end": 5094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5087,
                                "end": 5092,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>select string component decorator</p>\n",
            "rawdescription": "\n\nselect string component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\n\n/**\n * select string component decorator\n */\n@Component({\n  selector: 'quang-select-strg',\n  templateUrl: './select-strg.component.html',\n  styleUrls: ['./select-strg.component.scss']\n})\n/**\n * select string component\n */\nexport class SelectStrgComponent implements ControlValueAccessor, AfterViewInit, OnChanges, OnInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines if the option labels are to be translated\n   */\n  @Input() translateValue: boolean = false\n  /**\n   * defines whether the user can select the blank field\n   */\n  @Input() nullOption: boolean = true\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * The list of options\n   */\n  @Input() list: Array<string> = []\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Adds bootstrap classes to the input that define the size of the field,\n   * if not specified the field is displayed with standard size\n   */\n  @Input() size: 'lg' | 'sm' | null = null\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLSelectElement> | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * When you define that the select does not have the empty field,\n   * the value is initialized with the value of the option in the first position\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n    if (changes.list?.currentValue) {\n      if (!this.nullOption && !this._value) {\n        this._value = this._value = (changes.list.currentValue as any[])[0]\n        this.onTouched()\n        this.onChanged(this._value)\n      }\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            this._requiredValue = this.control.errors[error].requiredValue\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.is-valid {\n  background-position: center right calc(0.375em + 1rem);\n}\n\n.is-invalid {\n  background-position: center right calc(0.375em + 1rem);\n}\n\n",
                    "styleUrl": "./select-strg.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 123,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3145,
                            "end": 3153,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3139,
                            "end": 3144,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3178,
                            "end": 3185,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3172,
                            "end": 3177,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <select class=\"form-select\"\n          [id]=\"id\"\n          [ngClass]=\"customClass\"\n          [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n          [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n          [class.form-select-lg]=\"size === 'lg'\"\n          [class.form-select-sm]=\"size === 'sm'\"\n          (input)=\"onChangedHandler($event)\"\n          (blur)=\"onTouched()\"\n          [tabIndex]=\"tabIndex\"\n          [attr.aria-label]=\"ariaLabel | transloco\"\n          #input\n  >\n    <option [ngValue]=\"null\"\n            *ngIf=\"nullOption\"></option>\n    <option *ngFor=\"let item of list\"\n            [value]=\"item\"\n            [selected]=\"item === _value\">\n      {{translateValue ? (item | transloco) : item }}\n    </option>\n  </select>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "SkeletonComponent",
            "id": "component-SkeletonComponent-f1ca42ce2f6ee1fc000debd018a007bad4f5f15230f2dbd854857cb5f4f58ab37e195d36f8a67087126c2131a4297d27be8f514ad590ace3dd774320209ba9ad",
            "file": "projects/quang-dialog/src/lib/skeleton/skeleton.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-skeleton",
            "styleUrls": [
                "./skeleton.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./skeleton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class for div skeleton\n",
                    "description": "<p>Custom class for div skeleton</p>\n",
                    "line": 23,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom id for skeleton div\n",
                    "description": "<p>Custom id for skeleton div</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>component decorator</p>\n",
            "rawdescription": "\n\ncomponent decorator\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core'\n\n/**\n * component decorator\n */\n@Component({\n  selector: 'quang-skeleton',\n  templateUrl: './skeleton.component.html',\n  styleUrls: ['./skeleton.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * quang skeleton\n */\nexport class SkeletonComponent {\n  /**\n   * Custom id for skeleton div\n   */\n  @Input() id: string = ''\n  /**\n   * Custom class for div skeleton\n   */\n  @Input() customClass: string[] = []\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".quang-skeleton {\n  overflow: hidden;\n  position: relative;\n  background-repeat: no-repeat;\n  background-size: calc(100% / 2) 100%;\n  background-position:-100%;\n  animation-name: loading;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n}\n\n@keyframes loading {\n  0%{\n    background-position: -100% ;\n  }\n  50%{\n    background-position: 100%;\n  }\n  100% {\n    background-position: 200%;\n  }\n}\n",
                    "styleUrl": "./skeleton.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\n  [id]=\"id\"\n  class=\"quang-skeleton\"\n  [ngClass]=\"customClass\"\n>\n</div>\n\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-3109cebaccbdadae7300ab24cd4ae21fe7c5e4e7442983a9b0ae095158c2acb4deffb73dea897fd8814dff2fe42b077e614fb3197620e2fd1aa6da36c6399a5f",
            "file": "projects/quang-core/src/lib/slider/slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 79,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "interval",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the range of advancement of the slider\n",
                    "description": "<p>Defines the range of advancement of the slider</p>\n",
                    "line": 62,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum value of the slider\n",
                    "description": "<p>Defines the maximum value of the slider</p>\n",
                    "line": 66,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum value of the slider\n",
                    "description": "<p>Defines the minimum value of the slider</p>\n",
                    "line": 70,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "vertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input is displayed vertically\n",
                    "description": "<p>Defines whether the input is displayed vertically</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 92,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 122,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSlider | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 104,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 114,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 108,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAfter rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values\n",
                    "description": "<p>After rendering the component, it checks if the input field must have focus\nand activates the monitoring of the validation of the entered values</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\n",
                    "description": "<p>Check if the help message is required and create the key</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "MatSliderChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3929,
                                "end": 3930,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "MatSliderChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3923,
                                "end": 3928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>slider component decorator</p>\n",
            "rawdescription": "\n\nslider component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  Input,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\nimport { MatSlider, MatSliderChange } from '@angular/material/slider'\n\n/**\n * slider component decorator\n */\n@Component({\n  selector: 'quang-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n})\n/**\n * slider component\n */\nexport class SliderComponent implements ControlValueAccessor, OnInit, AfterViewInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines whether the input is displayed vertically\n   */\n  @Input() vertical: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines the range of advancement of the slider\n   */\n  @Input() interval: number = 0\n  /**\n   * Defines the maximum value of the slider\n   */\n  @Input() maxValue: number = 0\n  /**\n   * Defines the minimum value of the slider\n   */\n  @Input() minValue: number = 0\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n\n  /**\n   * The value of the input\n   */\n  _value: number = 0\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: MatSlider | undefined\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param control cva access\n   */\n  constructor (\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * After rendering the component, it checks if the input field must have focus\n   * and activates the monitoring of the validation of the entered values\n   */\n  ngAfterViewInit (): void {\n    this.observeValidate()\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: MatSliderChange): void {\n    if (e?.value !== null) this._value = e.value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    if (this.input) this.input.value = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.input?.setDisabledState(isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (Object.prototype.hasOwnProperty.call(this.control.errors.error, '')) {\n            if (this.control.errors[error]) {\n              this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n              this._requiredValue = this.control.errors[error].requiredValue\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".slider-wrapper {\n  label.form-label {\n    display: block;\n  }\n}\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 115,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2821,
                            "end": 2828,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2815,
                            "end": 2820,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mb-3 slider-wrapper\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <mat-slider\n    [id]=\"id\"\n    [vertical]=\"vertical\"\n    [ngStyle]=\"{width: vertical ? null : '100%'}\"\n    thumbLabel\n    [tickInterval]=\"interval\"\n    [max]=\"maxValue\"\n    [min]=\"minValue\"\n    [attr.aria-label]=\"ariaLabel | transloco\"\n    (change)=\"onChangedHandler($event)\"\n    (blur)=\"onTouched()\"\n    [ngClass]=\"customClass\"\n    [class.is-valid]=\"control?.valid && control?.dirty\"\n    [class.is-invalid]=\"control?.invalid && control?.dirty\"\n    #input\n  ></mat-slider>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "TextAreaComponent",
            "id": "component-TextAreaComponent-ac2fd6726e6d211a3ffd8b405c70d4c883a76a7f8376bbfb95c39773f95c745ed348b324aa99b1891f53ffbb1c35af525ceb8f8cf75b6ea31e28fadd75f0d6e3",
            "file": "projects/quang-core/src/lib/text-area/text-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-text-area",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 91,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "autoResize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the text area has the ability to update its size based on the text content\n",
                    "description": "<p>Defines whether the text area has the ability to update its size based on the text content</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNumber of column in the text area\n",
                    "description": "<p>Number of column in the text area</p>\n",
                    "line": 82,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 104,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 61,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 57,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "resizeMode",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt defines how the size or direction of the text area can change\n",
                    "description": "<p>It defines how the size or direction of the text area can change</p>\n",
                    "line": 100,
                    "type": "\"none\" | \"auto\" | \"vertical\" | \"horizzontal\"",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNumber of lines in the text area\n",
                    "description": "<p>Number of lines in the text area</p>\n",
                    "line": 78,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 86,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 117,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 121,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 125,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 113,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 109,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "autosize",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkTextareaAutosize | null",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'autosize'"
                        }
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 153,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLTextAreaElement> | null",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 141,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 135,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 129,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nStart the check on the validation of the field\nAlso listen to the changes in the ui to manage the resize of the field\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nStart the check on the validation of the field\nAlso listen to the changes in the ui to manage the resize of the field</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\n",
                    "description": "<p>Checks if focus is required when displaying the input field.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4772,
                                "end": 4779,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4766,
                                "end": 4771,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5378,
                                "end": 5379,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5372,
                                "end": 5377,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>text area component decorator</p>\n",
            "rawdescription": "\n\ntext area component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input, NgZone,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field'\nimport { delay, filter, take } from 'rxjs/operators'\n\n/**\n * text area component decorator\n */\n@Component({\n  selector: 'quang-text-area',\n  templateUrl: './text-area.component.html',\n  styles: []\n})\n/**\n * text area component\n */\nexport class TextAreaComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnChanges {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Defines whether the text area has the ability to update its size based on the text content\n   */\n  @Input() autoResize: boolean = false\n  /**\n   * Number of lines in the text area\n   */\n  @Input() rows: number = 0\n  /**\n   * Number of column in the text area\n   */\n  @Input() cols: number = 0\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * It defines how the size or direction of the text area can change\n   */\n  @Input() resizeMode: 'none' | 'auto' | 'vertical' | 'horizzontal' = 'auto'\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: ElementRef<HTMLTextAreaElement> | null = null\n  @ViewChild('autosize') autosize: CdkTextareaAutosize | null = null\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param ngZone zonejs utility\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly ngZone: NgZone,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * Start the check on the validation of the field\n   * Also listen to the changes in the ui to manage the resize of the field\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.nativeElement.focus()\n      }\n    }, 0)\n    this.ngZone.onStable.pipe(\n      take(1)\n    ).subscribe(() => this.autosize?.resizeToFitContent(this.autoResize))\n    this.observeValidate()\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.nativeElement.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).value\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: string): void {\n    this._value = value\n    this.renderer.setProperty(this.input?.nativeElement, 'value', value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.renderer.setProperty(this.input?.nativeElement, 'disabled', isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        if (this.control.errors) {\n          for (const error in this.control.errors) {\n            if (error === 'minlength' || error === 'maxlength') {\n              this._requiredValue = this.control.errors[error].requiredLength\n            } else {\n              this._requiredValue = this.control.errors[error].requiredValue\n            }\n            this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 142,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3606,
                            "end": 3614,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3600,
                            "end": 3605,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3639,
                            "end": 3645,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "ngZone"
                        },
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3633,
                            "end": 3638,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>zonejs utility</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3673,
                            "end": 3680,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3667,
                            "end": 3672,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <textarea class=\"form-control\"\n            [id]=\"id\"\n            [placeholder]=\"placeholder | transloco\"\n            [ngStyle]=\"{'resize': resizeMode}\"\n            [maxLength]=\"max\"\n            [minLength]=\"min\"\n            [readOnly]=\"readonly\"\n            [autofocus]=\"autofocus\"\n            [rows]=\"rows\"\n            [cols]=\"cols\"\n            [attr.aria-label]=\"ariaLabel | transloco\"\n            [tabIndex]=\"tabIndex\"\n            cdkTextareaAutosize\n            [cdkAutosizeMinRows]=\"0\"\n            [cdkAutosizeMaxRows]=\"rows\"\n            [ngClass]=\"customClass\"\n            [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n            [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n            (input)=\"onChangedHandler($event)\"\n            (blur)=\"onTouched()\"\n            #input\n            #autosize=\"cdkTextareaAutosize\"\n  ></textarea>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "TextEditorComponent",
            "id": "component-TextEditorComponent-4256b2572a071b3e6153a38a25a647db65ac4ac7f4089e85675c0ae2bd9dc119510eaa09564a4047685da2b12b0aa78d8fb25ca28195db14697b35a4c10e03b3",
            "file": "projects/quang-core/src/lib/text-editor/text-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-text-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alignBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToolbar for text alignment\n",
                    "description": "<p>Toolbar for text alignment</p>\n",
                    "line": 103,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not\n",
                    "description": "<p>Indicates whether, when the page is opened,\nthis input field should be displayed in a focused state or not</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 135,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "emojiBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToolbar for selecting emojis\n",
                    "description": "<p>Toolbar for selecting emojis</p>\n",
                    "line": 123,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fontBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFont selection toolbar\n",
                    "description": "<p>Font selection toolbar</p>\n",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nheaders bar\n",
                    "description": "<p>headers bar</p>\n",
                    "line": 115,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "indentBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToolbar for selecting indentation\n",
                    "description": "<p>Toolbar for selecting indentation</p>\n",
                    "line": 127,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "listBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLists toolbar\n",
                    "description": "<p>Lists toolbar</p>\n",
                    "line": 91,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the maximum length of the input field\n",
                    "description": "<p>Defines the maximum length of the input field</p>\n",
                    "line": 73,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mediaBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToolbar for inserting media\n",
                    "description": "<p>Toolbar for inserting media</p>\n",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the minimum length of the input field\n",
                    "description": "<p>Defines the minimum length of the input field</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder of the input field\n",
                    "description": "<p>The placeholder of the input field</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preserveWhitespace",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\npreserve white space\n",
                    "description": "<p>preserve white space</p>\n",
                    "line": 131,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the input field is in a read-only state\n",
                    "description": "<p>Defines whether the input field is in a read-only state</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "returnHtml",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the return value of the field must be in text or html format\n",
                    "description": "<p>Defines whether the return value of the field must be in text or html format</p>\n",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sizeBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText size toolbar\n",
                    "description": "<p>Text size toolbar</p>\n",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 65,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "textStyleBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText style toolbar\n",
                    "description": "<p>Text style toolbar</p>\n",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "textTypeBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText type toolbar\n",
                    "description": "<p>Text type toolbar</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 151,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 155,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 159,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 147,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_toolbar",
                    "defaultValue": "{ toolbar: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>The status of the toolbar</p>\n",
                    "line": 163,
                    "rawdescription": "\n\nThe status of the toolbar\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 143,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 190,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuillEditorComponent | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "modules",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>The status of the modules</p>\n",
                    "line": 167,
                    "rawdescription": "\n\nThe status of the modules\n"
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 178,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 172,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "checkFocus",
                    "args": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if the input field should have focus when the page is rendered\n",
                    "description": "<p>check if the input field should have focus when the page is rendered</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6398,
                                "end": 6404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "editor"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6392,
                                "end": 6397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nStart the check on the validation of the field\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nStart the check on the validation of the field</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the help message is required and create the key\nCheck the selected toolbars and add them to the configuration object\n",
                    "description": "<p>Check if the help message is required and create the key\nCheck the selected toolbars and add them to the configuration object</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "ContentChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6924,
                                "end": 6925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "ContentChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6918,
                                "end": 6923,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>text editor component decorator</p>\n",
            "rawdescription": "\n\ntext editor component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\nimport 'quill-emoji/dist/quill-emoji.js'\nimport { ContentChange, QuillEditorComponent } from 'ngx-quill'\n\n/**\n * text editor component decorator\n */\n@Component({\n  selector: 'quang-text-editor',\n  templateUrl: './text-editor.component.html',\n  styles: []\n})\n/**\n * text editor component\n */\nexport class TextEditorComponent implements ControlValueAccessor, AfterViewInit, OnInit {\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * The placeholder of the input field\n   */\n  @Input() placeholder: string = ''\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Indicates whether, when the page is opened,\n   * this input field should be displayed in a focused state or not\n   */\n  @Input() autofocus: boolean = false\n  /**\n   * Defines whether the input field is in a read-only state\n   */\n  @Input() readonly: boolean = false\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * Defines the minimum length of the input field\n   */\n  @Input() min: number = 0\n  /**\n   * Defines the maximum length of the input field\n   */\n  @Input() max: number = 0\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Defines whether the return value of the field must be in text or html format\n   */\n  @Input() returnHtml: boolean = false\n  /**\n   * Lists toolbar\n   */\n  @Input() listBar: boolean = false\n  /**\n   * Text type toolbar\n   */\n  @Input() textTypeBar: boolean = false\n  /**\n   * Text style toolbar\n   */\n  @Input() textStyleBar: boolean = false\n  /**\n   * Toolbar for text alignment\n   */\n  @Input() alignBar: boolean = false\n  /**\n   * Font selection toolbar\n   */\n  @Input() fontBar: boolean = false\n  /**\n   * Toolbar for inserting media\n   */\n  @Input() mediaBar: boolean = false\n  /**\n   * headers bar\n   */\n  @Input() headerBar: boolean = false\n  /**\n   * Text size toolbar\n   */\n  @Input() sizeBar: boolean = false\n  /**\n   * Toolbar for selecting emojis\n   */\n  @Input() emojiBar: boolean = false\n  /**\n   * Toolbar for selecting indentation\n   */\n  @Input() indentBar: boolean = false\n  /**\n   * preserve white space\n   */\n  @Input() preserveWhitespace: boolean = false\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: QuillEditorComponent | undefined\n  /**\n   * The value of the input\n   */\n  _value: string = ''\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * The status of the toolbar\n   */\n  _toolbar: any = { toolbar: [] }\n  /**\n   * The status of the modules\n   */\n  modules: { [key: string]: string } = {}\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param elementRef\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    private readonly elementRef: ElementRef,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * Check if the help message is required and create the key\n   * Check the selected toolbars and add them to the configuration object\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n    if (this.listBar) {\n      this._toolbar.toolbar.push([{ list: 'ordered' }, { list: 'bullet' }])\n    }\n    if (this.textTypeBar) {\n      this._toolbar.toolbar.push(['bold', 'italic', 'underline', 'strike'])\n      this._toolbar.toolbar.push(['blockquote', 'code-block'])\n    }\n    if (this.textStyleBar) {\n      this._toolbar.toolbar.push([{ color: [] }, { background: [] }])\n    }\n    if (this.alignBar) {\n      this._toolbar.toolbar.push([{ align: [] }])\n    }\n    if (this.fontBar) {\n      this._toolbar.toolbar.push([{ font: [] }])\n    }\n    if (this.mediaBar) {\n      this._toolbar.toolbar.push(['link', 'image', 'video'])\n    }\n    if (this.headerBar) {\n      this._toolbar.toolbar.push([{ header: [1, 2, 3, 4, 5, 6, false] }])\n    }\n    if (this.sizeBar) {\n      this._toolbar.toolbar.push([{ size: ['small', 'normal', 'large', 'huge'] }])\n    }\n    if (this.indentBar) {\n      this._toolbar.toolbar.push([{ indent: '-1' }, { indent: '+1' }])\n    }\n    if (this.emojiBar) {\n      this._toolbar['emoji-shortname'] = true\n      this._toolbar['emoji-textarea'] = true\n      this._toolbar['emoji-toolbar'] = true\n    }\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * Start the check on the validation of the field\n   */\n  ngAfterViewInit (): void {\n    setTimeout(() => {\n      if (this.autofocus) {\n        this.input?.editorElem.focus()\n      }\n    }, 0)\n    this.observeValidate()\n  }\n\n  /**\n   * check if the input field should have focus when the page is rendered\n   * @param editor\n   */\n  checkFocus (editor: any): void {\n    if (this.autofocus) {\n      editor.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: ContentChange): void {\n    this.onTouched()\n    this.onChanged(this.returnHtml ? e.html : e.text === '\\n' ? null : e.text)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.input?.setDisabledState(isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (Object.prototype.hasOwnProperty.call(this.control.errors.error, '')) {\n            if (this.control.errors[error]) {\n              this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n              this._requiredValue = this.control.errors[error].requiredValue\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 179,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4206,
                            "end": 4214,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4200,
                            "end": 4205,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 4239,
                            "end": 4249,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "elementRef"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4233,
                            "end": 4238,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 4262,
                            "end": 4269,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4256,
                            "end": 4261,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "AfterViewInit",
                "OnInit"
            ],
            "templateData": "<div class=\"mb-3\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <quill-editor\n    [id]=\"id\"\n    [placeholder]=\"placeholder | transloco\"\n    [readOnly]=\"readonly\"\n    [modules]=\"_toolbar\"\n    [preserveWhitespace]=\"preserveWhitespace\"\n    [sanitize]=\"true\"\n    [maxLength]=\"max\"\n    [minLength]=\"min\"\n    [ngClass]=\"customClass\"\n    [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n    [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n    [ngModel]=\"_value\"\n    (onBlur)=\"onTouched()\"\n    (onContentChanged)=\"onChangedHandler($event)\"\n    (onEditorCreated)=\"checkFocus($event)\"\n    [format]=\"returnHtml ? 'html' : 'text'\"\n    #input\n  ></quill-editor>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: {requiredValue: _requiredValue} }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n"
        },
        {
            "name": "ThreeSixtyImageComponent",
            "id": "component-ThreeSixtyImageComponent-6f2fe8535cd520eabe50f064e9949e0b4b0b99d2580ab51ec8eb0140bcd7eca0894b8c4cf705025afc6e81624cf8eda47cf7254e3f6b18ff3eb391eff0644b5b",
            "file": "projects/quang-media/src/lib/three-sixty-image/three-sixty-image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-three-sixty-image",
            "styleUrls": [
                "./three-sixty-image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./three-sixty-image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "clockwise",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nenable the buttons that manage the rotation\n",
                    "description": "<p>enable the buttons that manage the rotation</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe custom class to add to the component\n",
                    "description": "<p>The custom class to add to the component</p>\n",
                    "line": 39,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "delayTime",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndelay time before the start of the rotation\n",
                    "description": "<p>delay time before the start of the rotation</p>\n",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe height of the image\n",
                    "description": "<p>the height of the image</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe url list of the images to be displayed in sequence\n",
                    "description": "<p>the url list of the images to be displayed in sequence</p>\n",
                    "line": 43,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "loadingSrc",
                    "defaultValue": "'url(\"assets/images/lazy/default-placeholder.png\")'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nthe url of the default image before the final images are loaded\n",
                    "description": "<p>the url of the default image before the final images are loaded</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "timeRotation",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntime between one image and another\n",
                    "description": "<p>time between one image and another</p>\n",
                    "line": 51,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentFrame",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>current eframe</p>\n",
                    "line": 69,
                    "rawdescription": "\n\ncurrent eframe\n"
                },
                {
                    "name": "currentX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>current x vlaue</p>\n",
                    "line": 65,
                    "rawdescription": "\n\ncurrent x vlaue\n"
                },
                {
                    "name": "imageUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeStyle",
                    "optional": false,
                    "description": "<p>current image url</p>\n",
                    "line": 81,
                    "rawdescription": "\n\ncurrent image url\n"
                },
                {
                    "name": "intervalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>intervall timing wrapper</p>\n",
                    "line": 73,
                    "rawdescription": "\n\nintervall timing wrapper\n"
                },
                {
                    "name": "mouseStateDown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>mouse state</p>\n",
                    "line": 77,
                    "rawdescription": "\n\nmouse state\n"
                },
                {
                    "name": "play",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>play status</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nplay status\n"
                },
                {
                    "name": "step",
                    "defaultValue": "30",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>rotation step</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nrotation step\n"
                },
                {
                    "name": "wrapper",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement> | null",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'wrapper'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "autoRotator",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnleash automatic image rotation\n",
                    "description": "<p>Unleash automatic image rotation</p>\n"
                },
                {
                    "name": "getUrl",
                    "args": [
                        {
                            "name": "img",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeUrl",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsanitize the url of the image\n",
                    "description": "<p>sanitize the url of the image</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5334,
                                "end": 5337,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "img"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5328,
                                "end": 5333,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "mouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered when the mouse button is pressed, saves the state of the mouse rotation\n",
                    "description": "<p>Event triggered when the mouse button is pressed, saves the state of the mouse rotation</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3448,
                                "end": 3453,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3442,
                                "end": 3447,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "mouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction triggered on the movement of the mouse,\ncontrols the status of the rotation and the movement of the mouse to set the rotation to the right or left\n",
                    "description": "<p>function triggered on the movement of the mouse,\ncontrols the status of the rotation and the movement of the mouse to set the rotation to the right or left</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2937,
                                "end": 2942,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2931,
                                "end": 2936,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "mouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent triggered when the mouse button is release, saves the state of the mouse rotation\n",
                    "description": "<p>Event triggered when the mouse button is release, saves the state of the mouse rotation</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3792,
                                "end": 3797,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3786,
                                "end": 3791,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the url list changes, it waits for the delay time entered and starts the rotation\nIf the starting image changes, it sanitizes the url and sets it as the current image\n",
                    "description": "<p>If the url list changes, it waits for the delay time entered and starts the rotation\nIf the starting image changes, it sanitizes the url and sets it as the current image</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2116,
                                "end": 2123,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2110,
                                "end": 2115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "rotator",
                    "args": [
                        {
                            "name": "act",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the rotation is right or left and calculate which image should be displayed\n",
                    "description": "<p>Check if the rotation is right or left and calculate which image should be displayed</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4093,
                                "end": 4096,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "act"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4087,
                                "end": 4092,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "togglePlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchange the state of the play button\n",
                    "description": "<p>change the state of the play button</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>three sixty component decorator</p>\n",
            "rawdescription": "\n\nthree sixty component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  Input, OnChanges,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser'\nimport { of } from 'rxjs'\nimport { delay, tap } from 'rxjs/operators'\n\n/**\n * three sixty component decorator\n */\n@Component({\n  selector: 'quang-three-sixty-image',\n  templateUrl: './three-sixty-image.component.html',\n  styleUrls: ['./three-sixty-image.component.scss']\n})\n/**\n * three sixty component\n */\nexport class ThreeSixtyImageComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * the height of the image\n   */\n  @Input() height: string = ''\n  /**\n   * the url of the default image before the final images are loaded\n   */\n  @Input() loadingSrc: string = 'url(\"assets/images/lazy/default-placeholder.png\")'\n  /**\n   * The custom class to add to the component\n   */\n  @Input() customClass: string[] = []\n  /**\n   * the url list of the images to be displayed in sequence\n   */\n  @Input() images: string[] = []\n  /**\n   * enable the buttons that manage the rotation\n   */\n  @Input() clockwise: boolean = true\n  /**\n   * time between one image and another\n   */\n  @Input() timeRotation: number = 0\n  /**\n   * delay time before the start of the rotation\n   */\n  @Input() delayTime: number = 0\n\n  @ViewChild('wrapper') wrapper: ElementRef<HTMLDivElement> | null = null\n  /**\n   * rotation step\n   */\n  step: number = 30\n  /**\n   * current x vlaue\n   */\n  currentX: any\n  /**\n   * current eframe\n   */\n  currentFrame: number = 0\n  /**\n   * intervall timing wrapper\n   */\n  intervalId: any\n  /**\n   * mouse state\n   */\n  mouseStateDown = false\n  /**\n   * current image url\n   */\n  imageUrl: SafeStyle = ''\n  /**\n   * play status\n   */\n  play: boolean = true\n\n  /**\n   * constructor\n   * @param sanitizer\n   */\n  constructor (\n    private readonly sanitizer: DomSanitizer\n  ) {\n  }\n\n  /**\n   * If the url list changes, it waits for the delay time entered and starts the rotation\n   * If the starting image changes, it sanitizes the url and sets it as the current image\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId)\n    }\n    if (changes.images?.currentValue) {\n      of(changes.images?.currentValue)\n        .pipe(\n          tap((list) => { this.images = list }),\n          delay(this.delayTime)\n        )\n        .subscribe(list => {\n          this.imageUrl = this.sanitizer.bypassSecurityTrustStyle(`url(\"${this.images[0]}\")`)\n          this.autoRotator()\n        })\n    }\n    if (changes.loadingSrc?.currentValue) {\n      this.imageUrl = this.sanitizer.bypassSecurityTrustStyle(this.loadingSrc)\n    }\n  }\n\n  /**\n   * function triggered on the movement of the mouse,\n   * controls the status of the rotation and the movement of the mouse to set the rotation to the right or left\n   * @param event\n   */\n  mouseMove (event: any): void {\n    if (this.mouseStateDown) {\n      const screenX = (event.screenX) ? event.screenX : event.touches[0].screenX\n      if (this.currentX - screenX >= this.step) {\n        this.rotator('-')\n        this.currentX = screenX\n      } else if (this.currentX - screenX <= -this.step) {\n        this.rotator('+')\n        this.currentX = screenX\n      }\n    }\n  }\n\n  /**\n   * Event triggered when the mouse button is pressed, saves the state of the mouse rotation\n   * @param event\n   */\n  mouseDown (event: any): void {\n    event.preventDefault()\n    this.currentX = event.screenX\n    if (this.play) {\n      clearInterval(this.intervalId)\n    }\n    this.intervalId = null\n    this.mouseStateDown = true\n  }\n\n  /**\n   * Event triggered when the mouse button is release, saves the state of the mouse rotation\n   * @param event\n   */\n  mouseUp (event: any): void {\n    event.preventDefault()\n    this.currentX = event.screenX\n    if (this.play) {\n      this.autoRotator()\n    }\n    this.mouseStateDown = false\n  }\n\n  /**\n   * Check if the rotation is right or left and calculate which image should be displayed\n   * @param act\n   */\n  rotator (act: string): void {\n    if (this.clockwise) {\n      if (act === '+') {\n        this.currentFrame++\n        this.currentFrame = (this.currentFrame > this.images.length - 1) ? 0 : this.currentFrame\n      } else {\n        this.currentFrame--\n        this.currentFrame = (this.currentFrame <= 0) ? this.images.length - 1 : this.currentFrame\n      }\n    } else {\n      if (act === '-') {\n        this.currentFrame++\n        this.currentFrame = (this.currentFrame > this.images.length - 1) ? 0 : this.currentFrame\n      } else {\n        this.currentFrame--\n        this.currentFrame = (this.currentFrame <= 0) ? this.images.length - 1 : this.currentFrame\n      }\n    }\n    this.imageUrl = this.sanitizer.bypassSecurityTrustStyle(`url(\"${this.images[this.currentFrame]}\")`)\n  }\n\n  /**\n   * Unleash automatic image rotation\n   */\n  autoRotator (): void {\n    this.intervalId = setInterval(\n      () => {\n        this.rotator('+')\n      }, this.timeRotation)\n  }\n\n  /**\n   * change the state of the play button\n   */\n  togglePlay (): void {\n    this.play = !this.play\n    if (this.play) {\n      this.autoRotator()\n    } else {\n      clearInterval(this.intervalId)\n    }\n  }\n\n  /**\n   * sanitize the url of the image\n   * @param img\n   */\n  getUrl (img: string): SafeUrl {\n    return this.sanitizer.bypassSecurityTrustStyle(`url(\"${img}\")`)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.wrapper-360 {\n  position: relative;\n  div {\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: contain;\n  }\n  .command {\n    white-space: nowrap;\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .preload {\n    display: inline;\n    width: 0 !important;\n    height: 0 !important;\n  }\n}\n",
                    "styleUrl": "./three-sixty-image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 85,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1830,
                            "end": 1839,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "sanitizer"
                        },
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1824,
                            "end": 1829,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"wrapper-360\"\n     #wrapper\n     [ngClass]=\"customClass\"\n     [id]=\"id\">\n  <div\n    (mousedown)=\"mouseDown($event)\"\n    (mouseup)=\"mouseUp($event)\"\n    (mousemove)=\"mouseMove($event)\"\n    [style.background-image]=\"imageUrl\"\n    [style.height]=\"height\"\n  ></div>\n  <div class=\"command\">\n    <button\n      class=\"btn btn-secondary\"\n      [hidden]=\"play\"\n      (click)=\"rotator('-')\">\n      <ng-content select=\"[previousIcon]\"></ng-content>\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      (click)=\"togglePlay()\"\n      *ngIf=\"play\">\n      <ng-content select=\"[stopIcon]\"></ng-content>\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      (click)=\"togglePlay()\"\n      *ngIf=\"!play\">\n      <ng-content select=\"[playIcon]\"></ng-content>\n    </button>\n    <button\n      class=\"btn btn-secondary\"\n      [hidden]=\"play\"\n      (click)=\"rotator('+')\">\n      <ng-content select=\"[nextIcon]\"></ng-content>\n    </button>\n  </div>\n  <div *ngFor=\"let img of images\"\n       class=\"preload\"\n       [style.background]=\"getUrl(img)\"\n  ></div>\n</div>\n\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-39ccaee2c7c8096442fe6a3a084bfd2653434c59de7fa33609ca4f5ac2cd4ded94fb04708188ff4730a069f69a72cb14f998c98638860a71e3417702986bad1a",
            "file": "projects/quang-core/src/lib/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "`Input ${this.label}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine the arialabel tag for accessibility,\nIf not specified, it takes 'input' concatenated to the label by default\n",
                    "description": "<p>Determine the arialabel tag for accessibility,\nIf not specified, it takes &#39;input&#39; concatenated to the label by default</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of additional classes to the input field\n",
                    "description": "<p>Array of additional classes to the input field</p>\n",
                    "line": 31,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the error message for the user\n",
                    "description": "<p>Defines if you want to display the error message for the user</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated\n",
                    "description": "<p>The name of the form, this input is used to create keys for error, validation or help messages.\nIt will be the first key element generated</p>\n",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the help message for the user\n",
                    "description": "<p>Defines if you want to display the help message for the user</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display on the input field\n",
                    "description": "<p>The label to display on the input field</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelInline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the label is displayed on the same line as the input field\n",
                    "description": "<p>Defines whether the label is displayed on the same line as the input field</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines if you want to display the success message for the user\n",
                    "description": "<p>Defines if you want to display the success message for the user</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicate the position in the page navigation flow with the tab key\n",
                    "description": "<p>Indicate the position in the page navigation flow with the tab key</p>\n",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the error message</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nthe status of the error message\n"
                },
                {
                    "name": "_helpMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the help message</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nthe status of the help message\n"
                },
                {
                    "name": "_requiredValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Contains the value required by a validation when it fails</p>\n",
                    "line": 93,
                    "rawdescription": "\n\nContains the value required by a validation when it fails\n"
                },
                {
                    "name": "_successMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>the status of the success message</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nthe status of the success message\n"
                },
                {
                    "name": "_value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>The value of the input</p>\n",
                    "line": 77,
                    "rawdescription": "\n\nThe value of the input\n"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "cva access",
                    "line": 113,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSlideToggle | undefined",
                    "optional": false,
                    "description": "<p>The html input element</p>\n",
                    "line": 73,
                    "rawdescription": "\n\nThe html input element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChanged",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 103,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "line": 97,
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\nStart the check on the validation of the field\n",
                    "description": "<p>Checks if focus is required when displaying the input field.\nStart the check on the validation of the field</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if focus is required when displaying the input field.\n",
                    "description": "<p>Checks if focus is required when displaying the input field.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3419,
                                "end": 3426,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3413,
                                "end": 3418,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate the key for the help message\n",
                    "description": "<p>create the key for the help message</p>\n"
                },
                {
                    "name": "observeValidate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages\n",
                    "description": "<p>When the input field changes,\nthe validation status is retrieved and the success message or error messages displayed.\nIf there is an error with a specific required value it is passed to the translation pipe\nto allow for the creation of custom messages</p>\n"
                },
                {
                    "name": "onChangedHandler",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the input changes,\nits value is retrieved from the html element and the status change is signaled to the form\n",
                    "description": "<p>When the input changes,\nits value is retrieved from the html element and the status change is signaled to the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4011,
                                "end": 4012,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4005,
                                "end": 4010,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\n",
                    "description": "<p>Standard definition to create a control value accessor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the input field from the form is disabled, the html input tag is defined as disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStandard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed\n",
                    "description": "<p>Standard definition to create a control value accessor\nWhen the value of the input field from the form is set, the value of the input html tag is changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>toggle component decorator</p>\n",
            "rawdescription": "\n\ntoggle component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self, SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\nimport { delay, filter } from 'rxjs/operators'\nimport { MatSlideToggle } from '@angular/material/slide-toggle'\n\n/**\n * toggle component decorator\n */\n@Component({\n  selector: 'quang-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.scss']\n})\n/**\n * toggle component\n */\nexport class ToggleComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {\n  /**\n   * Array of additional classes to the input field\n   */\n  @Input() customClass: string[] = []\n  /**\n   * The label to display on the input field\n   */\n  @Input() label: string = ''\n  /**\n   * Determine the arialabel tag for accessibility,\n   * If not specified, it takes 'input' concatenated to the label by default\n   */\n  @Input() ariaLabel: string = `Input ${this.label}`\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * Defines if you want to display the success message for the user\n   */\n  @Input() successMessage: boolean = false\n  /**\n   * Defines if you want to display the error message for the user\n   */\n  @Input() errorMessage: boolean = false\n  /**\n   * Defines if you want to display the help message for the user\n   */\n  @Input() helpMessage: boolean = false\n  /**\n   * Defines whether the label is displayed on the same line as the input field\n   */\n  @Input() labelInline: boolean = false\n  /**\n   * The name of the form, this input is used to create keys for error, validation or help messages.\n   * It will be the first key element generated\n   */\n  @Input() formName: string = ''\n  /**\n   * Indicate the position in the page navigation flow with the tab key\n   */\n  @Input() tabIndex: number = 0\n  /**\n   * The html input element\n   */\n  @ViewChild('input', { static: true }) input: MatSlideToggle | undefined\n  /**\n   * The value of the input\n   */\n  _value: boolean = false\n  /**\n   * the status of the success message\n   */\n  _successMessage: string = ''\n  /**\n   * the status of the error message\n   */\n  _errorMessage: string = ''\n  /**\n   * the status of the help message\n   */\n  _helpMessage: string = ''\n  /**\n   * Contains the value required by a validation when it fails\n   */\n  _requiredValue: any = ''\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onTouched: any = () => {\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  onChanged: any = () => {\n  }\n\n  /**\n   * constructor\n   * @param renderer html access\n   * @param control cva access\n   */\n  constructor (\n    private readonly renderer: Renderer2,\n    @Self() @Optional() public control: NgControl\n  ) {\n    this.control.valueAccessor = this\n  }\n\n  /**\n   * create the key for the help message\n   */\n  ngOnInit (): void {\n    if (this.helpMessage) {\n      this._helpMessage = `${this.formName}.${this.control?.name}.help`\n    }\n    if (this.successMessage) {\n      this._successMessage = `${this.formName}.${this.control?.name}.valid`\n    }\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * Start the check on the validation of the field\n   */\n  ngAfterViewInit (): void {\n    this.observeValidate()\n  }\n\n  /**\n   * Checks if focus is required when displaying the input field.\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.autofocus?.currentValue && this.input) {\n      this.input.focus()\n    }\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnTouched (fn: any): void {\n    this.onTouched = fn\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   */\n  registerOnChange (fn: any): void {\n    this.onChanged = fn\n  }\n\n  /**\n   * When the input changes,\n   * its value is retrieved from the html element and the status change is signaled to the form\n   * @param e\n   */\n  onChangedHandler (e: Event): void {\n    this._value = (e.target as HTMLInputElement).checked\n    this.onTouched()\n    this.onChanged(this._value)\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the value of the input field from the form is set, the value of the input html tag is changed\n   */\n  writeValue (value: any): void {\n    this._value = !!value\n    if (this.input) this.input.checked = !!value\n  }\n\n  /**\n   * Standard definition to create a control value accessor\n   * When the input field from the form is disabled, the html input tag is defined as disabled\n   */\n  setDisabledState (isDisabled: boolean): void {\n    this.input?.setDisabledState(isDisabled)\n  }\n\n  /**\n   * When the input field changes,\n   * the validation status is retrieved and the success message or error messages displayed.\n   * If there is an error with a specific required value it is passed to the translation pipe\n   * to allow for the creation of custom messages\n   */\n  observeValidate (): void {\n    this.control?.statusChanges?.pipe(\n      delay(0),\n      filter(() => !!this.control.dirty)\n    ).subscribe(() => {\n      if (this.control.invalid && this.errorMessage) {\n        for (const error in this.control.errors) {\n          if (Object.prototype.hasOwnProperty.call(this.control.errors.error, '')) {\n            if (this.control.errors[error]) {\n              this._errorMessage = `${this.formName}.${this.control?.name}.${error}`\n              this._requiredValue = this.control.errors[error].requiredValue\n            }\n          }\n        }\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toggle-wrapper {\n  &.form-inline {\n    .form-label {\n      margin-right: .5rem\n    }\n  }\n\n  label {\n    display: block;\n  }\n}\n",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "control",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 104,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2630,
                            "end": 2638,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2624,
                            "end": 2629,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>html access</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2663,
                            "end": 2670,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "control"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2657,
                            "end": 2662,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>cva access</p>\n"
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mb-3 toggle-wrapper\"\n     [class.form-inline]=\"labelInline\">\n  <label [htmlFor]=\"id\"\n         class=\"form-label\"\n         [attr.aria-label]=\"ariaLabel | transloco\"\n         *ngIf=\"label\">\n    {{label | transloco}}\n    <span [hidden]=\"!control?.errors?.required\">*</span>\n  </label>\n  <mat-slide-toggle\n    [id]=\"id\"\n    [ngClass]=\"customClass\"\n    [class.is-valid]=\"control?.valid && control?.dirty && successMessage\"\n    [class.is-invalid]=\"control?.invalid && control?.dirty && errorMessage\"\n    [attr.aria-label]=\"ariaLabel | transloco\"\n    (input)=\"onChangedHandler($event)\"\n    (blur)=\"onTouched()\"\n    #input\n  ></mat-slide-toggle>\n  <div class=\"valid-feedback\"\n       aria-live=\"assertive\">\n    {{_successMessage | transloco}}\n  </div>\n  <div class=\"invalid-feedback\"\n       aria-live=\"polite\"\n       [id]=\"id + '-error'\">\n    {{_errorMessage | transloco: { requiredValue: _requiredValue } }}\n  </div>\n  <small [id]=\"id + '-help'\"\n         aria-live=\"assertive\"\n         class=\"form-text text-muted\"\n         [hidden]=\"control?.dirty && (control?.valid && successMessage || control?.invalid && errorMessage)\"\n         *ngIf=\"helpMessage\">\n    {{_helpMessage | transloco}}\n  </small>\n</div>\n\n"
        },
        {
            "name": "VideoComponent",
            "id": "component-VideoComponent-734caefe779b09e1a76214a30cfa5127da6489dc4d28881e84b32d75808d46a0219a90e26d972aa7d9caf71b92eea4a0beeefad34fb22968187b73a28dacc4e9",
            "file": "projects/quang-media/src/lib/video/video.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "quang-video",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "templateUrl": [
                "./video.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe arialabel that describes the component\n",
                    "description": "<p>The arialabel that describes the component</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autoplay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the video should start when the component is loaded\n",
                    "description": "<p>Defines whether the video should start when the component is loaded</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsets the height of the video\n",
                    "description": "<p>sets the height of the video</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHtml id of input\n",
                    "description": "<p>Html id of input</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loop",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefine whether the video should restart when finished\n",
                    "description": "<p>Define whether the video should restart when finished</p>\n",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mute",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the video should be played without audio\n",
                    "description": "<p>Defines whether the video should be played without audio</p>\n",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "poster",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe video poster is the image displayed when the video has not started yet\n",
                    "description": "<p>The video poster is the image displayed when the video has not started yet</p>\n",
                    "line": 48,
                    "type": "SafeUrl | null",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe source of the video\n",
                    "description": "<p>The source of the video</p>\n",
                    "line": 44,
                    "type": "SafeUrl | null",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'video/mp4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines the type of video played\n",
                    "description": "<p>Defines the type of video played</p>\n",
                    "line": 68,
                    "type": "\"video/mp4\" | \"video/webm\" | \"video/OGG\"",
                    "decorators": []
                },
                {
                    "name": "viewControl",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefines whether the video should show the control button bar\n",
                    "description": "<p>Defines whether the video should show the control button bar</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset the width of the video\n",
                    "description": "<p>set the width of the video</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_currentTime",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The current time of the video</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nThe current time of the video\n"
                },
                {
                    "name": "video",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLVideoElement> | null",
                    "optional": false,
                    "description": "<p>The html video element</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nThe html video element\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'video', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen the source changes, sanitize the url and start the video,\nWhen the poster changes sanitize the url and display the poster,\nif the video at the change of url is not restarted, I force the restart\n",
                    "description": "<p>When the source changes, sanitize the url and start the video,\nWhen the poster changes sanitize the url and display the poster,\nif the video at the change of url is not restarted, I force the restart</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2129,
                                "end": 2136,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2123,
                                "end": 2128,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>component changes</p>\n"
                        }
                    ]
                },
                {
                    "name": "toFullScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod to view the video in full screen\n",
                    "description": "<p>Method to view the video in full screen</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>video component decorator</p>\n",
            "rawdescription": "\n\nvideo component decorator\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core'\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser'\n\n/**\n * video component decorator\n */\n@Component({\n  selector: 'quang-video',\n  templateUrl: './video.component.html',\n  styles: [''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * video component\n */\nexport class VideoComponent implements OnChanges {\n  /**\n   * Html id of input\n   */\n  @Input() id: string = ''\n  /**\n   * set the width of the video\n   */\n  @Input() width: string = '100%'\n  /**\n   * sets the height of the video\n   */\n  @Input() height: string = 'auto'\n  /**\n   * The arialabel that describes the component\n   */\n  @Input() ariaLabel: string = ''\n  /**\n   * The source of the video\n   */\n  @Input() src: SafeUrl | null = null\n  /**\n   * The video poster is the image displayed when the video has not started yet\n   */\n  @Input() poster: SafeUrl | null = null\n  /**\n   * Defines whether the video should start when the component is loaded\n   */\n  @Input() autoplay: boolean = false\n  /**\n   * Defines whether the video should show the control button bar\n   */\n  @Input() viewControl: boolean = false\n  /**\n   * Define whether the video should restart when finished\n   */\n  @Input() loop: boolean = false\n  /**\n   * Defines whether the video should be played without audio\n   */\n  @Input() mute: boolean = false\n  /**\n   * Defines the type of video played\n   */\n  @Input() type: 'video/mp4' | 'video/webm' | 'video/OGG' = 'video/mp4'\n  /**\n   * The html video element\n   */\n  @ViewChild('video', { static: true }) video: ElementRef<HTMLVideoElement> | null = null\n  /**\n   * The current time of the video\n   */\n  _currentTime: number = 0\n\n  /**\n   * constructor\n   * @param sanitizer\n   */\n  constructor (\n    private readonly sanitizer: DomSanitizer\n  ) {\n  }\n\n  /**\n   * When the source changes, sanitize the url and start the video,\n   * When the poster changes sanitize the url and display the poster,\n   * if the video at the change of url is not restarted, I force the restart\n   * @param changes component changes\n   */\n  ngOnChanges (changes: SimpleChanges): void {\n    if (changes.src?.currentValue) {\n      this.src = this.sanitizer.bypassSecurityTrustUrl(changes.src?.currentValue)\n      if (this.video) {\n        this.video.nativeElement.pause()\n        this._currentTime = 0\n        this.video.nativeElement.load()\n      }\n    }\n    if (changes.baseImage?.currentValue) {\n      this.poster = this.sanitizer.bypassSecurityTrustUrl(changes.baseImage?.currentValue)\n    }\n  }\n\n  /**\n   * Method to view the video in full screen\n   */\n  public toFullScreen (): void {\n    if ((this.video?.nativeElement)?.requestFullscreen) {\n      (this.video?.nativeElement)?.requestFullscreen()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "rawdescription": "\n\nconstructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1808,
                            "end": 1817,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "sanitizer"
                        },
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1802,
                            "end": 1807,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<video\n  [id]=\"id\"\n  [controls]=\"viewControl\"\n  preload=\"none\"\n  [autoplay]=\"autoplay\"\n  [loop]=\"loop\"\n  [poster]=\"poster\"\n  [muted]=\"mute\"\n  [src]=\"src\"\n  [currentTime]=\"_currentTime\"\n  [attr.aria-describedby]=\"ariaLabel\"\n  [ngStyle]=\"{width: width, height: height}\"\n  #video\n></video>\n"
        }
    ],
    "modules": [
        {
            "name": "QuangAuthModule",
            "id": "module-QuangAuthModule-8ac1335314f1c933a46704b0c90ce245817869b36e42f3f92ce9d3cfd0eef3964b57d3817593d2c026ab71f5ffdac2757f3f70918a79b72e285e38f6a51aa50e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-auth/src/lib/quang-auth.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "QuangAuthConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<QuangAuthModule>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "QuangAuthConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core'\nimport { HasRolesDirective } from './quang-auth-directive/has-roles.directive'\nimport { IsAuthenticatedDirective } from './quang-auth-directive/is-authenticated.directive'\nimport { CommonModule } from '@angular/common'\nimport { HasUntilRolesDirective } from './quang-auth-directive/has-until-roles.directive'\nimport { StoreModule } from '@ngrx/store'\nimport { QUANGAUTH_KEY } from './quang-auth-module.selector'\n\nimport { QuangAuthService } from './quang-auth.service'\nimport { QuangAuthConfig } from './quang-auth.config'\nimport { IsNotAuthenticatedDirective } from './quang-auth-directive/is-not-authenticated.directive'\nimport { quangAuthReducer } from './quang-auth-module.reducer'\n\n@NgModule({\n  declarations: [\n    HasRolesDirective,\n    HasUntilRolesDirective,\n    IsAuthenticatedDirective,\n    IsNotAuthenticatedDirective\n  ],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(QUANGAUTH_KEY, quangAuthReducer)\n  ],\n  providers: [\n    QuangAuthService\n  ],\n  exports: [\n    HasRolesDirective,\n    HasUntilRolesDirective,\n    IsAuthenticatedDirective,\n    IsNotAuthenticatedDirective\n  ]\n})\nexport class QuangAuthModule {\n  static forRoot (config?: QuangAuthConfig): ModuleWithProviders<QuangAuthModule> {\n    return {\n      ngModule: QuangAuthModule,\n      providers: [\n        { provide: QuangAuthConfig, useValue: config }\n      ]\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "QuangAuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HasRolesDirective"
                        },
                        {
                            "name": "HasUntilRolesDirective"
                        },
                        {
                            "name": "IsAuthenticatedDirective"
                        },
                        {
                            "name": "IsNotAuthenticatedDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HasRolesDirective"
                        },
                        {
                            "name": "HasUntilRolesDirective"
                        },
                        {
                            "name": "IsAuthenticatedDirective"
                        },
                        {
                            "name": "IsNotAuthenticatedDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangCalendarModule",
            "id": "module-QuangCalendarModule-82c10298219a4d42566a4abbb023ac721b48d97ce7921865070b4e3a6f56032d17b52c4b92bed099b80aa79dd359b52847a5ac58f30c1e8329ba2c4a278c1eb9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-calendar/src/lib/quang-calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\n\nimport { CommonModule } from '@angular/common'\nimport { CalendarComponent } from './calendar/calendar.component'\nimport { FullCalendarModule } from '@fullcalendar/angular'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport bootstrapPlugin from '@fullcalendar/bootstrap'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport { TranslocoModule } from '@ngneat/transloco'\n\nFullCalendarModule.registerPlugins([\n  dayGridPlugin,\n  bootstrapPlugin,\n  interactionPlugin,\n  timeGridPlugin\n])\n\n@NgModule({\n  declarations: [\n    CalendarComponent\n  ],\n  imports: [\n    CommonModule,\n    FullCalendarModule,\n    TranslocoModule\n  ],\n  exports: [\n    CalendarComponent\n  ]\n})\nexport class QuangCalendarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangChartModule",
            "id": "module-QuangChartModule-c30f9b403f7e0eb2d3b8446bfc7a19618e475cc82dfc2f9e657edf0e975583cbaffc446ae9e849fb1eb2cf24d5c121320ac5ca598f1b7c4ab03ffc430a6b596b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-chart/src/lib/quang-chart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport * as echarts from 'echarts'\nimport { NgxEchartsModule } from 'ngx-echarts'\nimport { CommonModule } from '@angular/common'\nimport { ChartAreaComponent } from './chart-area/chart-area.component'\nimport { ChartDoughnutComponent } from './chart-doughnut/chart-doughnut.component'\nimport { ChartCandlestickComponent } from './chart-candlestick/chart-candlestick.component'\nimport { ChartBarComponent } from './chart-bar/chart-bar.component'\nimport { ChartLineComponent } from './chart-line/chart-line.component'\nimport { ChartPieComponent } from './chart-pie/chart-pie.component'\nimport { ChartRadarComponent } from './chart-radar/chart-radar.component'\nimport { ChartTreemapComponent } from './chart-treemap/chart-treemap.component'\nimport { TranslocoModule } from '@ngneat/transloco'\nimport { ChartGaugeComponent } from './chart-gauge/chart-gauge.component'\nimport { ChartTreeComponent } from './chart-tree/chart-tree.component'\n\n@NgModule({\n  declarations: [\n    ChartAreaComponent,\n    ChartBarComponent,\n    ChartCandlestickComponent,\n    ChartDoughnutComponent,\n    ChartLineComponent,\n    ChartPieComponent,\n    ChartRadarComponent,\n    ChartTreemapComponent,\n    ChartGaugeComponent,\n    ChartTreeComponent\n  ],\n  imports: [\n    NgxEchartsModule.forRoot({ echarts }),\n    CommonModule,\n    TranslocoModule\n  ],\n  exports: [\n    ChartAreaComponent,\n    ChartBarComponent,\n    ChartCandlestickComponent,\n    ChartDoughnutComponent,\n    ChartLineComponent,\n    ChartPieComponent,\n    ChartRadarComponent,\n    ChartTreemapComponent,\n    ChartGaugeComponent,\n    ChartTreeComponent\n  ]\n})\nexport class QuangChartModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChartAreaComponent"
                        },
                        {
                            "name": "ChartBarComponent"
                        },
                        {
                            "name": "ChartCandlestickComponent"
                        },
                        {
                            "name": "ChartDoughnutComponent"
                        },
                        {
                            "name": "ChartGaugeComponent"
                        },
                        {
                            "name": "ChartLineComponent"
                        },
                        {
                            "name": "ChartPieComponent"
                        },
                        {
                            "name": "ChartRadarComponent"
                        },
                        {
                            "name": "ChartTreeComponent"
                        },
                        {
                            "name": "ChartTreemapComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChartAreaComponent"
                        },
                        {
                            "name": "ChartBarComponent"
                        },
                        {
                            "name": "ChartCandlestickComponent"
                        },
                        {
                            "name": "ChartDoughnutComponent"
                        },
                        {
                            "name": "ChartGaugeComponent"
                        },
                        {
                            "name": "ChartLineComponent"
                        },
                        {
                            "name": "ChartPieComponent"
                        },
                        {
                            "name": "ChartRadarComponent"
                        },
                        {
                            "name": "ChartTreeComponent"
                        },
                        {
                            "name": "ChartTreemapComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangComponentsModule",
            "id": "module-QuangComponentsModule-36d0b4e47026c079f8e5d3fdd89b6e41ce306982159e4e11c2820c2138ed6bdbf76c6e62a09eb115876fabab877eb1e06e7eaebac8591c3b22eb85b0852e8468",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-components/src/lib/quang-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CardComponent } from './card/card.component'\nimport { CardActionComponent } from './card-action/card-action.component'\nimport { CardSimpleComponent } from './card-simple/card-simple.component'\nimport { CommonModule } from '@angular/common'\nimport { CardHeaderComponent } from './card-header/card-header.component'\nimport { CardActionHeaderComponent } from './card-action-header/card-action-header.component'\nimport { CardImageComponent } from './card-image/card-image.component'\nimport { TranslocoModule } from '@ngneat/transloco'\nimport { CardFooterComponent } from './card-footer/card-footer.component'\n\n@NgModule({\n  declarations: [\n    CardComponent,\n    CardActionComponent,\n    CardActionHeaderComponent,\n    CardSimpleComponent,\n    CardHeaderComponent,\n    CardImageComponent,\n    CardFooterComponent\n  ],\n  imports: [\n    CommonModule,\n    TranslocoModule\n  ],\n  exports: [\n    CardComponent,\n    CardActionComponent,\n    CardActionHeaderComponent,\n    CardSimpleComponent,\n    CardHeaderComponent,\n    CardImageComponent,\n    CardFooterComponent\n  ]\n})\nexport class QuangComponentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardActionComponent"
                        },
                        {
                            "name": "CardActionHeaderComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardFooterComponent"
                        },
                        {
                            "name": "CardHeaderComponent"
                        },
                        {
                            "name": "CardImageComponent"
                        },
                        {
                            "name": "CardSimpleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardActionComponent"
                        },
                        {
                            "name": "CardActionHeaderComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardFooterComponent"
                        },
                        {
                            "name": "CardHeaderComponent"
                        },
                        {
                            "name": "CardImageComponent"
                        },
                        {
                            "name": "CardSimpleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangCoreModule",
            "id": "module-QuangCoreModule-d222174a1211e5d793a138b0063530cbb87947bb9dc218f6599e236545ac8bc0bfc2520a0c565465197bb41100fc6f828950bd071bdb393c42d533dae2e0ba04",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-core/src/lib/quang-core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { CommonModule } from '@angular/common'\nimport { InputNumberComponent } from './input-number/input-number.component'\nimport { InputTextComponent } from './input-text/input-text.component'\nimport { InputEmailComponent } from './input-email/input-email.component'\nimport { InputSearchComponent } from './input-search/input-search.component'\nimport { QuangAuthDownloadDirective } from './quang-auth-donwload/quang-auth-download.directive'\nimport { QuangAuthImageDirective } from './quang-auth-image/quang-auth-image.directive'\nimport { SelectObjComponent } from './select-obj/select-obj.component'\nimport { SelectStrgComponent } from './select-strg/select-strg.component'\nimport { TextAreaComponent } from './text-area/text-area.component'\nimport { MatInputModule } from '@angular/material/input'\nimport { ToggleComponent } from './toggle/toggle.component'\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle'\nimport { QuillModule } from 'ngx-quill'\nimport { TextEditorComponent } from './text-editor/text-editor.component'\nimport { TranslocoModule } from '@ngneat/transloco'\nimport { InputPasswordComponent } from './input-password/input-password.component'\nimport { InputColorComponent } from './input-color/input-color.component'\nimport { InputCheckboxComponent } from './input-checkbox/input-checkbox.component'\nimport { InputRadioComponent } from './input-radio/input-radio.component'\nimport { MultiSelectStrgComponent } from './multi-select-strg/multi-select-strg.component'\nimport { MultiSelectObjComponent } from './multi-select-obj/multi-select-obj.component'\nimport { AutocompleteStrgComponent } from './autocomplete-strg/autocomplete-strg.component'\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead'\nimport { AutocompleteStrgAsyncComponent } from './autocomplete-strg-async/autocomplete-strg-async.component'\nimport { AutocompleteObjComponent } from './autocomplete-obj/autocomplete-obj.component'\nimport { AutocompleteObjAsyncComponent } from './autocomplete-obj-async/autocomplete-obj-async.component'\nimport { QuangAutocompleteAsyncService } from './autocomplete-service/quang-autocomplete-async.service'\nimport { MatSliderModule } from '@angular/material/slider'\nimport { SliderComponent } from './slider/slider.component'\nimport { PaginatorComponent } from './paginator/paginator.component'\nimport { MatPaginatorIntl, MatPaginatorModule } from '@angular/material/paginator'\nimport { QuangPaginatorService } from './paginator/paginator.service'\nimport { InputFractionComponent } from './input-fraction/input-fraction.component'\nimport { PaginatorLanguage } from './paginator/paginator.language'\nimport { InputFileComponent } from './input-file/input-file.component'\nimport { NgxFileDropModule } from 'ngx-file-drop'\nimport { InputUrlComponent } from './input-url/input-url.component'\nimport { InputTelComponent } from './input-tel/input-tel.component'\nimport { MatTooltipModule } from '@angular/material/tooltip'\nimport { DatalistComponent } from './datalist/datalist.component'\n\n@NgModule({\n  declarations: [\n    InputTextComponent,\n    InputNumberComponent,\n    InputEmailComponent,\n    InputSearchComponent,\n    QuangAuthDownloadDirective,\n    QuangAuthImageDirective,\n    SelectObjComponent,\n    SelectStrgComponent,\n    TextAreaComponent,\n    ToggleComponent,\n    TextEditorComponent,\n    InputPasswordComponent,\n    InputColorComponent,\n    InputCheckboxComponent,\n    InputRadioComponent,\n    MultiSelectStrgComponent,\n    MultiSelectObjComponent,\n    AutocompleteStrgComponent,\n    AutocompleteStrgAsyncComponent,\n    AutocompleteObjComponent,\n    AutocompleteObjAsyncComponent,\n    SliderComponent,\n    PaginatorComponent,\n    InputFractionComponent,\n    InputFileComponent,\n    InputUrlComponent,\n    InputTelComponent,\n    DatalistComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    TranslocoModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    QuillModule.forRoot(),\n    TypeaheadModule.forRoot(),\n    MatSliderModule,\n    MatPaginatorModule,\n    NgxFileDropModule,\n    MatTooltipModule\n  ],\n  providers: [\n    QuangAutocompleteAsyncService,\n    QuangPaginatorService,\n    PaginatorLanguage,\n    { provide: MatPaginatorIntl, useClass: PaginatorLanguage }\n  ],\n  exports: [\n    InputTextComponent,\n    InputNumberComponent,\n    InputEmailComponent,\n    InputSearchComponent,\n    QuangAuthDownloadDirective,\n    QuangAuthImageDirective,\n    SelectObjComponent,\n    SelectStrgComponent,\n    TextAreaComponent,\n    ToggleComponent,\n    TextEditorComponent,\n    InputPasswordComponent,\n    InputColorComponent,\n    InputCheckboxComponent,\n    InputRadioComponent,\n    MultiSelectStrgComponent,\n    MultiSelectObjComponent,\n    AutocompleteStrgComponent,\n    AutocompleteStrgAsyncComponent,\n    AutocompleteObjComponent,\n    AutocompleteObjAsyncComponent,\n    SliderComponent,\n    PaginatorComponent,\n    InputFractionComponent,\n    InputFileComponent,\n    InputUrlComponent,\n    InputTelComponent,\n    DatalistComponent\n  ]\n})\nexport class QuangCoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PaginatorLanguage"
                        },
                        {
                            "name": "QuangAutocompleteAsyncService"
                        },
                        {
                            "name": "QuangPaginatorService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutocompleteObjAsyncComponent"
                        },
                        {
                            "name": "AutocompleteObjComponent"
                        },
                        {
                            "name": "AutocompleteStrgAsyncComponent"
                        },
                        {
                            "name": "AutocompleteStrgComponent"
                        },
                        {
                            "name": "DatalistComponent"
                        },
                        {
                            "name": "InputCheckboxComponent"
                        },
                        {
                            "name": "InputColorComponent"
                        },
                        {
                            "name": "InputEmailComponent"
                        },
                        {
                            "name": "InputFileComponent"
                        },
                        {
                            "name": "InputFractionComponent"
                        },
                        {
                            "name": "InputNumberComponent"
                        },
                        {
                            "name": "InputPasswordComponent"
                        },
                        {
                            "name": "InputRadioComponent"
                        },
                        {
                            "name": "InputSearchComponent"
                        },
                        {
                            "name": "InputTelComponent"
                        },
                        {
                            "name": "InputTextComponent"
                        },
                        {
                            "name": "InputUrlComponent"
                        },
                        {
                            "name": "MultiSelectObjComponent"
                        },
                        {
                            "name": "MultiSelectStrgComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "QuangAuthDownloadDirective"
                        },
                        {
                            "name": "QuangAuthImageDirective"
                        },
                        {
                            "name": "SelectObjComponent"
                        },
                        {
                            "name": "SelectStrgComponent"
                        },
                        {
                            "name": "SliderComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextEditorComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutocompleteObjAsyncComponent"
                        },
                        {
                            "name": "AutocompleteObjComponent"
                        },
                        {
                            "name": "AutocompleteStrgAsyncComponent"
                        },
                        {
                            "name": "AutocompleteStrgComponent"
                        },
                        {
                            "name": "DatalistComponent"
                        },
                        {
                            "name": "InputCheckboxComponent"
                        },
                        {
                            "name": "InputColorComponent"
                        },
                        {
                            "name": "InputEmailComponent"
                        },
                        {
                            "name": "InputFileComponent"
                        },
                        {
                            "name": "InputFractionComponent"
                        },
                        {
                            "name": "InputNumberComponent"
                        },
                        {
                            "name": "InputPasswordComponent"
                        },
                        {
                            "name": "InputRadioComponent"
                        },
                        {
                            "name": "InputSearchComponent"
                        },
                        {
                            "name": "InputTelComponent"
                        },
                        {
                            "name": "InputTextComponent"
                        },
                        {
                            "name": "InputUrlComponent"
                        },
                        {
                            "name": "MultiSelectObjComponent"
                        },
                        {
                            "name": "MultiSelectStrgComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "QuangAuthDownloadDirective"
                        },
                        {
                            "name": "QuangAuthImageDirective"
                        },
                        {
                            "name": "SelectObjComponent"
                        },
                        {
                            "name": "SelectStrgComponent"
                        },
                        {
                            "name": "SliderComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextEditorComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangDateModule",
            "id": "module-QuangDateModule-15a77baa229534935ed8b11dc7924fcb50c4d2f41289806227f5b3503fcd47441476249eaa7702d19433fa85ee7d18f41465f4082133dd4065f11c14e808eab4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-date/src/lib/quang-date.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { InputDateRangeComponent } from './input-date-range/input-date-range.component'\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker'\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker'\nimport { CommonModule } from '@angular/common'\nimport { TranslocoModule } from '@ngneat/transloco'\nimport { FormsModule } from '@angular/forms'\nimport { InputDateComponent } from './input-date/input-date.component'\nimport { InputDateTimeComponent } from './input-date-time/input-date-time.component'\nimport { InputTimeComponent } from './input-time/input-time.component'\n\n@NgModule({\n  declarations: [\n    InputDateRangeComponent,\n    InputDateComponent,\n    InputDateTimeComponent,\n    InputTimeComponent\n  ],\n  imports: [\n    CommonModule,\n    BsDatepickerModule.forRoot(),\n    TimepickerModule.forRoot(),\n    TranslocoModule,\n    FormsModule,\n  ],\n  exports: [\n    InputDateRangeComponent,\n    InputDateComponent,\n    InputDateTimeComponent,\n    InputTimeComponent\n  ]\n})\nexport class QuangDateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputDateComponent"
                        },
                        {
                            "name": "InputDateRangeComponent"
                        },
                        {
                            "name": "InputDateTimeComponent"
                        },
                        {
                            "name": "InputTimeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputDateComponent"
                        },
                        {
                            "name": "InputDateRangeComponent"
                        },
                        {
                            "name": "InputDateTimeComponent"
                        },
                        {
                            "name": "InputTimeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangDialogModule",
            "id": "module-QuangDialogModule-48d31782d6f0accc9c29d7679d19d5e57816b88db111d36e12ade3bd9b7e3806fd097c53f2bee0d913fe293c49f6264782a8ca32d04c4b55a66610b2a28fbe37",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-dialog/src/lib/quang-dialog.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "QuangDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<QuangDialogModule>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "QuangDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core'\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet'\nimport { QuangBottomSheetService } from './bottom-sheet/bottom-sheet.service'\nimport { QuangModalService } from './modal/quang-modal.service'\nimport { StoreModule } from '@ngrx/store'\nimport { quangDialogReducers } from './quang-dialog.reducers'\nimport { QuangSnackbarService } from './snackbar/quang-snackbar.service'\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\nimport { QuangToastComponent } from './toast/toast.component'\nimport { QuangToastService } from './toast/toast.service'\nimport { CommonModule } from '@angular/common'\nimport { TranslocoModule } from '@ngneat/transloco'\nimport { ModalModule } from 'ngx-bootstrap/modal'\nimport { LoaderComponent } from './loader/loader/loader.component'\nimport { QuangHttpErrorModalComponent } from './http-error/quang-http-error-modal/quang-http-error-modal.component'\nimport { QuangHttpErrorService } from './http-error/quang-http-error.service'\nimport { QuangDialogConfig } from './quang-dialog.config'\nimport { SentryDialogService } from './sentry/sentry-dialog.service'\nimport { QUANGDIALOG_KEY } from './quang-dialog.selector'\nimport { SkeletonComponent } from './skeleton/skeleton.component'\nimport { EffectsModule } from '@ngrx/effects'\nimport { NotificationEffects } from './notification/notification-store/effects/notification.effects'\nimport { QuangNotificationService } from './notification/notification.service'\n\n@NgModule({\n  declarations: [\n    QuangToastComponent,\n    LoaderComponent,\n    QuangHttpErrorModalComponent,\n    SkeletonComponent\n  ],\n  imports: [\n    MatBottomSheetModule,\n    StoreModule.forFeature(QUANGDIALOG_KEY, quangDialogReducers),\n    EffectsModule.forFeature([NotificationEffects]),\n    MatSnackBarModule,\n    CommonModule,\n    TranslocoModule,\n    ModalModule.forRoot()\n  ],\n  providers: [\n    QuangBottomSheetService,\n    QuangModalService,\n    QuangSnackbarService,\n    QuangToastService,\n    QuangHttpErrorService,\n    SentryDialogService,\n    QuangNotificationService\n  ],\n  exports: [\n    QuangToastComponent,\n    LoaderComponent,\n    QuangHttpErrorModalComponent,\n    SkeletonComponent\n  ]\n})\nexport class QuangDialogModule {\n  static forRoot (config?: QuangDialogConfig): ModuleWithProviders<QuangDialogModule> {\n    return {\n      ngModule: QuangDialogModule,\n      providers: [\n        { provide: QuangDialogConfig, useValue: config }\n      ]\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "QuangBottomSheetService"
                        },
                        {
                            "name": "QuangHttpErrorService"
                        },
                        {
                            "name": "QuangModalService"
                        },
                        {
                            "name": "QuangNotificationService"
                        },
                        {
                            "name": "QuangSnackbarService"
                        },
                        {
                            "name": "QuangToastService"
                        },
                        {
                            "name": "SentryDialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "QuangHttpErrorModalComponent"
                        },
                        {
                            "name": "QuangToastComponent"
                        },
                        {
                            "name": "SkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "QuangHttpErrorModalComponent"
                        },
                        {
                            "name": "QuangToastComponent"
                        },
                        {
                            "name": "SkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangEventModule",
            "id": "module-QuangEventModule-22e54634bfa948f2b43a766948160747b872bc561d87f9c23c8ec67c502043df2ef0a4cdc1116f11949201ac2954c09e280c7db9abc7070f7ae57b55c32df597",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-event/src/lib/quang-event.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { QuangEventSourceService } from './quang-event-source/quang-event-source.service'\nimport { QuangEventBusService } from './quang-event-bus/quang-event-bus.service'\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ],\n  exports: [],\n  providers: [\n    QuangEventSourceService,\n    QuangEventBusService\n  ]\n})\nexport class QuangEventModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "QuangEventBusService"
                        },
                        {
                            "name": "QuangEventSourceService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangKeycloakModule",
            "id": "module-QuangKeycloakModule-757cbd23b98ed7923475e04449b5b9b804f4bb3475934be2bbbf7a85313630da9b2d80c282d926384d6e445455c9222560461838b1112bd9a1658a21a906217d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-keycloak/src/lib/quang-keycloak.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "QuangKeycloakConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<QuangKeycloakModule>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "QuangKeycloakConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core'\nimport { HasRolesDirective } from './quang-keycloak-directive/has-roles.directive'\nimport { IsAuthenticatedDirective } from './quang-keycloak-directive/is-authenticated.directive'\nimport { CommonModule } from '@angular/common'\nimport { HasUntilRolesDirective } from './quang-keycloak-directive/has-until-roles.directive'\nimport { StoreModule } from '@ngrx/store'\nimport { QUANGKEYCLOAK_KEY } from './quang-keycloak-module.selector'\nimport { quangKeycloakReducer } from './quang-keycloak-module.reducer'\nimport { KeycloakAngularModule, KeycloakService } from 'keycloak-angular'\nimport { QuangKeycloakService } from './quang-keycloak.service'\nimport { QuangKeycloakConfig } from './quang-keycloak.config'\nimport { IsNotAuthenticatedDirective } from './quang-keycloak-directive/is-not-authenticated.directive'\n\n@NgModule({\n  declarations: [\n    HasRolesDirective,\n    HasUntilRolesDirective,\n    IsAuthenticatedDirective,\n    IsNotAuthenticatedDirective\n  ],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(QUANGKEYCLOAK_KEY, quangKeycloakReducer),\n    KeycloakAngularModule\n  ],\n  exports: [\n    HasRolesDirective,\n    HasUntilRolesDirective,\n    IsAuthenticatedDirective,\n    IsNotAuthenticatedDirective\n  ],\n  providers: [\n    KeycloakService,\n    QuangKeycloakService\n  ]\n})\nexport class QuangKeycloakModule {\n  static forRoot (config?: QuangKeycloakConfig): ModuleWithProviders<QuangKeycloakModule> {\n    return {\n      ngModule: QuangKeycloakModule,\n      providers: [\n        { provide: QuangKeycloakConfig, useValue: config }\n      ]\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "QuangKeycloakService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangMapModule",
            "id": "module-QuangMapModule-3adcb189c9e98c45c2a449474de2ea26a93f91e6f9c7ca99f04365b53c626803ea62b321b520e90c7bef0bd65a857841e9c282bc8485f2b2f6919f6b9535ada3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-map/src/lib/quang-map.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "QuangMapConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<QuangMapModule>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "QuangMapConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core'\nimport { GoogleMapComponent } from './google-map/google-map.component'\nimport { CommonModule } from '@angular/common'\nimport { QuangMapConfig } from './quang-map.config'\nimport { OpenStreetMapComponent } from './osmap/osmap.component'\nimport { QuangGoogleMapService } from './google-map/google-map.service'\n\n@NgModule({\n  declarations: [\n    GoogleMapComponent,\n    OpenStreetMapComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  providers: [QuangGoogleMapService],\n  exports: [\n    GoogleMapComponent,\n    OpenStreetMapComponent\n  ]\n})\nexport class QuangMapModule {\n  static forRoot (config?: QuangMapConfig): ModuleWithProviders<QuangMapModule> {\n    return {\n      ngModule: QuangMapModule,\n      providers: [\n        { provide: QuangMapConfig, useValue: config }\n      ]\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "QuangGoogleMapService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GoogleMapComponent"
                        },
                        {
                            "name": "OpenStreetMapComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GoogleMapComponent"
                        },
                        {
                            "name": "OpenStreetMapComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangMediaModule",
            "id": "module-QuangMediaModule-7968f2990db1f182722e9d02fd7afe2503d4e704c78f0a59b5ce7360f55998b9e078a47defc3ccf5dd1a3457aa703dab7e147663242e4bb64451b97b8313aee7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-media/src/lib/quang-media.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { PictureComponent } from './picture/picture.component'\nimport { ThreeSixtyImageComponent } from './three-sixty-image/three-sixty-image.component'\nimport { LazyLoadImageModule } from 'ng-lazyload-image'\nimport { CommonModule } from '@angular/common'\nimport { TranslocoModule } from '@ngneat/transloco'\nimport { VideoComponent } from './video/video.component'\nimport { AudioComponent } from './audio/audio.component'\nimport { CodeReaderComponent } from './code-reader/code-reader.component'\nimport { FormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [\n    PictureComponent,\n    ThreeSixtyImageComponent,\n    VideoComponent,\n    AudioComponent,\n    CodeReaderComponent\n  ],\n  imports: [\n    CommonModule,\n    LazyLoadImageModule,\n    TranslocoModule,\n    FormsModule\n  ],\n  exports: [\n    PictureComponent,\n    ThreeSixtyImageComponent,\n    VideoComponent,\n    AudioComponent,\n    CodeReaderComponent\n  ]\n})\nexport class QuangMediaModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AudioComponent"
                        },
                        {
                            "name": "CodeReaderComponent"
                        },
                        {
                            "name": "PictureComponent"
                        },
                        {
                            "name": "ThreeSixtyImageComponent"
                        },
                        {
                            "name": "VideoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AudioComponent"
                        },
                        {
                            "name": "CodeReaderComponent"
                        },
                        {
                            "name": "PictureComponent"
                        },
                        {
                            "name": "ThreeSixtyImageComponent"
                        },
                        {
                            "name": "VideoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QuangUtilityModule",
            "id": "module-QuangUtilityModule-647961a83ddc72824c8091a54177908d31734884bc6de0a6e6fcd729bcfe0119fb70adc28eef355928e348e47d91c4ae5a1aa65eeb331f93ba3f5bddbef24d5d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/quang-utility/src/lib/quang-utility.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { QuangStorageService } from './quang-storage-service/quang-storage.service'\nimport { NgxWebstorageModule } from 'ngx-webstorage'\nimport { QuangValidatorsService } from './quang-validators/quang-validators.service'\nimport { QuangLayoutService } from './quang-layout/quang-layout.service'\n\n@NgModule({\n  declarations: [],\n  imports: [\n    NgxWebstorageModule.forRoot()\n  ],\n  providers: [\n    QuangStorageService,\n    QuangValidatorsService,\n    QuangLayoutService\n  ],\n  exports: []\n})\nexport class QuangUtilityModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "QuangLayoutService"
                        },
                        {
                            "name": "QuangStorageService"
                        },
                        {
                            "name": "QuangValidatorsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[LOADER] request start')",
                "rawdescription": "add loader call to counter",
                "description": "<p>add loader call to counter</p>\n"
            },
            {
                "name": "Area",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const data = new ChartArea(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    [\n      [820, 932, 901, 934, 1290, 1330, 1320],\n      [82, 93, 90, 93, 129, 133, 132]\n    ])\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n            <section class=\"container-fluid\">\n              <div class=\"row mb-3\">\n                <div class=\"col\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h3>Quang chart area</h3>\n                        </div>\n                        <div class=\"col-6 text-end\">\n                            <a cardAction href=\"https://rd.quix.it/quang/components/ChartAreaComponent.html\">Configurazioni</a>\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <quang-chart-area\n                          [id]=\"'test'\"\n                          [height]=\"'50vh'\"\n                          [chartData]=\"data\"\n                          [color]=\"[firstColor, secondColor]\"\n                          (chartClick)=\"onCLick($event)\"\n                        ></quang-chart-area>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n    `,\n    props: {\n      ...args,\n      data: data,\n      firstColor: color('firstColor', '#3e885b'),\n      secondColor: color('secondColor', '#debac0'),\n      onCLick (e: any): void {\n        alert(`${e.type} ${e.data} ${e.seriesName}`)\n      },\n    }\n  }\n}"
            },
            {
                "name": "Bar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n\n  const data = new ChartBar(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    [[820, 932, 901, 934, 1290, 1330, 1320], [82, 93, 90, 93, 129, 133, 132]])\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n            <section class=\"container-fluid\">\n              <div class=\"row mb-3\">\n                <div class=\"col\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h3>Quang chart bar</h3>\n                        </div>\n                        <div class=\"col-6 text-end\">\n                            <a cardAction href=\"https://rd.quix.it/quang/components/ChartBarComponent.html\">Configurazioni</a>\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <quang-chart-bar\n                          [id]=\"'test'\"\n                          [height]=\"'50vh'\"\n                          [chartData]=\"data\"\n                          [color]=\"[firstColor, secondColor]\"\n                          (chartClick)=\"onCLick($event)\"\n                        ></quang-chart-bar>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n    `,\n    props: {\n      ...args,\n      data: data,\n      firstColor: color('firstColor', '#3e885b'),\n      secondColor: color('secondColor', '#debac0'),\n      onCLick (e: any): void {\n        alert(`${e.type} ${e.data} ${e.seriesName}`)\n      },\n    }\n  }\n}"
            },
            {
                "name": "Calendar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang calendar</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/InputDateTimeComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <quang-calendar\n            [height]=\"'600px'\"\n          ></quang-calendar>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      height: text('height', '600px'),\n    }\n  }\n}"
            },
            {
                "name": "Candle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n\n  const data = new ChartCandlestick(\n    ['2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27'],\n    [\n      [20, 34, 10, 38],\n      [40, 35, 30, 50],\n      [1, 10, 30, 50],\n      [40, 35, 30, 50]\n    ]\n  )\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n            <section class=\"container-fluid\">\n              <div class=\"row mb-3\">\n                <div class=\"col\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h3>Quang chart candlestick</h3>\n                        </div>\n                        <div class=\"col-6 text-end\">\n                            <a cardAction href=\"https://rd.quix.it/quang/components/ChartCandlestickComponent.html\">Configurazioni</a>\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <quang-chart-candlestick\n                          [id]=\"'test'\"\n                          [height]=\"'50vh'\"\n                          [chartData]=\"data\"\n                          [colors]=\"[firstColor, secondColor]\"\n                          (chartClick)=\"onCLick($event)\"\n                        ></quang-chart-candlestick>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n    `,\n    props: {\n      ...args,\n      data: data,\n      firstColor: color('firstColor', '#debac0'),\n      secondColor: color('secondColor', '#3e885b'),\n      onCLick (e: any): void {\n        alert(`${e.type} ${e.data} ${e.seriesName}`)\n      },\n    }\n  }\n}"
            },
            {
                "name": "Checkbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    checkbox: new FormControl(null, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input Checkbox</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a href=\"https://rd.quix.it/quang/components/InputCheckboxComponent.html\" target=\"_blank\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <form [formGroup]=\"group\">\n                  <quang-input-checkbox\n                    [label]=\"label\"\n                    [errorMessage]=\"errorMessage\"\n                    [successMessage]=\"successMessage\"\n                    [helpMessage]=\"helpMessage\"\n                    [autocomplete]=\"'off'\"\n                    [tabIndex]=\"1\"\n                    [id]=\"'checkbox id'\"\n                    [autofocus]=\"true\"\n                    [formName]=\"'form'\"\n                    formControlName=\"checkbox\">\n                  </quang-input-checkbox>\n                </form>\n                <dl>\n                  <dt>Value:</dt>\n                  <dd>{{group.controls.checkbox.value}}</dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'checkbox label'),\n    }\n  }\n}"
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    color: new FormControl(null, [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input color</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputColorComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n           <form [formGroup]=\"group\">\n            <quang-input-color\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'color id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"color\">\n            </quang-input-color>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.color.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text label'),\n    }\n  }\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-chart/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-calendar/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-date/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-event/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-media/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-utility/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-map/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                "rawdescription": "Then we find all the tests.",
                "description": "<p>Then we find all the tests.</p>\n"
            },
            {
                "name": "Datalist",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group: FormGroup = new FormGroup({\n    select: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input datalist</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/DatalistComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-datalist\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'test'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [list]=\"list\"\n              formControlName=\"select\"\n            ></quang-datalist>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.select.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'datalist label'),\n      list: array('list',['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'])\n    }\n  }\n}"
            },
            {
                "name": "Date",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    date: new FormControl('', Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-date\n                      [label]=\"label\"\n                      [placeholder]=\"placeholder\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [autocomplete]=\"'off'\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date id'\"\n                      [autofocus]=\"true\"\n                      [dateFormat]=\"dateFormat\"\n                      [formName]=\"'form'\"\n                      [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n                      formControlName=\"date\"\n                    ><i calendarIcon class=\"fas fa-calendar-alt\"></i>\n                    </quang-input-date>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.date.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'date label'),\n      placeholder: text('placeholder', 'date placeholder'),\n      dateFormat: text('dateFormat', 'YYYY-MM-DD')\n    }\n  }\n}"
            },
            {
                "name": "DateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    dateRange: new FormControl('', Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-date-range\n                      [label]=\"'form.date-range.label'\"\n                      [placeholder]=\"placeholder\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [autocomplete]=\"'off'\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date-range id'\"\n                      [autofocus]=\"true\"\n                      [dateFormat]=\"dateFormat\"\n                      [formName]=\"'form'\"\n                      [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n                      formControlName=\"dateRange\"\n                    >\n                      <i calendarIcon class=\"fas fa-calendar-alt\"></i>\n                    </quang-input-date-range>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.dateRange.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'date-range label'),\n      placeholder: text('placeholder', 'date placeholder'),\n      dateFormat: text('dateFormat', 'YYYY-MM-DD')\n    }\n  }\n}"
            },
            {
                "name": "DateTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    datetime: new FormControl('', Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-date-time\n                      [label]=\"label\"\n                      [placeholder]=\"placeholder\"\n                      hoursPlaceholder=\"00\"\n                      minutesPlaceholder=\"00\"\n                      secondsPlaceholder=\"00\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [autocomplete]=\"'off'\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date-time id'\"\n                      [autofocus]=\"true\"\n                      [dateFormat]=\"'YYYY-MM-DD'\"\n                      [formName]=\"'form'\"\n                      [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n                      formControlName=\"datetime\"\n                    >\n                      <i calendarIcon class=\"fas fa-calendar-alt\"></i>\n                    </quang-input-date-time>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.datetime.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'date-time label'),\n      placeholder: text('placeholder', 'date-time placeholder'),\n      dateFormat: text('dateFormat', 'YYYY-MM-DD')\n    }\n  }\n}"
            },
            {
                "name": "deleteToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[TOASTS API] delete toast')",
                "rawdescription": "delete toast",
                "description": "<p>delete toast</p>\n"
            },
            {
                "name": "Email",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.minLength(0), Validators.maxLength(50)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input email</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputEmailComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-email\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'email id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [min]=\"min\"\n              [max]=\"max\"\n              formControlName=\"email\"\n            ></quang-input-email>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.email.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'email label'),\n      placeholder: text('placeholder', 'email placeholder'),\n      min: number('min', 0),\n      max: number('max', 50)\n    }\n  }\n}"
            },
            {
                "name": "europeanVatNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-utility/src/lib/quang-validators/quang-validators.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  AT: /U[0-9]{8}/gm,\n  BE: /0[0-9]{9}/gm,\n  BG: /[0-9]{9,10}/gm,\n  CY: /[0-9]{8}L/gm,\n  CZ: /[0-9]{8,10}/gm,\n  DE: /[0-9]{9}/gm,\n  DK: /[0-9]{8}/gm,\n  EE: /[0-9]{9}/gm,\n  GR: /[0-9]{9}/gm,\n  ES: /[0-9A-Z][0-9]{7}[0-9A-Z]/gm,\n  FI: /[0-9]{8}/gm,\n  FR: /[0-9A-Z]{2}[0-9]{9}/gm,\n  GB: /([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})/gm,\n  HU: /[0-9]{8}/gm,\n  IE: /[0-9]S[0-9]{5}L/gm,\n  IT: /[0-9]{11}/gm,\n  LT: /([0-9]{9}|[0-9]{12})/gm,\n  LU: /[0-9]{8}/gm,\n  LV: /[0-9]{11}/gm,\n  MT: /[0-9]{8}/gm,\n  NL: /[0-9]{9}B[0-9]{2}/gm,\n  PL: /[0-9]{10}/gm,\n  PT: /[0-9]{9}/gm,\n  RO: /[0-9]{2,10}/gm,\n  SE: /[0-9]{12}/gm,\n  SI: /[0-9]{8}/gm,\n  SK: /[0-9]{10}/gm\n}"
            },
            {
                "name": "EventBus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "rawdescription": "general declaration for global library",
                "description": "<p>general declaration for global library</p>\n"
            },
            {
                "name": "File",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    file: new FormControl(null, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input files (*only drop)</h3>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-file\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'file-min-max id'\"\n              [multiple]=\"true\"\n              [formName]=\"'form'\"\n              [buttonLabel]=\"'form.file.button.label'\"\n              [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n              formControlName=\"file\">\n              <i uploadIcon class=\"fas fa-upload\"></i>\n            </quang-input-file>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.file.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'files label'),\n    }\n  }\n}"
            },
            {
                "name": "Fraction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    fraction: new FormControl(0, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input fraction</h3>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-fraction\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'test'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [addButtonClass]=\"['btn','btn-outline-success']\"\n              [removeButtonClass]=\"['btn','btn-outline-danger']\"\n              [stepInteger]=\"1\"\n              [stepFraction]=\"0.1\"\n              [min]=\"min\"\n              [max]=\"max\"\n              formControlName=\"fraction\">\n              <i addIntegerIcon class=\"fas fa-plus\"></i>\n              <i removeIntegerIcon class=\"fas fa-minus\"></i>\n              <i addFractionIcon class=\"fas fa-plus\"></i>\n              <i removeFractionIcon class=\"fas fa-minus\"></i>\n            </quang-input-fraction>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.fraction.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'fraction label'),\n      min: number('min', 0),\n      max: number('max', 255),\n    }\n  }\n}"
            },
            {
                "name": "google",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-map/src/lib/google-map/google-map.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "rawdescription": "global declaration for google async library",
                "description": "<p>global declaration for google async library</p>\n"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LoaderState",
                "defaultValue": "{\n  loaders: 0\n}",
                "rawdescription": "loader state initial value",
                "description": "<p>loader state initial value</p>\n"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "OfflineState",
                "defaultValue": "{\n  line: true\n}",
                "rawdescription": "initial offline state value",
                "description": "<p>initial offline state value</p>\n"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ToastsState",
                "defaultValue": "{ toastData: null }",
                "rawdescription": "initial value of toast state",
                "description": "<p>initial value of toast state</p>\n"
            },
            {
                "name": "initialValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "QuangAuthUserState",
                "defaultValue": "{\n  isAuthenticated: false,\n  user: null,\n  roles: []\n}",
                "rawdescription": "store state initial value",
                "description": "<p>store state initial value</p>\n"
            },
            {
                "name": "initialValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "QuangKeycloakUserState",
                "defaultValue": "{\n  isAuthenticated: false,\n  user: null,\n  roles: []\n}",
                "rawdescription": "initial state of authentication store",
                "description": "<p>initial state of authentication store</p>\n"
            },
            {
                "name": "InputCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Checkbox.bind({})"
            },
            {
                "name": "InputColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Color.bind({})"
            },
            {
                "name": "InputDatalist",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Datalist.bind({})"
            },
            {
                "name": "InputDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Date.bind({})"
            },
            {
                "name": "InputDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DateRange.bind({})"
            },
            {
                "name": "InputDateTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DateTime.bind({})"
            },
            {
                "name": "InputEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Email.bind({})"
            },
            {
                "name": "InputFile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "File.bind({})"
            },
            {
                "name": "InputFraction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Fraction.bind({})"
            },
            {
                "name": "InputNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Number.bind({})"
            },
            {
                "name": "InputPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Password.bind({})"
            },
            {
                "name": "InputRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Radio.bind({})"
            },
            {
                "name": "InputSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Search.bind({})"
            },
            {
                "name": "InputTel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Tel.bind({})"
            },
            {
                "name": "InputText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Text.bind({})"
            },
            {
                "name": "InputTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Time.bind({})"
            },
            {
                "name": "InputUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Url.bind({})"
            },
            {
                "name": "Number",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    number: new FormControl(0, [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input Number</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputNumberComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-number\n            [label]=\"label\"\n            [placeholder]=\"placeholder\"\n            [errorMessage]=\"errorMessage\"\n            [successMessage]=\"successMessage\"\n            [helpMessage]=\"helpMessage\"\n            [autocomplete]=\"'off'\"\n            [tabIndex]=\"1\"\n            [id]=\"'text id'\"\n            [autofocus]=\"true\"\n            [formName]=\"'form'\"\n            [step]=\"step\"\n            [min]=\"min\"\n            [max]=\"max\"\n            formControlName=\"number\"\n            ></quang-input-number>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.number.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text label'),\n      placeholder: text('placeholder', 'text placeholder'),\n      min: number('min', 0),\n      max: number('max', 50),\n      step:  number('step', 1)\n    }\n  }\n}"
            },
            {
                "name": "offline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[LINE] offline')",
                "rawdescription": "set state offline",
                "description": "<p>set state offline</p>\n"
            },
            {
                "name": "online",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[LINE] online')",
                "rawdescription": "set state online",
                "description": "<p>set state online</p>\n"
            },
            {
                "name": "openToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[TOASTS API] open toast', props<{ toastData: QuangToast }>())",
                "rawdescription": "open toast",
                "description": "<p>open toast</p>\n"
            },
            {
                "name": "Password",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    password: new FormControl('', [Validators.required, Validators.minLength(3)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input password</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputPasswordComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-password\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'password id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [buttonClass]=\"['btn','btn-outline-secondary']\"\n              [viewPassword]=\"viewPassword\"\n              [min]=\"min\"\n              [max]=\"max\"\n              formControlName=\"password\"\n            >\n              <i iconHide class=\"fas fa-eye-slash\"></i>\n              <i iconView class=\"fas fa-eye\"></i>\n            </quang-input-password>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.password.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      viewPassword: boolean('viewPassword', true),\n      label: text('label', 'password label'),\n      placeholder: text('placeholder', 'password placeholder'),\n      min: number('min', 3),\n      max: number('max', 50)\n    }\n  }\n}"
            },
            {
                "name": "QUANGAUTH_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-module.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'quangAuth'",
                "rawdescription": "the key that identifies the module store",
                "description": "<p>the key that identifies the module store</p>\n"
            },
            {
                "name": "quangAuthReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<QuangAuthState>",
                "defaultValue": "{\n  quangAuthUserState: QuangAuthReducers.quangAuthUserReducer\n}",
                "rawdescription": "definition of the reducer map",
                "description": "<p>definition of the reducer map</p>\n"
            },
            {
                "name": "QuangCalendar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Calendar.bind({})"
            },
            {
                "name": "QuangChartArea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Area.bind({})"
            },
            {
                "name": "QuangChartBar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Bar.bind({})"
            },
            {
                "name": "QuangChartCandleStick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Bar.bind({})"
            },
            {
                "name": "QUANGDIALOG_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/quang-dialog.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'quang-dialog-module'",
                "rawdescription": "the key that identifies the module store",
                "description": "<p>the key that identifies the module store</p>\n"
            },
            {
                "name": "quangDialogReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<QuangDialogState>",
                "defaultValue": "{\n  toastState: ToastReducers.toastReducers,\n  offlineState: OfflineReducers.offlineReducer,\n  loaderState: LoaderReducers.loaderReducers\n}",
                "rawdescription": "definition of the reducer map",
                "description": "<p>definition of the reducer map</p>\n"
            },
            {
                "name": "QUANGKEYCLOAK_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'quang-keycloak-module'",
                "rawdescription": "the key that identifies the module store",
                "description": "<p>the key that identifies the module store</p>\n"
            },
            {
                "name": "quangKeycloakReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<QuangKeycloakState>",
                "defaultValue": "{\n  quangKeycloakUserState: QuangKeycloakReducers.quangKeycloakUserReducer\n}",
                "rawdescription": "definition of the reducer map",
                "description": "<p>definition of the reducer map</p>\n"
            },
            {
                "name": "Radio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    radio: new FormControl({ value: null, disabled: true }, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input radio</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputRadioComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <form [formGroup]=\"group\">\n                  <quang-input-radio\n                    [label]=\"label\"\n                    [errorMessage]=\"errorMessage\"\n                    [successMessage]=\"successMessage\"\n                    [helpMessage]=\"helpMessage\"\n                    [autocomplete]=\"'off'\"\n                    [tabIndex]=\"1\"\n                    [id]=\"'radio id'\"\n                    [autofocus]=\"true\"\n                    [radioList]=\"list\"\n                    [labelValue]=\"'text'\"\n                    [returnValue]=\"'value'\"\n                    [formName]=\"'form'\"\n                    [groupName]=\"'radio-group'\"\n                    formControlName=\"radio\">\n                  </quang-input-radio>\n                </form>\n                <dl>\n                  <dt>Value:</dt>\n                  <dd>{{group.controls.radio.value}}</dd>\n                </dl>\n                <button class=\"btn btn-outline-danger\"\n                  (click)=\"disable()\">Disable</button>\n                <button class=\"btn btn-outline-success ms-3\"\n                  (click)=\"enable()\">Enable</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'radio label'),\n      list: object('list',[\n        { value: 1, text: 'Item 1' },\n        { value: 2, text: 'Item 2' },\n        { value: 3, text: 'Item 3' },\n        { value: 4, text: 'Item 4' },\n        { value: 5, text: 'Item 5' }\n      ]),\n      disable (): void {\n        this.group.get('radio')?.disable()\n      },\n      enable (): void {\n        this.group.get('radio')?.enable()\n      }\n    }\n  }\n}"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialValue,\n  on(userLogin, (state) => ({ ...state, isAuthenticated: true })),\n  on(userLogout, (state) => ({ ...state, isAuthenticated: false })),\n  on(userInfoLogin, (state, action) =>\n    ({ ...state, user: action.user })),\n  on(userInfoLogout, (state) => ({ ...state, user: null })),\n  on(userRolesLogin, (state, action) =>\n    ({ ...state, roles: action.roles })),\n  on(userRolesLogout, (state) => ({ ...state, user: null }))\n)",
                "rawdescription": "Defines how the state changes based on the actions called",
                "description": "<p>Defines how the state changes based on the actions called</p>\n"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialValue,\n  on(userLogin, (state) => ({ ...state, isAuthenticated: true })),\n  on(userLogout, (state) => ({ ...state, isAuthenticated: false })),\n  on(userInfoLogin, (state, action) =>\n    ({ ...state, user: action.user })),\n  on(userInfoLogout, (state) => ({ ...state, user: null })),\n  on(userRolesLogin, (state, action) =>\n    ({ ...state, roles: action.roles })),\n  on(userRolesLogout, (state) => ({ ...state, roles: [] }))\n)",
                "rawdescription": "defines how the state changes when actions are triggered",
                "description": "<p>defines how the state changes when actions are triggered</p>\n"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(addLoader, (state) => ({ ...state, loaders: state.loaders + 1 })),\n  on(removeLoader, (state) => ({ ...state, loaders: state.loaders - 1 }))\n)",
                "rawdescription": "define how loader state change",
                "description": "<p>define how loader state change</p>\n"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(online, state => ({ ...state, line: true })),\n  on(offline, state => ({ ...state, line: false }))\n)",
                "rawdescription": "define how the state change",
                "description": "<p>define how the state change</p>\n"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(openToast, (state, action) =>\n    ({ ...state, toastData: action.toastData })\n  ),\n  on(deleteToast, (state) =>\n    ({ ...state, toastData: null })\n  )\n)",
                "rawdescription": "defines how the status of the toast changes in the store",
                "description": "<p>defines how the status of the toast changes in the store</p>\n"
            },
            {
                "name": "removeLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[LOADER] response return')",
                "rawdescription": "remove loader call to counter",
                "description": "<p>remove loader call to counter</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-chart/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-calendar/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-date/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-event/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-media/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-utility/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-map/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Standard definition for require",
                "description": "<p>Standard definition for require</p>\n"
            },
            {
                "name": "Search",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    search: new FormControl(null, [Validators.required, Validators.minLength(0), Validators.maxLength(50)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input search</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/InputSearchComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-search\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'search id'\"\n              [autofocus]=\"true\"\n              [min]=\"min\"\n              [max]=\"max\"\n              [formName]=\"'form'\"\n              formControlName=\"search\">\n            </quang-input-search>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.search.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'search label'),\n      min: number('min', 0),\n      max: number('max', 50)\n    }\n  }\n}"
            },
            {
                "name": "selectHasRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rolesId: string[]): any =>\n  createSelector(\n    selectUserRoles,\n    (userRoles: string[]): boolean =>\n      rolesId\n        .map(r => userRoles.includes(r))\n        .reduce((f: boolean, r: boolean) => f && r, true)\n  )",
                "rawdescription": "Selector to check if the user has all the required roles",
                "description": "<p>Selector to check if the user has all the required roles</p>\n"
            },
            {
                "name": "selectHasRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rolesId: string[]): any =>\n  createSelector(\n    selectUserRoles,\n    (userRoles: string[]) =>\n      rolesId\n        .map(r => userRoles.includes(r))\n        .reduce((f, r) => f && r, true)\n  )",
                "rawdescription": "Selector to check if the user has all the required roles",
                "description": "<p>Selector to check if the user has all the required roles</p>\n"
            },
            {
                "name": "selectHasUntilRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rolesId: string[]): any => createSelector(\n  selectUserRoles,\n  (userRoles: string[]): boolean =>\n    rolesId\n      .map(r => userRoles.includes(r))\n      .reduce((f, r) => f || r, false)\n)",
                "rawdescription": "Selector to check if the user has at least one required role",
                "description": "<p>Selector to check if the user has at least one required role</p>\n"
            },
            {
                "name": "selectHasUntilRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rolesId: string[]): any =>\n  createSelector(\n    selectUserRoles,\n    (userRoles: string[]) =>\n      rolesId\n        .map(r => userRoles.includes(r))\n        .reduce((f, r) => f || r, false)\n  )",
                "rawdescription": "Selector to check if the user has at least one required role",
                "description": "<p>Selector to check if the user has at least one required role</p>\n"
            },
            {
                "name": "selectIsAuthenticated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangAuth,\n  (state: QuangAuthState): boolean => state.quangAuthUserState.isAuthenticated\n)",
                "rawdescription": "Authentication status selector",
                "description": "<p>Authentication status selector</p>\n"
            },
            {
                "name": "selectIsAuthenticated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangKeycloak,\n  (state: QuangKeycloakState): boolean => state?.quangKeycloakUserState?.isAuthenticated\n)",
                "rawdescription": "Selector to retrieve the status of user authentication",
                "description": "<p>Selector to retrieve the status of user authentication</p>\n"
            },
            {
                "name": "selectLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/offline/offline-store/selectors/offline.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): boolean => state.offlineState?.line\n)",
                "rawdescription": "selector for offline store state",
                "description": "<p>selector for offline store state</p>\n"
            },
            {
                "name": "selectLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/loader/loader-store/selectors/loader.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): number => state.loaderState?.loaders\n)",
                "rawdescription": "selector for loader state",
                "description": "<p>selector for loader state</p>\n"
            },
            {
                "name": "selectQuangAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-module.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<QuangAuthModuleState, QuangAuthState>(QUANGAUTH_KEY)",
                "rawdescription": "module selector",
                "description": "<p>module selector</p>\n"
            },
            {
                "name": "selectQuangDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/quang-dialog.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<QuangDialogStateModule, QuangDialogState>(QUANGDIALOG_KEY)",
                "rawdescription": "module selector",
                "description": "<p>module selector</p>\n"
            },
            {
                "name": "selectQuangKeycloak",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<QuangKeycloakModuleState, QuangKeycloakState>(QUANGKEYCLOAK_KEY)",
                "rawdescription": "module selector",
                "description": "<p>module selector</p>\n"
            },
            {
                "name": "selectToast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): QuangToast => state.toastState?.toastData\n)",
                "rawdescription": "selector for toast state",
                "description": "<p>selector for toast state</p>\n"
            },
            {
                "name": "selectToastState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): ToastsState => state.toastState\n)",
                "rawdescription": "selector for toast state",
                "description": "<p>selector for toast state</p>\n"
            },
            {
                "name": "selectUserInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangAuth,\n  (state: QuangAuthState): any => state.quangAuthUserState.user\n)",
                "rawdescription": "User info status selector",
                "description": "<p>User info status selector</p>\n"
            },
            {
                "name": "selectUserInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangKeycloak,\n  (state: QuangKeycloakState): any => state?.quangKeycloakUserState?.user\n)",
                "rawdescription": "Selector to retrieve the status of the user data",
                "description": "<p>Selector to retrieve the status of the user data</p>\n"
            },
            {
                "name": "selectUserRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangAuth,\n  (state: QuangAuthState): any[] => state.quangAuthUserState.roles\n)",
                "rawdescription": "User role status selector",
                "description": "<p>User role status selector</p>\n"
            },
            {
                "name": "selectUserRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectQuangKeycloak,\n  (state: QuangKeycloakState): any[] => state?.quangKeycloakUserState?.roles\n)",
                "rawdescription": "Selector to retrieve the status of the role list",
                "description": "<p>Selector to retrieve the status of the role list</p>\n"
            },
            {
                "name": "sendNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-dialog/src/lib/notification/notification-store/actions/notification.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[NOTIFICATION API] send notification',\n  props<{ notificationData: QuangNotification }>())",
                "rawdescription": "open toast",
                "description": "<p>open toast</p>\n"
            },
            {
                "name": "Tel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    tel: new FormControl('', [Validators.required, Validators.minLength(9)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input tel</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputTelComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-tel\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [min]=\"min\"\n              [max]=\"max\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'tel id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"tel\"\n            ></quang-input-tel>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.tel.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'tel label'),\n      placeholder: text('placeholder', 'tel placeholder'),\n      min: number('min', 9),\n      max: number('max', 10)\n    }\n  }\n}"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    text: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input text</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputTextComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-text\n            [label]=\"label\"\n            [placeholder]=\"placeholder\"\n            [errorMessage]=\"errorMessage\"\n            [successMessage]=\"successMessage\"\n            [helpMessage]=\"helpMessage\"\n            [autocomplete]=\"'off'\"\n            [tabIndex]=\"1\"\n            [id]=\"'text id'\"\n            [autofocus]=\"true\"\n            [formName]=\"'form'\"\n            [min]=\"min\"\n            [max]=\"max\"\n            formControlName=\"text\"\n            ></quang-input-text>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.text.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text label'),\n      placeholder: text('placeholder', 'text placeholder'),\n      max: number('max', 50)\n    }\n  }\n}"
            },
            {
                "name": "TextA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    textArea: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input area</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputTextComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n         <form [formGroup]=\"group\">\n            <quang-text-area\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [min]=\"0\"\n              [max]=\"max\"\n              [cols]=\"cols\"\n              [rows]=\"rows\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'text id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"textArea\"\n            ></quang-text-area>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.textArea.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'textArea label'),\n      placeholder: text('placeholder', 'textArea placeholder'),\n      max: number('max', 50),\n      cols: number('columns', 10),\n      rows: number('rows', 10)\n    }\n  }\n}"
            },
            {
                "name": "TextArea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TextA.bind({})"
            },
            {
                "name": "TextEdit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const groupBars = new FormGroup({\n    textEditor: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang text editor</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/TextEditorComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"groupBars\">\n            <quang-text-editor\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [min]=\"0\"\n              [max]=\"max\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'textEditor-bars id'\"\n              [listBar]=\"true\"\n              [textTypeBar]=\"true\"\n              [textStyleBar]=\"true\"\n              [alignBar]=\"true\"\n              [fontBar]=\"true\"\n              [mediaBar]=\"true\"\n              [headerBar]=\"true\"\n              [sizeBar]=\"true\"\n              [emojiBar]=\"true\"\n              [indentBar]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"textEditor\"\n            ></quang-text-editor>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{groupBars.controls.textEditor.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      groupBars: groupBars,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text editor label'),\n      placeholder: text('placeholder', 'text editor placeholder'),\n      max: number('max', 500)\n    }\n  }\n}"
            },
            {
                "name": "TextEditor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TextEdit.bind({})"
            },
            {
                "name": "Time",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    time: new FormControl(null, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-time\n                      [label]=\"label\"\n                      hoursPlaceholder=\"00\"\n                      minutesPlaceholder=\"00\"\n                      secondsPlaceholder=\"00\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date id'\"\n                      [formName]=\"'form'\"\n                      formControlName=\"time\"\n                    ></quang-input-time>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.time.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'time label'),\n    }\n  }\n}"
            },
            {
                "name": "Url",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BlankComponent>",
                "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    url: new FormControl(\n      '',\n      [Validators.required, Validators.minLength(0), Validators.maxLength(50)]\n    )\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input url</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/InputUrlComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-url\n              [label]=\"'form.url.label'\"\n              [placeholder]=\"placeholder\"\n              [min]=\"min\"\n              [max]=\"max\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'url id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"url\"\n            ></quang-input-url>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.url.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'url label'),\n      placeholder: text('placeholder', 'url placeholder'),\n      min: number('min', 0),\n      max: number('max', 50)\n    }\n  }\n}"
            },
            {
                "name": "userInfoLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG AUTH] set user info', props<{ user: any }>())",
                "rawdescription": "saves user data in the store",
                "description": "<p>saves user data in the store</p>\n"
            },
            {
                "name": "userInfoLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG KEYCLOAK] set user info', props<{ user: any }>())",
                "rawdescription": "Saves the user data in the store",
                "description": "<p>Saves the user data in the store</p>\n"
            },
            {
                "name": "userInfoLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG AUTH] delete user info')",
                "rawdescription": "delete user data in the store",
                "description": "<p>delete user data in the store</p>\n"
            },
            {
                "name": "userInfoLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG KEYCLOAK] delete user info')",
                "rawdescription": "Delete the user data in the store",
                "description": "<p>Delete the user data in the store</p>\n"
            },
            {
                "name": "userLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG AUTH] user login')",
                "rawdescription": "The user has completed the login procedure",
                "description": "<p>The user has completed the login procedure</p>\n"
            },
            {
                "name": "userLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG KEYCLOAK] user login')",
                "rawdescription": "Saves the user's successful login in the store",
                "description": "<p>Saves the user&#39;s successful login in the store</p>\n"
            },
            {
                "name": "userLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG AUTH] user logout')",
                "rawdescription": "The user asks to log out",
                "description": "<p>The user asks to log out</p>\n"
            },
            {
                "name": "userLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG KEYCLOAK] user logout', props<{ redirectUri?: string }>())",
                "rawdescription": "Saves the user logout in the store",
                "description": "<p>Saves the user logout in the store</p>\n"
            },
            {
                "name": "userRolesLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG AUTH] set user roles', props<{ roles: any[] }>())",
                "rawdescription": "saves user role in the store",
                "description": "<p>saves user role in the store</p>\n"
            },
            {
                "name": "userRolesLogin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG KEYCLOAK] set user roles', props<{ roles: any[] }>())",
                "rawdescription": "Saves the user roles in the store",
                "description": "<p>Saves the user roles in the store</p>\n"
            },
            {
                "name": "userRolesLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG AUTH] delete user roles')",
                "rawdescription": "delete user role in the store",
                "description": "<p>delete user role in the store</p>\n"
            },
            {
                "name": "userRolesLogout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[QUANG KEYCLOAK] delete user roles')",
                "rawdescription": "Delete the user roles in the store",
                "description": "<p>Delete the user roles in the store</p>\n"
            }
        ],
        "functions": [
            {
                "name": "loaderReducers",
                "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>define loader name</p>\n",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 603,
                            "end": 608,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "state"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 597,
                            "end": 602,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 619,
                            "end": 625,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "action"
                        },
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 613,
                            "end": 618,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "offlineReducer",
                "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>define state name</p>\n",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 553,
                            "end": 558,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "state"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 547,
                            "end": 552,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 569,
                            "end": 575,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "action"
                        },
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 563,
                            "end": 568,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            {
                "name": "quangAuthUserReducer",
                "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Defines the name of the reducer</p>\n",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1146,
                            "end": 1151,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "state"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1140,
                            "end": 1145,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>module state</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1175,
                            "end": 1181,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "action"
                        },
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1169,
                            "end": 1174,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>section action</p>\n"
                    }
                ]
            },
            {
                "name": "quangKeycloakUserReducer",
                "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>defines the name of the state reducer</p>\n",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toastReducers",
                "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>define reducer name</p>\n",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 715,
                            "end": 720,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "state"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 709,
                            "end": 714,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 731,
                            "end": 737,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "action"
                        },
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 725,
                            "end": 730,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts": [
                {
                    "name": "addLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[LOADER] request start')",
                    "rawdescription": "add loader call to counter",
                    "description": "<p>add loader call to counter</p>\n"
                },
                {
                    "name": "removeLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[LOADER] response return')",
                    "rawdescription": "remove loader call to counter",
                    "description": "<p>remove loader call to counter</p>\n"
                }
            ],
            "stories/Chart.stories.ts": [
                {
                    "name": "Area",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const data = new ChartArea(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    [\n      [820, 932, 901, 934, 1290, 1330, 1320],\n      [82, 93, 90, 93, 129, 133, 132]\n    ])\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n            <section class=\"container-fluid\">\n              <div class=\"row mb-3\">\n                <div class=\"col\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h3>Quang chart area</h3>\n                        </div>\n                        <div class=\"col-6 text-end\">\n                            <a cardAction href=\"https://rd.quix.it/quang/components/ChartAreaComponent.html\">Configurazioni</a>\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <quang-chart-area\n                          [id]=\"'test'\"\n                          [height]=\"'50vh'\"\n                          [chartData]=\"data\"\n                          [color]=\"[firstColor, secondColor]\"\n                          (chartClick)=\"onCLick($event)\"\n                        ></quang-chart-area>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n    `,\n    props: {\n      ...args,\n      data: data,\n      firstColor: color('firstColor', '#3e885b'),\n      secondColor: color('secondColor', '#debac0'),\n      onCLick (e: any): void {\n        alert(`${e.type} ${e.data} ${e.seriesName}`)\n      },\n    }\n  }\n}"
                },
                {
                    "name": "Bar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n\n  const data = new ChartBar(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    [[820, 932, 901, 934, 1290, 1330, 1320], [82, 93, 90, 93, 129, 133, 132]])\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n            <section class=\"container-fluid\">\n              <div class=\"row mb-3\">\n                <div class=\"col\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h3>Quang chart bar</h3>\n                        </div>\n                        <div class=\"col-6 text-end\">\n                            <a cardAction href=\"https://rd.quix.it/quang/components/ChartBarComponent.html\">Configurazioni</a>\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <quang-chart-bar\n                          [id]=\"'test'\"\n                          [height]=\"'50vh'\"\n                          [chartData]=\"data\"\n                          [color]=\"[firstColor, secondColor]\"\n                          (chartClick)=\"onCLick($event)\"\n                        ></quang-chart-bar>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n    `,\n    props: {\n      ...args,\n      data: data,\n      firstColor: color('firstColor', '#3e885b'),\n      secondColor: color('secondColor', '#debac0'),\n      onCLick (e: any): void {\n        alert(`${e.type} ${e.data} ${e.seriesName}`)\n      },\n    }\n  }\n}"
                },
                {
                    "name": "Candle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n\n  const data = new ChartCandlestick(\n    ['2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27'],\n    [\n      [20, 34, 10, 38],\n      [40, 35, 30, 50],\n      [1, 10, 30, 50],\n      [40, 35, 30, 50]\n    ]\n  )\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n            <section class=\"container-fluid\">\n              <div class=\"row mb-3\">\n                <div class=\"col\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <h3>Quang chart candlestick</h3>\n                        </div>\n                        <div class=\"col-6 text-end\">\n                            <a cardAction href=\"https://rd.quix.it/quang/components/ChartCandlestickComponent.html\">Configurazioni</a>\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <quang-chart-candlestick\n                          [id]=\"'test'\"\n                          [height]=\"'50vh'\"\n                          [chartData]=\"data\"\n                          [colors]=\"[firstColor, secondColor]\"\n                          (chartClick)=\"onCLick($event)\"\n                        ></quang-chart-candlestick>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n    `,\n    props: {\n      ...args,\n      data: data,\n      firstColor: color('firstColor', '#debac0'),\n      secondColor: color('secondColor', '#3e885b'),\n      onCLick (e: any): void {\n        alert(`${e.type} ${e.data} ${e.seriesName}`)\n      },\n    }\n  }\n}"
                },
                {
                    "name": "QuangChartArea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Area.bind({})"
                },
                {
                    "name": "QuangChartBar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Bar.bind({})"
                },
                {
                    "name": "QuangChartCandleStick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Bar.bind({})"
                }
            ],
            "stories/Calendar.stories.ts": [
                {
                    "name": "Calendar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang calendar</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/InputDateTimeComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <quang-calendar\n            [height]=\"'600px'\"\n          ></quang-calendar>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      height: text('height', '600px'),\n    }\n  }\n}"
                },
                {
                    "name": "QuangCalendar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Calendar.bind({})"
                }
            ],
            "stories/Input.stories.ts": [
                {
                    "name": "Checkbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    checkbox: new FormControl(null, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input Checkbox</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a href=\"https://rd.quix.it/quang/components/InputCheckboxComponent.html\" target=\"_blank\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <form [formGroup]=\"group\">\n                  <quang-input-checkbox\n                    [label]=\"label\"\n                    [errorMessage]=\"errorMessage\"\n                    [successMessage]=\"successMessage\"\n                    [helpMessage]=\"helpMessage\"\n                    [autocomplete]=\"'off'\"\n                    [tabIndex]=\"1\"\n                    [id]=\"'checkbox id'\"\n                    [autofocus]=\"true\"\n                    [formName]=\"'form'\"\n                    formControlName=\"checkbox\">\n                  </quang-input-checkbox>\n                </form>\n                <dl>\n                  <dt>Value:</dt>\n                  <dd>{{group.controls.checkbox.value}}</dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'checkbox label'),\n    }\n  }\n}"
                },
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    color: new FormControl(null, [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input color</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputColorComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n           <form [formGroup]=\"group\">\n            <quang-input-color\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'color id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"color\">\n            </quang-input-color>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.color.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text label'),\n    }\n  }\n}"
                },
                {
                    "name": "Datalist",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group: FormGroup = new FormGroup({\n    select: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input datalist</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/DatalistComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-datalist\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'test'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [list]=\"list\"\n              formControlName=\"select\"\n            ></quang-datalist>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.select.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'datalist label'),\n      list: array('list',['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'])\n    }\n  }\n}"
                },
                {
                    "name": "Email",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.minLength(0), Validators.maxLength(50)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input email</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputEmailComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-email\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'email id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [min]=\"min\"\n              [max]=\"max\"\n              formControlName=\"email\"\n            ></quang-input-email>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.email.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'email label'),\n      placeholder: text('placeholder', 'email placeholder'),\n      min: number('min', 0),\n      max: number('max', 50)\n    }\n  }\n}"
                },
                {
                    "name": "File",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    file: new FormControl(null, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input files (*only drop)</h3>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-file\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'file-min-max id'\"\n              [multiple]=\"true\"\n              [formName]=\"'form'\"\n              [buttonLabel]=\"'form.file.button.label'\"\n              [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n              formControlName=\"file\">\n              <i uploadIcon class=\"fas fa-upload\"></i>\n            </quang-input-file>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.file.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'files label'),\n    }\n  }\n}"
                },
                {
                    "name": "Fraction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    fraction: new FormControl(0, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input fraction</h3>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-fraction\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'test'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [addButtonClass]=\"['btn','btn-outline-success']\"\n              [removeButtonClass]=\"['btn','btn-outline-danger']\"\n              [stepInteger]=\"1\"\n              [stepFraction]=\"0.1\"\n              [min]=\"min\"\n              [max]=\"max\"\n              formControlName=\"fraction\">\n              <i addIntegerIcon class=\"fas fa-plus\"></i>\n              <i removeIntegerIcon class=\"fas fa-minus\"></i>\n              <i addFractionIcon class=\"fas fa-plus\"></i>\n              <i removeFractionIcon class=\"fas fa-minus\"></i>\n            </quang-input-fraction>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.fraction.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'fraction label'),\n      min: number('min', 0),\n      max: number('max', 255),\n    }\n  }\n}"
                },
                {
                    "name": "InputCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Checkbox.bind({})"
                },
                {
                    "name": "InputColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Color.bind({})"
                },
                {
                    "name": "InputDatalist",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Datalist.bind({})"
                },
                {
                    "name": "InputEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Email.bind({})"
                },
                {
                    "name": "InputFile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "File.bind({})"
                },
                {
                    "name": "InputFraction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Fraction.bind({})"
                },
                {
                    "name": "InputNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Number.bind({})"
                },
                {
                    "name": "InputPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Password.bind({})"
                },
                {
                    "name": "InputRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Radio.bind({})"
                },
                {
                    "name": "InputSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Search.bind({})"
                },
                {
                    "name": "InputTel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Tel.bind({})"
                },
                {
                    "name": "InputText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Text.bind({})"
                },
                {
                    "name": "InputUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Url.bind({})"
                },
                {
                    "name": "Number",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    number: new FormControl(0, [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input Number</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputNumberComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-number\n            [label]=\"label\"\n            [placeholder]=\"placeholder\"\n            [errorMessage]=\"errorMessage\"\n            [successMessage]=\"successMessage\"\n            [helpMessage]=\"helpMessage\"\n            [autocomplete]=\"'off'\"\n            [tabIndex]=\"1\"\n            [id]=\"'text id'\"\n            [autofocus]=\"true\"\n            [formName]=\"'form'\"\n            [step]=\"step\"\n            [min]=\"min\"\n            [max]=\"max\"\n            formControlName=\"number\"\n            ></quang-input-number>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.number.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text label'),\n      placeholder: text('placeholder', 'text placeholder'),\n      min: number('min', 0),\n      max: number('max', 50),\n      step:  number('step', 1)\n    }\n  }\n}"
                },
                {
                    "name": "Password",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    password: new FormControl('', [Validators.required, Validators.minLength(3)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input password</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputPasswordComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-password\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'password id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              [buttonClass]=\"['btn','btn-outline-secondary']\"\n              [viewPassword]=\"viewPassword\"\n              [min]=\"min\"\n              [max]=\"max\"\n              formControlName=\"password\"\n            >\n              <i iconHide class=\"fas fa-eye-slash\"></i>\n              <i iconView class=\"fas fa-eye\"></i>\n            </quang-input-password>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.password.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      viewPassword: boolean('viewPassword', true),\n      label: text('label', 'password label'),\n      placeholder: text('placeholder', 'password placeholder'),\n      min: number('min', 3),\n      max: number('max', 50)\n    }\n  }\n}"
                },
                {
                    "name": "Radio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    radio: new FormControl({ value: null, disabled: true }, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input radio</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputRadioComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                <form [formGroup]=\"group\">\n                  <quang-input-radio\n                    [label]=\"label\"\n                    [errorMessage]=\"errorMessage\"\n                    [successMessage]=\"successMessage\"\n                    [helpMessage]=\"helpMessage\"\n                    [autocomplete]=\"'off'\"\n                    [tabIndex]=\"1\"\n                    [id]=\"'radio id'\"\n                    [autofocus]=\"true\"\n                    [radioList]=\"list\"\n                    [labelValue]=\"'text'\"\n                    [returnValue]=\"'value'\"\n                    [formName]=\"'form'\"\n                    [groupName]=\"'radio-group'\"\n                    formControlName=\"radio\">\n                  </quang-input-radio>\n                </form>\n                <dl>\n                  <dt>Value:</dt>\n                  <dd>{{group.controls.radio.value}}</dd>\n                </dl>\n                <button class=\"btn btn-outline-danger\"\n                  (click)=\"disable()\">Disable</button>\n                <button class=\"btn btn-outline-success ms-3\"\n                  (click)=\"enable()\">Enable</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'radio label'),\n      list: object('list',[\n        { value: 1, text: 'Item 1' },\n        { value: 2, text: 'Item 2' },\n        { value: 3, text: 'Item 3' },\n        { value: 4, text: 'Item 4' },\n        { value: 5, text: 'Item 5' }\n      ]),\n      disable (): void {\n        this.group.get('radio')?.disable()\n      },\n      enable (): void {\n        this.group.get('radio')?.enable()\n      }\n    }\n  }\n}"
                },
                {
                    "name": "Search",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    search: new FormControl(null, [Validators.required, Validators.minLength(0), Validators.maxLength(50)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input search</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/InputSearchComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-search\n              [label]=\"label\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'search id'\"\n              [autofocus]=\"true\"\n              [min]=\"min\"\n              [max]=\"max\"\n              [formName]=\"'form'\"\n              formControlName=\"search\">\n            </quang-input-search>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.search.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'search label'),\n      min: number('min', 0),\n      max: number('max', 50)\n    }\n  }\n}"
                },
                {
                    "name": "Tel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    tel: new FormControl('', [Validators.required, Validators.minLength(9)])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input tel</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputTelComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-tel\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [min]=\"min\"\n              [max]=\"max\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'tel id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"tel\"\n            ></quang-input-tel>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.tel.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'tel label'),\n      placeholder: text('placeholder', 'tel placeholder'),\n      min: number('min', 9),\n      max: number('max', 10)\n    }\n  }\n}"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    text: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input text</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputTextComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-text\n            [label]=\"label\"\n            [placeholder]=\"placeholder\"\n            [errorMessage]=\"errorMessage\"\n            [successMessage]=\"successMessage\"\n            [helpMessage]=\"helpMessage\"\n            [autocomplete]=\"'off'\"\n            [tabIndex]=\"1\"\n            [id]=\"'text id'\"\n            [autofocus]=\"true\"\n            [formName]=\"'form'\"\n            [min]=\"min\"\n            [max]=\"max\"\n            formControlName=\"text\"\n            ></quang-input-text>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.text.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text label'),\n      placeholder: text('placeholder', 'text placeholder'),\n      max: number('max', 50)\n    }\n  }\n}"
                },
                {
                    "name": "TextA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    textArea: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input area</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/InputTextComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n         <form [formGroup]=\"group\">\n            <quang-text-area\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [min]=\"0\"\n              [max]=\"max\"\n              [cols]=\"cols\"\n              [rows]=\"rows\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'text id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"textArea\"\n            ></quang-text-area>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.textArea.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'textArea label'),\n      placeholder: text('placeholder', 'textArea placeholder'),\n      max: number('max', 50),\n      cols: number('columns', 10),\n      rows: number('rows', 10)\n    }\n  }\n}"
                },
                {
                    "name": "TextArea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TextA.bind({})"
                },
                {
                    "name": "TextEdit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const groupBars = new FormGroup({\n    textEditor: new FormControl('', [Validators.required])\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang text editor</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a href=\"https://rd.quix.it/quang/components/TextEditorComponent.html\" target=\"_blank\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"groupBars\">\n            <quang-text-editor\n              [label]=\"label\"\n              [placeholder]=\"placeholder\"\n              [min]=\"0\"\n              [max]=\"max\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [tabIndex]=\"1\"\n              [id]=\"'textEditor-bars id'\"\n              [listBar]=\"true\"\n              [textTypeBar]=\"true\"\n              [textStyleBar]=\"true\"\n              [alignBar]=\"true\"\n              [fontBar]=\"true\"\n              [mediaBar]=\"true\"\n              [headerBar]=\"true\"\n              [sizeBar]=\"true\"\n              [emojiBar]=\"true\"\n              [indentBar]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"textEditor\"\n            ></quang-text-editor>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{groupBars.controls.textEditor.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      groupBars: groupBars,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'text editor label'),\n      placeholder: text('placeholder', 'text editor placeholder'),\n      max: number('max', 500)\n    }\n  }\n}"
                },
                {
                    "name": "TextEditor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TextEdit.bind({})"
                },
                {
                    "name": "Url",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    url: new FormControl(\n      '',\n      [Validators.required, Validators.minLength(0), Validators.maxLength(50)]\n    )\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <h3>Quang input url</h3>\n            </div>\n            <div class=\"col-6 text-end\">\n                <a cardAction href=\"https://rd.quix.it/quang/components/InputUrlComponent.html\">Configurazioni</a>\n            </div>\n        </div>\n        </div>\n        <div class=\"card-body\">\n          <form [formGroup]=\"group\">\n            <quang-input-url\n              [label]=\"'form.url.label'\"\n              [placeholder]=\"placeholder\"\n              [min]=\"min\"\n              [max]=\"max\"\n              [errorMessage]=\"errorMessage\"\n              [successMessage]=\"successMessage\"\n              [helpMessage]=\"helpMessage\"\n              [autocomplete]=\"'off'\"\n              [tabIndex]=\"1\"\n              [id]=\"'url id'\"\n              [autofocus]=\"true\"\n              [formName]=\"'form'\"\n              formControlName=\"url\"\n            ></quang-input-url>\n          </form>\n          <dl>\n            <dt>Value:</dt>\n            <dd>{{group.controls.url.value}}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      successMessage: boolean('successMessage', true),\n      errorMessage: boolean('errorMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'url label'),\n      placeholder: text('placeholder', 'url placeholder'),\n      min: number('min', 0),\n      max: number('max', 50)\n    }\n  }\n}"
                }
            ],
            "projects/quang/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-auth/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-chart/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-chart/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-chart/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-calendar/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-calendar/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-calendar/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-date/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-date/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-date/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-dialog/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-event/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-event/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-event/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-keycloak/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-media/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-media/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-media/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-utility/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-utility/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-utility/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "projects/quang-map/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-map/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Then we find all the tests.",
                    "description": "<p>Then we find all the tests.</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-map/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Standard definition for require",
                    "description": "<p>Standard definition for require</p>\n"
                }
            ],
            "stories/Date.stories.ts": [
                {
                    "name": "Date",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    date: new FormControl('', Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-date\n                      [label]=\"label\"\n                      [placeholder]=\"placeholder\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [autocomplete]=\"'off'\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date id'\"\n                      [autofocus]=\"true\"\n                      [dateFormat]=\"dateFormat\"\n                      [formName]=\"'form'\"\n                      [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n                      formControlName=\"date\"\n                    ><i calendarIcon class=\"fas fa-calendar-alt\"></i>\n                    </quang-input-date>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.date.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'date label'),\n      placeholder: text('placeholder', 'date placeholder'),\n      dateFormat: text('dateFormat', 'YYYY-MM-DD')\n    }\n  }\n}"
                },
                {
                    "name": "DateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    dateRange: new FormControl('', Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-date-range\n                      [label]=\"'form.date-range.label'\"\n                      [placeholder]=\"placeholder\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [autocomplete]=\"'off'\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date-range id'\"\n                      [autofocus]=\"true\"\n                      [dateFormat]=\"dateFormat\"\n                      [formName]=\"'form'\"\n                      [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n                      formControlName=\"dateRange\"\n                    >\n                      <i calendarIcon class=\"fas fa-calendar-alt\"></i>\n                    </quang-input-date-range>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.dateRange.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'date-range label'),\n      placeholder: text('placeholder', 'date placeholder'),\n      dateFormat: text('dateFormat', 'YYYY-MM-DD')\n    }\n  }\n}"
                },
                {
                    "name": "DateTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    datetime: new FormControl('', Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-date-time\n                      [label]=\"label\"\n                      [placeholder]=\"placeholder\"\n                      hoursPlaceholder=\"00\"\n                      minutesPlaceholder=\"00\"\n                      secondsPlaceholder=\"00\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [autocomplete]=\"'off'\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date-time id'\"\n                      [autofocus]=\"true\"\n                      [dateFormat]=\"'YYYY-MM-DD'\"\n                      [formName]=\"'form'\"\n                      [buttonClass]=\"['btn', 'btn-outline-secondary']\"\n                      formControlName=\"datetime\"\n                    >\n                      <i calendarIcon class=\"fas fa-calendar-alt\"></i>\n                    </quang-input-date-time>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.datetime.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'date-time label'),\n      placeholder: text('placeholder', 'date-time placeholder'),\n      dateFormat: text('dateFormat', 'YYYY-MM-DD')\n    }\n  }\n}"
                },
                {
                    "name": "InputDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Date.bind({})"
                },
                {
                    "name": "InputDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DateRange.bind({})"
                },
                {
                    "name": "InputDateTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DateTime.bind({})"
                },
                {
                    "name": "InputTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Time.bind({})"
                },
                {
                    "name": "Time",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BlankComponent>",
                    "defaultValue": "(args: BlankComponent) => {\n  const group = new FormGroup({\n    time: new FormControl(null, Validators.required)\n  })\n  return {\n    component: BlankComponent,\n    template:\n      `\n      <section class=\"container-fluid\">\n        <div class=\"row mb-3\">\n          <div class=\"col\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"row\">\n                    <div class=\"col-6\">\n                        <h3>Quang input date</h3>\n                    </div>\n                    <div class=\"col-6 text-end\">\n                        <a cardAction href=\"https://rd.quix.it/quang/components/InputDateComponent.html\">Configurazioni</a>\n                    </div>\n                </div>\n              </div>\n              <div class=\"card-body\">\n                  <form [formGroup]=\"group\">\n                    <quang-input-time\n                      [label]=\"label\"\n                      hoursPlaceholder=\"00\"\n                      minutesPlaceholder=\"00\"\n                      secondsPlaceholder=\"00\"\n                      [errorMessage]=\"errorMessage\"\n                      [successMessage]=\"successMessage\"\n                      [helpMessage]=\"helpMessage\"\n                      [tabIndex]=\"1\"\n                      [id]=\"'date id'\"\n                      [formName]=\"'form'\"\n                      formControlName=\"time\"\n                    ></quang-input-time>\n                  </form>\n                  <dl>\n                    <dt>Value:</dt>\n                    <dd>{{group.controls.time.value}}</dd>\n                  </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      `,\n    props: {\n      ...args,\n      group: group,\n      errorMessage: boolean('errorMessage', true),\n      successMessage: boolean('successMessage', true),\n      helpMessage: boolean('helpMessage', true),\n      label: text('label', 'time label'),\n    }\n  }\n}"
                }
            ],
            "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts": [
                {
                    "name": "deleteToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[TOASTS API] delete toast')",
                    "rawdescription": "delete toast",
                    "description": "<p>delete toast</p>\n"
                },
                {
                    "name": "openToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[TOASTS API] open toast', props<{ toastData: QuangToast }>())",
                    "rawdescription": "open toast",
                    "description": "<p>open toast</p>\n"
                }
            ],
            "projects/quang-utility/src/lib/quang-validators/quang-validators.service.ts": [
                {
                    "name": "europeanVatNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-utility/src/lib/quang-validators/quang-validators.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  AT: /U[0-9]{8}/gm,\n  BE: /0[0-9]{9}/gm,\n  BG: /[0-9]{9,10}/gm,\n  CY: /[0-9]{8}L/gm,\n  CZ: /[0-9]{8,10}/gm,\n  DE: /[0-9]{9}/gm,\n  DK: /[0-9]{8}/gm,\n  EE: /[0-9]{9}/gm,\n  GR: /[0-9]{9}/gm,\n  ES: /[0-9A-Z][0-9]{7}[0-9A-Z]/gm,\n  FI: /[0-9]{8}/gm,\n  FR: /[0-9A-Z]{2}[0-9]{9}/gm,\n  GB: /([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})/gm,\n  HU: /[0-9]{8}/gm,\n  IE: /[0-9]S[0-9]{5}L/gm,\n  IT: /[0-9]{11}/gm,\n  LT: /([0-9]{9}|[0-9]{12})/gm,\n  LU: /[0-9]{8}/gm,\n  LV: /[0-9]{11}/gm,\n  MT: /[0-9]{8}/gm,\n  NL: /[0-9]{9}B[0-9]{2}/gm,\n  PL: /[0-9]{10}/gm,\n  PT: /[0-9]{9}/gm,\n  RO: /[0-9]{2,10}/gm,\n  SE: /[0-9]{12}/gm,\n  SI: /[0-9]{8}/gm,\n  SK: /[0-9]{10}/gm\n}"
                }
            ],
            "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts": [
                {
                    "name": "EventBus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "rawdescription": "general declaration for global library",
                    "description": "<p>general declaration for global library</p>\n"
                }
            ],
            "projects/quang-map/src/lib/google-map/google-map.component.ts": [
                {
                    "name": "google",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-map/src/lib/google-map/google-map.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "rawdescription": "global declaration for google async library",
                    "description": "<p>global declaration for google async library</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderState",
                    "defaultValue": "{\n  loaders: 0\n}",
                    "rawdescription": "loader state initial value",
                    "description": "<p>loader state initial value</p>\n"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(addLoader, (state) => ({ ...state, loaders: state.loaders + 1 })),\n  on(removeLoader, (state) => ({ ...state, loaders: state.loaders - 1 }))\n)",
                    "rawdescription": "define how loader state change",
                    "description": "<p>define how loader state change</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OfflineState",
                    "defaultValue": "{\n  line: true\n}",
                    "rawdescription": "initial offline state value",
                    "description": "<p>initial offline state value</p>\n"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(online, state => ({ ...state, line: true })),\n  on(offline, state => ({ ...state, line: false }))\n)",
                    "rawdescription": "define how the state change",
                    "description": "<p>define how the state change</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastsState",
                    "defaultValue": "{ toastData: null }",
                    "rawdescription": "initial value of toast state",
                    "description": "<p>initial value of toast state</p>\n"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(openToast, (state, action) =>\n    ({ ...state, toastData: action.toastData })\n  ),\n  on(deleteToast, (state) =>\n    ({ ...state, toastData: null })\n  )\n)",
                    "rawdescription": "defines how the status of the toast changes in the store",
                    "description": "<p>defines how the status of the toast changes in the store</p>\n"
                }
            ],
            "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts": [
                {
                    "name": "initialValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangAuthUserState",
                    "defaultValue": "{\n  isAuthenticated: false,\n  user: null,\n  roles: []\n}",
                    "rawdescription": "store state initial value",
                    "description": "<p>store state initial value</p>\n"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialValue,\n  on(userLogin, (state) => ({ ...state, isAuthenticated: true })),\n  on(userLogout, (state) => ({ ...state, isAuthenticated: false })),\n  on(userInfoLogin, (state, action) =>\n    ({ ...state, user: action.user })),\n  on(userInfoLogout, (state) => ({ ...state, user: null })),\n  on(userRolesLogin, (state, action) =>\n    ({ ...state, roles: action.roles })),\n  on(userRolesLogout, (state) => ({ ...state, user: null }))\n)",
                    "rawdescription": "Defines how the state changes based on the actions called",
                    "description": "<p>Defines how the state changes based on the actions called</p>\n"
                }
            ],
            "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts": [
                {
                    "name": "initialValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuangKeycloakUserState",
                    "defaultValue": "{\n  isAuthenticated: false,\n  user: null,\n  roles: []\n}",
                    "rawdescription": "initial state of authentication store",
                    "description": "<p>initial state of authentication store</p>\n"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialValue,\n  on(userLogin, (state) => ({ ...state, isAuthenticated: true })),\n  on(userLogout, (state) => ({ ...state, isAuthenticated: false })),\n  on(userInfoLogin, (state, action) =>\n    ({ ...state, user: action.user })),\n  on(userInfoLogout, (state) => ({ ...state, user: null })),\n  on(userRolesLogin, (state, action) =>\n    ({ ...state, roles: action.roles })),\n  on(userRolesLogout, (state) => ({ ...state, roles: [] }))\n)",
                    "rawdescription": "defines how the state changes when actions are triggered",
                    "description": "<p>defines how the state changes when actions are triggered</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts": [
                {
                    "name": "offline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[LINE] offline')",
                    "rawdescription": "set state offline",
                    "description": "<p>set state offline</p>\n"
                },
                {
                    "name": "online",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[LINE] online')",
                    "rawdescription": "set state online",
                    "description": "<p>set state online</p>\n"
                }
            ],
            "projects/quang-auth/src/lib/quang-auth-module.selector.ts": [
                {
                    "name": "QUANGAUTH_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-module.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'quangAuth'",
                    "rawdescription": "the key that identifies the module store",
                    "description": "<p>the key that identifies the module store</p>\n"
                },
                {
                    "name": "selectQuangAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-module.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<QuangAuthModuleState, QuangAuthState>(QUANGAUTH_KEY)",
                    "rawdescription": "module selector",
                    "description": "<p>module selector</p>\n"
                }
            ],
            "projects/quang-auth/src/lib/quang-auth-module.reducer.ts": [
                {
                    "name": "quangAuthReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<QuangAuthState>",
                    "defaultValue": "{\n  quangAuthUserState: QuangAuthReducers.quangAuthUserReducer\n}",
                    "rawdescription": "definition of the reducer map",
                    "description": "<p>definition of the reducer map</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/quang-dialog.selector.ts": [
                {
                    "name": "QUANGDIALOG_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/quang-dialog.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'quang-dialog-module'",
                    "rawdescription": "the key that identifies the module store",
                    "description": "<p>the key that identifies the module store</p>\n"
                },
                {
                    "name": "selectQuangDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/quang-dialog.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<QuangDialogStateModule, QuangDialogState>(QUANGDIALOG_KEY)",
                    "rawdescription": "module selector",
                    "description": "<p>module selector</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/quang-dialog.reducers.ts": [
                {
                    "name": "quangDialogReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<QuangDialogState>",
                    "defaultValue": "{\n  toastState: ToastReducers.toastReducers,\n  offlineState: OfflineReducers.offlineReducer,\n  loaderState: LoaderReducers.loaderReducers\n}",
                    "rawdescription": "definition of the reducer map",
                    "description": "<p>definition of the reducer map</p>\n"
                }
            ],
            "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts": [
                {
                    "name": "QUANGKEYCLOAK_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'quang-keycloak-module'",
                    "rawdescription": "the key that identifies the module store",
                    "description": "<p>the key that identifies the module store</p>\n"
                },
                {
                    "name": "selectQuangKeycloak",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<QuangKeycloakModuleState, QuangKeycloakState>(QUANGKEYCLOAK_KEY)",
                    "rawdescription": "module selector",
                    "description": "<p>module selector</p>\n"
                }
            ],
            "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts": [
                {
                    "name": "quangKeycloakReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<QuangKeycloakState>",
                    "defaultValue": "{\n  quangKeycloakUserState: QuangKeycloakReducers.quangKeycloakUserReducer\n}",
                    "rawdescription": "definition of the reducer map",
                    "description": "<p>definition of the reducer map</p>\n"
                }
            ],
            "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts": [
                {
                    "name": "selectHasRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rolesId: string[]): any =>\n  createSelector(\n    selectUserRoles,\n    (userRoles: string[]): boolean =>\n      rolesId\n        .map(r => userRoles.includes(r))\n        .reduce((f: boolean, r: boolean) => f && r, true)\n  )",
                    "rawdescription": "Selector to check if the user has all the required roles",
                    "description": "<p>Selector to check if the user has all the required roles</p>\n"
                },
                {
                    "name": "selectHasUntilRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rolesId: string[]): any => createSelector(\n  selectUserRoles,\n  (userRoles: string[]): boolean =>\n    rolesId\n      .map(r => userRoles.includes(r))\n      .reduce((f, r) => f || r, false)\n)",
                    "rawdescription": "Selector to check if the user has at least one required role",
                    "description": "<p>Selector to check if the user has at least one required role</p>\n"
                },
                {
                    "name": "selectIsAuthenticated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangAuth,\n  (state: QuangAuthState): boolean => state.quangAuthUserState.isAuthenticated\n)",
                    "rawdescription": "Authentication status selector",
                    "description": "<p>Authentication status selector</p>\n"
                },
                {
                    "name": "selectUserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangAuth,\n  (state: QuangAuthState): any => state.quangAuthUserState.user\n)",
                    "rawdescription": "User info status selector",
                    "description": "<p>User info status selector</p>\n"
                },
                {
                    "name": "selectUserRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangAuth,\n  (state: QuangAuthState): any[] => state.quangAuthUserState.roles\n)",
                    "rawdescription": "User role status selector",
                    "description": "<p>User role status selector</p>\n"
                }
            ],
            "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts": [
                {
                    "name": "selectHasRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rolesId: string[]): any =>\n  createSelector(\n    selectUserRoles,\n    (userRoles: string[]) =>\n      rolesId\n        .map(r => userRoles.includes(r))\n        .reduce((f, r) => f && r, true)\n  )",
                    "rawdescription": "Selector to check if the user has all the required roles",
                    "description": "<p>Selector to check if the user has all the required roles</p>\n"
                },
                {
                    "name": "selectHasUntilRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rolesId: string[]): any =>\n  createSelector(\n    selectUserRoles,\n    (userRoles: string[]) =>\n      rolesId\n        .map(r => userRoles.includes(r))\n        .reduce((f, r) => f || r, false)\n  )",
                    "rawdescription": "Selector to check if the user has at least one required role",
                    "description": "<p>Selector to check if the user has at least one required role</p>\n"
                },
                {
                    "name": "selectIsAuthenticated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangKeycloak,\n  (state: QuangKeycloakState): boolean => state?.quangKeycloakUserState?.isAuthenticated\n)",
                    "rawdescription": "Selector to retrieve the status of user authentication",
                    "description": "<p>Selector to retrieve the status of user authentication</p>\n"
                },
                {
                    "name": "selectUserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangKeycloak,\n  (state: QuangKeycloakState): any => state?.quangKeycloakUserState?.user\n)",
                    "rawdescription": "Selector to retrieve the status of the user data",
                    "description": "<p>Selector to retrieve the status of the user data</p>\n"
                },
                {
                    "name": "selectUserRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangKeycloak,\n  (state: QuangKeycloakState): any[] => state?.quangKeycloakUserState?.roles\n)",
                    "rawdescription": "Selector to retrieve the status of the role list",
                    "description": "<p>Selector to retrieve the status of the role list</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/offline/offline-store/selectors/offline.selector.ts": [
                {
                    "name": "selectLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/offline/offline-store/selectors/offline.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): boolean => state.offlineState?.line\n)",
                    "rawdescription": "selector for offline store state",
                    "description": "<p>selector for offline store state</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/loader/loader-store/selectors/loader.selectors.ts": [
                {
                    "name": "selectLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/loader/loader-store/selectors/loader.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): number => state.loaderState?.loaders\n)",
                    "rawdescription": "selector for loader state",
                    "description": "<p>selector for loader state</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts": [
                {
                    "name": "selectToast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): QuangToast => state.toastState?.toastData\n)",
                    "rawdescription": "selector for toast state",
                    "description": "<p>selector for toast state</p>\n"
                },
                {
                    "name": "selectToastState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectQuangDialog,\n  (state: QuangDialogState): ToastsState => state.toastState\n)",
                    "rawdescription": "selector for toast state",
                    "description": "<p>selector for toast state</p>\n"
                }
            ],
            "projects/quang-dialog/src/lib/notification/notification-store/actions/notification.actions.ts": [
                {
                    "name": "sendNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-dialog/src/lib/notification/notification-store/actions/notification.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[NOTIFICATION API] send notification',\n  props<{ notificationData: QuangNotification }>())",
                    "rawdescription": "open toast",
                    "description": "<p>open toast</p>\n"
                }
            ],
            "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts": [
                {
                    "name": "userInfoLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG AUTH] set user info', props<{ user: any }>())",
                    "rawdescription": "saves user data in the store",
                    "description": "<p>saves user data in the store</p>\n"
                },
                {
                    "name": "userInfoLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG AUTH] delete user info')",
                    "rawdescription": "delete user data in the store",
                    "description": "<p>delete user data in the store</p>\n"
                },
                {
                    "name": "userLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG AUTH] user login')",
                    "rawdescription": "The user has completed the login procedure",
                    "description": "<p>The user has completed the login procedure</p>\n"
                },
                {
                    "name": "userLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG AUTH] user logout')",
                    "rawdescription": "The user asks to log out",
                    "description": "<p>The user asks to log out</p>\n"
                },
                {
                    "name": "userRolesLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG AUTH] set user roles', props<{ roles: any[] }>())",
                    "rawdescription": "saves user role in the store",
                    "description": "<p>saves user role in the store</p>\n"
                },
                {
                    "name": "userRolesLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG AUTH] delete user roles')",
                    "rawdescription": "delete user role in the store",
                    "description": "<p>delete user role in the store</p>\n"
                }
            ],
            "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts": [
                {
                    "name": "userInfoLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG KEYCLOAK] set user info', props<{ user: any }>())",
                    "rawdescription": "Saves the user data in the store",
                    "description": "<p>Saves the user data in the store</p>\n"
                },
                {
                    "name": "userInfoLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG KEYCLOAK] delete user info')",
                    "rawdescription": "Delete the user data in the store",
                    "description": "<p>Delete the user data in the store</p>\n"
                },
                {
                    "name": "userLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG KEYCLOAK] user login')",
                    "rawdescription": "Saves the user's successful login in the store",
                    "description": "<p>Saves the user&#39;s successful login in the store</p>\n"
                },
                {
                    "name": "userLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG KEYCLOAK] user logout', props<{ redirectUri?: string }>())",
                    "rawdescription": "Saves the user logout in the store",
                    "description": "<p>Saves the user logout in the store</p>\n"
                },
                {
                    "name": "userRolesLogin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG KEYCLOAK] set user roles', props<{ roles: any[] }>())",
                    "rawdescription": "Saves the user roles in the store",
                    "description": "<p>Saves the user roles in the store</p>\n"
                },
                {
                    "name": "userRolesLogout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[QUANG KEYCLOAK] delete user roles')",
                    "rawdescription": "Delete the user roles in the store",
                    "description": "<p>Delete the user roles in the store</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts": [
                {
                    "name": "loaderReducers",
                    "file": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>define loader name</p>\n",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 603,
                                "end": 608,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 597,
                                "end": 602,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 619,
                                "end": 625,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 613,
                                "end": 618,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts": [
                {
                    "name": "offlineReducer",
                    "file": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>define state name</p>\n",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 553,
                                "end": 558,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 547,
                                "end": 552,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 569,
                                "end": 575,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 563,
                                "end": 568,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts": [
                {
                    "name": "quangAuthUserReducer",
                    "file": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Defines the name of the reducer</p>\n",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1146,
                                "end": 1151,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1140,
                                "end": 1145,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>module state</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1175,
                                "end": 1181,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1169,
                                "end": 1174,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>section action</p>\n"
                        }
                    ]
                }
            ],
            "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts": [
                {
                    "name": "quangKeycloakUserReducer",
                    "file": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>defines the name of the state reducer</p>\n",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts": [
                {
                    "name": "toastReducers",
                    "file": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>define reducer name</p>\n",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 715,
                                "end": 720,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "state"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 709,
                                "end": 714,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 731,
                                "end": 737,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 725,
                                "end": 730,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 78,
        "status": "very-good",
        "files": [
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-directive/has-roles.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasRolesDirective",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-directive/has-until-roles.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasUntilRolesDirective",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-directive/is-authenticated.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IsAuthenticatedDirective",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-directive/is-not-authenticated.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IsNotAuthenticatedDirective",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-guard/quang-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "QuangAuthGuard",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-guard/qunag-auth-authenticate.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "QunagAuthAuthenticateGuard",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangAuthModuleState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangAuthState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-module.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "quangAuthReducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-module.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUANGAUTH_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-module.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectQuangAuth",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userInfoLogin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userInfoLogout",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userLogin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userLogout",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userRolesLogin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/actions/quang-auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userRolesLogout",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/effects/quang-auth-login.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangAuthLoginEffects",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/effects/quang-auth-try-login.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangAuthTryLoginEffects",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/effects/quang-auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangAuthEffects",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangAuthUserState",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "quangAuthUserReducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/reducers/quang-auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasRoles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasUntilRoles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsAuthenticated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserInfo",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth-store/selectors/quang-auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserRoles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth.config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangAuthConfig",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/lib/quang-auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangAuthService",
                "coveragePercent": 94,
                "coverageCount": "17/18",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-auth/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-calendar/src/lib/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 100,
                "coverageCount": "19/19",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-calendar/src/lib/calendar/calendar.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangCalendarEvent",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-calendar/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-calendar/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-area/chart-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartAreaComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-area/chart-area.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartArea",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-bar/chart-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartBarComponent",
                "coveragePercent": 100,
                "coverageCount": "13/13",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-bar/chart-bar.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartBar",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-candlestick/chart-candlestick.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartCandlestickComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-candlestick/chart-candlestick.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartCandlestick",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-doughnut/chart-doughnut.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartDoughnutComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-doughnut/chart-doughnut.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartDoughnut",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-gauge/chart-gauge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartGaugeComponent",
                "coveragePercent": 75,
                "coverageCount": "12/16",
                "status": "good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-gauge/chart-gauge.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartGauge",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-line/chart-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartLineComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-line/chart-line.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartLine",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-pie/chart-pie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartPieComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-pie/chart-pie.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartPie",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-radar/chart-radar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartRadarComponent",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-radar/chart-radar.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartRadar",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-radar/chart-radar.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartRadarIndicator",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-tree/chart-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartTreeComponent",
                "coveragePercent": 76,
                "coverageCount": "10/13",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-tree/chart-tree.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartTree",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-treemap/chart-treemap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartTreemapComponent",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/lib/chart-treemap/chart-treemap.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartTreemap",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-chart/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/lib/card-action-header/card-action-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardActionHeaderComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/lib/card-action/card-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardActionComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/lib/card-footer/card-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardFooterComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/lib/card-header/card-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardHeaderComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/lib/card-image/card-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/quang-components/src/lib/card-simple/card-simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardSimpleComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/lib/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/autocomplete-obj-async/autocomplete-obj-async.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteObjAsyncComponent",
                "coveragePercent": 97,
                "coverageCount": "45/46",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/autocomplete-obj/autocomplete-obj.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteObjComponent",
                "coveragePercent": 100,
                "coverageCount": "40/40",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/autocomplete-service/quang-autocomplete-async.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangAutocompleteAsyncService",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/autocomplete-strg-async/autocomplete-strg-async.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteStrgAsyncComponent",
                "coveragePercent": 97,
                "coverageCount": "41/42",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/autocomplete-strg/autocomplete-strg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteStrgComponent",
                "coveragePercent": 100,
                "coverageCount": "37/37",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/datalist/datalist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatalistComponent",
                "coveragePercent": 96,
                "coverageCount": "32/33",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-checkbox/input-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputCheckboxComponent",
                "coveragePercent": 100,
                "coverageCount": "33/33",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-color/input-color.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputColorComponent",
                "coveragePercent": 100,
                "coverageCount": "35/35",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-email/input-email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputEmailComponent",
                "coveragePercent": 100,
                "coverageCount": "39/39",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-file/input-file.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputFileComponent",
                "coveragePercent": 100,
                "coverageCount": "40/40",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-fraction/input-fraction.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputFractionComponent",
                "coveragePercent": 93,
                "coverageCount": "45/48",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-number/input-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputNumberComponent",
                "coveragePercent": 100,
                "coverageCount": "39/39",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-password/input-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputPasswordComponent",
                "coveragePercent": 100,
                "coverageCount": "42/42",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-radio/input-radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputRadioComponent",
                "coveragePercent": 97,
                "coverageCount": "36/37",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-search/input-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputSearchComponent",
                "coveragePercent": 100,
                "coverageCount": "38/38",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-tel/input-tel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTelComponent",
                "coveragePercent": 100,
                "coverageCount": "40/40",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextComponent",
                "coveragePercent": 100,
                "coverageCount": "38/38",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/input-url/input-url.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputUrlComponent",
                "coveragePercent": 100,
                "coverageCount": "38/38",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/multi-select-obj/multi-select-obj.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectObjComponent",
                "coveragePercent": 97,
                "coverageCount": "37/38",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/multi-select-strg/multi-select-strg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectStrgComponent",
                "coveragePercent": 97,
                "coverageCount": "35/36",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 100,
                "coverageCount": "21/21",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/paginator/paginator.language.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaginatorLanguage",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/paginator/paginator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangPaginatorService",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/quang-auth-donwload/quang-auth-download.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "QuangAuthDownloadDirective",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/quang-auth-image/quang-auth-image.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "QuangAuthImageDirective",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/select-obj/select-obj.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectObjComponent",
                "coveragePercent": 100,
                "coverageCount": "36/36",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/select-strg/select-strg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectStrgComponent",
                "coveragePercent": 100,
                "coverageCount": "34/34",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 100,
                "coverageCount": "32/32",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/text-area/text-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextAreaComponent",
                "coveragePercent": 97,
                "coverageCount": "38/39",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/text-editor/text-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextEditorComponent",
                "coveragePercent": 100,
                "coverageCount": "48/48",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/lib/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 100,
                "coverageCount": "30/30",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-date/src/lib/input-date-range/input-date-range.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDateRangeComponent",
                "coveragePercent": 97,
                "coverageCount": "45/46",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-date/src/lib/input-date-time/input-date-time.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDateTimeComponent",
                "coveragePercent": 100,
                "coverageCount": "57/57",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-date/src/lib/input-date/input-date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDateComponent",
                "coveragePercent": 97,
                "coverageCount": "46/47",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-date/src/lib/input-time/input-time.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTimeComponent",
                "coveragePercent": 100,
                "coverageCount": "41/41",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-date/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-date/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/bottom-sheet/bottom-sheet.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangBottomSheetService",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/http-error/quang-http-error-modal/quang-http-error-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuangHttpErrorModalComponent",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/http-error/quang-http-error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "QuangHttpErrorInterceptor",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/http-error/quang-http-error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangHttpErrorService",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addLoader",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/actions/loader.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeLoader",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoaderState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loaderReducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/reducers/loader.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader-store/selectors/loader.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoader",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/loader/quang-loader.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "QuangLoaderInterceptor",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/modal/quang-modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangModalService",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/notification/notification-store/actions/notification.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendNotification",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/notification/notification-store/effects/notification.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationEffects",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/notification/notification.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangNotification",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/notification/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "offline",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/actions/offline.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "online",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OfflineState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "offlineReducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/reducers/offline.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline-store/selectors/offline.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLine",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "OfflineInterceptor",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/offline/offline.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangOfflineService",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/quang-dialog.config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangDialogConfig",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangDialogState",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangDialogStateModule",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/quang-dialog.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "quangDialogReducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/quang-dialog.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUANGDIALOG_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/quang-dialog.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectQuangDialog",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/sentry/sentry-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SentryDialogService",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/snackbar/quang-snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangSnackbarService",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteToast",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/actions/toast.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openToast",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastsState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toastReducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/reducers/toast.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectToast",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast-store/selectors/toast.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectToastState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuangToastComponent",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangToast",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/lib/toast/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangToastService",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-dialog/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangEventBusService",
                "coveragePercent": 100,
                "coverageCount": "13/13",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangBusEventOptions",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-event/src/lib/quang-event-bus/quang-event-bus.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EventBus",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-event/src/lib/quang-event-source/quang-event-source.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangEventSourceService",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-event/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-event/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-directive/has-roles.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasRolesDirective",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-directive/has-until-roles.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasUntilRolesDirective",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-directive/is-authenticated.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IsAuthenticatedDirective",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-directive/is-not-authenticated.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IsNotAuthenticatedDirective",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-guard/quang-keycloak.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "QuangKeycloakGuard",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangKeycloakModuleState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangKeycloakState",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-module.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "quangKeycloakReducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QUANGKEYCLOAK_KEY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-module.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectQuangKeycloak",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userInfoLogin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userInfoLogout",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userLogin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userLogout",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userRolesLogin",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/actions/quang-keycloak.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userRolesLogout",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/effects/quang-keycloak.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangKeycloakEffects",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QuangKeycloakUserState",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "quangKeycloakUserReducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/reducers/quang-keycloak.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasRoles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasUntilRoles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsAuthenticated",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserInfo",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak-store/selectors/quang-keycloak.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserRoles",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak.config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangKeycloakConfig",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/lib/quang-keycloak.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangKeycloakService",
                "coveragePercent": 100,
                "coverageCount": "13/13",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-keycloak/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/google-map/google-map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoogleMapComponent",
                "coveragePercent": 100,
                "coverageCount": "22/22",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/google-map/google-map.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "google",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/google-map/google-map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangGoogleMapService",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/google-map/google-marker.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GoogleMarker",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/osmap/osmap-marker.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OsmapMarker",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/osmap/osmap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OpenStreetMapComponent",
                "coveragePercent": 100,
                "coverageCount": "16/16",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/lib/quang-map.config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangMapConfig",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-map/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/lib/audio/audio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AudioComponent",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/lib/code-reader/code-reader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeReaderComponent",
                "coveragePercent": 88,
                "coverageCount": "16/18",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/lib/picture/picture.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PictureComponent",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/lib/picture/picture.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuangPicture",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/lib/three-sixty-image/three-sixty-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThreeSixtyImageComponent",
                "coveragePercent": 96,
                "coverageCount": "25/26",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/lib/video/video.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoComponent",
                "coveragePercent": 100,
                "coverageCount": "17/17",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-media/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-utility/src/lib/quang-layout/quang-layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangLayoutService",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-utility/src/lib/quang-storage-service/quang-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangStorageService",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-utility/src/lib/quang-validators/quang-validators.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QuangValidatorsService",
                "coveragePercent": 83,
                "coverageCount": "10/12",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-utility/src/lib/quang-validators/quang-validators.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "europeanVatNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quang-utility/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang-utility/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quang/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "stories/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Calendar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QuangCalendar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Area",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Candle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QuangChartArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QuangChartBar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QuangChartCandleStick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Date",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputDateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputDateTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Time",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Color",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Datalist",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "File",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Fraction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputDatalist",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputFraction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputTel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Number",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Password",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Radio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Search",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextArea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextEdit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextEditor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Url",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/blank.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlankComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}