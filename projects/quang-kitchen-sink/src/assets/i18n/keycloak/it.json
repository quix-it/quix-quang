{
  "config": {
    "project": {
      "module": "QuangKeycloakModule.forRoot(keycloakConfig())",
      "effect": "EffectsModule.forRoot([QuangKeycloakEffects.QuangKeycloakEffects])",
      "config": "function keycloakConfig (): QuangKeycloakConfig {\n  return new QuangKeycloakConfig(\n    {\n      config: environment.keycloakConfig.config,\n      initOptions: {\n        onLoad: environment.keycloakConfig.initOptions.onLoad as KeycloakOnLoad,\n        silentCheckSsoRedirectUri: environment.keycloakConfig.initOptions.silentCheckSsoRedirectUri\n      },\n      bearerExcludedUrls: environment.keycloakConfig.bearerExcludedUrls\n    },\n    false\n  )\n}"
    },
    "product": {
      "module": "create 'config.js' in 'assets/configuration'",
      "effect": "EffectsModule.forRoot([QuangKeycloakEffects.QuangKeycloakEffects])",
      "config": "window.keycloakConfig = {\n    config: {\n      url: 'http://localhost:8080/auth',\n      realm: 'blank',\n      clientId: 'blank'\n    },\n    initOptions: {\n      onLoad: 'check-sso',\n      silentCheckSsoRedirectUri:\n        window.location.origin + '/assets/static/silent-check-sso.html',\n      redirectUri: 'https://localhost/blank'\n    },\n    bearerExcludedUrls: ['/assets']\n  }"
    }
  },
  "directive": {
    "is": "<header *quangIsAuthenticated></header>\n<main *quangIsAuthenticated>\n  <aside>\n    <innova-aside></innova-aside>\n  </aside>\n  <section class=\"container-fluid\">\n    <router-outlet></router-outlet>\n  </section>\n</main>\n<footer *quangIsAuthenticated></footer>\n<quix-toast></quix-toast>",
    "all": "<accordion-group *quangHasRoles=\"[userManagerRole]\"\n                     [(isOpen)]=\"userManager\">",
    "until": "<accordion-group *quangHasUntilRoles=\"[configRole,dataSetRole,templateRole,labelRole]\"\n                     [(isOpen)]=\"services\">"
  },
  "guard": {
    "templates": "{\n    path: 'templates',\n    loadChildren: async () => await import ('./templates/templates.module')\n      .then(m => m.TemplatesModule),\n    canActivate: [QuangKeycloakGuard],\n    data: {\n      allowedRoles: [environment.roles.templateAdmin],\n      condition: 'AND'\n    }\n}"
  },
  "selector": {
    "user": "user: Observable<any> = this.store.pipe(select(selectUserInfo))",
    "is": "is: Observable<any> = this.store.pipe(select(selectIsAuthenticated))",
    "role": "roles: Observable<any> = this.store.pipe(select(selectUserRoles))",
    "all": "all: Observable<any> = this.store.pipe(select(selectHasRoles,{rolesId: ['quake_usermanager_admin']}))",
    "until": "until: Observable<any> = this.store.pipe(select(selectHasUntilRoles,{rolesId: ['quake_usermanager_admin']}))"
  }
}
