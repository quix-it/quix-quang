{
  "codemirror": {
    "demoHtml": "  <form [formGroup]=\"group\">\n            <ngx-codemirror\n              [options]=\"_markdown\"\n              formControlName=\"code\"\n            ></ngx-codemirror>\n          </form>",
    "demoCode": "  group: FormGroup = new FormGroup({\n    code: new FormControl(\n      '',\n      [Validators.required, Validators.minLength(0), Validators.maxLength(50)]\n    )\n  })\n\n  _markdown = {\n    lineNumbers: true,\n    theme: 'material',\n    mode: 'markdown'\n  }",
    "html": "_html = {\n    lineNumbers: true,\n    theme: 'darcula',\n    mode: 'htmlmixed'\n  }",
    "js": "_javascript = {\n    lineNumbers: true,\n    theme: 'cobalt',\n    mode: 'javascript'\n  }"
  },
  "clipboard": {
    "demo": "<form [formGroup]=\"group\">\n            <div class=\"form-group\">\n              <input\n                class=\"form-control\"\n                id=\"test\"\n                placeholder=\"Inserisci il contenuto da copiare\"\n                min=\"0\"\n                formControlName=\"copy\"\n                max=\"30\">\n            </div>\n          </form>\n          <button\n            type=\"button\"\n            [cdkCopyToClipboard]=\"group.controls.copy.value\"\n            class=\"btn btn-primary\">\n            Copia\n          </button>",
    "button": "constructor (\n    private readonly clipboard: Clipboard\n  ) {\n  }\n\n  copy () {\n    this.clipboard.copy('Ciao io sono deadpool')\n  }"
  },
  "excel": {
    "js": "create (): void {\n    this.prepareImageForExcel().subscribe(image => {\n      const workbook = new Workbook()\n      const worksheet = workbook.addWorksheet('Car Data')\n      const titleRow = worksheet.addRow([this.title])\n      titleRow.font = { name: 'Comic Sans MS', family: 4, size: 16, underline: 'double', bold: true }\n      const headerRow = worksheet.addRow(this.header)\n      headerRow.eachCell((cell: any, number: any) => {\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFFFFF00' },\n          bgColor: { argb: 'FF0000FF' }\n        }\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' }\n        }\n      })\n      worksheet.addRow([])\n      worksheet.addRows(this.data)\n      this.data.forEach(d => {\n        const row = worksheet.addRow(d)\n        const qty = row.getCell(5)\n        let color = 'FF99FF99'\n        if (+(qty as any).value < 500) {\n          color = 'FF9999'\n        }\n        qty.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: color }\n        }\n      }\n      )\n      const logo = workbook.addImage({\n        base64: image,\n        extension: 'png'\n      })\n      worksheet.addImage(logo, 'E1:F3')\n      workbook.xlsx.writeBuffer().then((value: any) => {\n        const blob = new Blob(\n          [value],\n          { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })\n        fs.saveAs(blob, 'CarData.xlsx')\n      })\n    })\n  }\n\n  prepareImageForExcel (): Observable<string> {\n    return new Observable(observer => {\n      this.http.get('https://picsum.photos/200/300', { responseType: 'blob' }).subscribe(\n        image => {\n          const reader = new FileReader()\n          reader.readAsDataURL(image)\n          reader.onload = () => {\n            observer.next(reader.result as string)\n            observer.complete()\n          }\n        }\n      )\n    })\n  }"
  },
  "pdf": {
    "js": "file: TDocumentDefinitions = {\n    header: 'simple text',\n    footer: {\n      columns: [\n        'Left part',\n        { text: 'Right part', alignment: 'right' }\n      ]\n    },\n    content: []\n  }\n\n  constructor (\n    private readonly http: HttpClient\n  ) {\n  }\n\n  create (): void {\n    this.prepareImageForPdf().subscribe(\n      image => {\n        this.file.content = [\n          {\n            layout: 'lightHorizontalLines', // optional\n            table: {\n              headerRows: 1,\n              widths: ['*', 'auto', 100, '*'],\n\n              body: [\n                ['First', 'Second', 'Third', 'The last one'],\n                ['Value 1', 'Value 2', 'Value 3', 'Value 4'],\n                [{ text: 'Bold value', bold: true }, 'Val 2', 'Val 3', 'Val 4']\n              ]\n            }\n          },\n          'Bulleted list example:',\n          {\n            ul: [\n              'Item 1',\n              'Item 2',\n              'Item 3',\n              { text: 'Item 4', bold: true }\n            ]\n          },\n          'Numbered list example:',\n          {\n            ol: [\n              'Item 1',\n              'Item 2',\n              'Item 3'\n            ]\n          },\n          { qr: 'text in QR' },\n          ({\n            image: image,\n            width: 150,\n            height: 150\n          })\n        ]\n        pdfMake.createPdf(this.file).download()\n      }\n    )\n  }\n\n  prepareImageForPdf (): Observable<any> {\n    return new Observable(observer => {\n      this.http.get('https://picsum.photos/200/300', { responseType: 'blob' }).subscribe(\n        image => {\n          const reader = new FileReader()\n          reader.readAsDataURL(image)\n          reader.onload = () => {\n            observer.next(reader.result)\n            observer.complete()\n          }\n        }\n      )\n    })\n  }"
  },
  "mask": {
    "mask1": "<div class=\"form-group\">\n              <label for=\"mask1\">label</label>\n              <input id=\"mask1\"\n                     type=\"text\"\n                     class=\"form-control\"\n                     [mask]=\"'00/00/00 00:00:00'\"\n                     [showMaskTyped]=\"true\"\n                     formControlName=\"mask1\"\n                     />\n            </div>",
    "mask2": "<div class=\"form-group\">\n              <label for=\"mask2\">label</label>\n              <input id=\"mask2\"\n                     type=\"text\"\n                     class=\"form-control\"\n                     formControlName=\"mask2\"\n                     [mask]=\"'000-0000000'\"\n                     [showMaskTyped]=\"true\"/>\n            </div>",
    "mask3": "<div class=\"form-group\">\n              <label for=\"mask1\">label</label>\n              <input id=\"mask3\"\n                     type=\"text\"\n                     class=\"form-control\"\n                     formControlName=\"mask3\"\n                     [mask]=\"'0000-0000-0000-0000'\"\n                     [showMaskTyped]=\"true\"/>\n            </div>",
    "mask4": "<div class=\"form-group\">\n              <label for=\"mask4\">label</label>\n              <input id=\"mask4\"\n                     type=\"text\"\n                     class=\"form-control\"\n                     formControlName=\"mask4\"\n                     [hiddenInput]=\"true\"\n                     [mask]=\"'XXX/X0/0000'\"\n                     placeholder=\"***/*8/2020\"/>\n            </div>"
  },
  "swiper": {
    "html": "<swiper\n              [slidesPerView]=\"2.5\"\n              [spaceBetween]=\"20\">\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=1'\"></ng-template>\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=2'\"></ng-template>\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=3'\"></ng-template>\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=4'\"></ng-template>\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=5'\"></ng-template>\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=6'\"></ng-template>\n              <ng-template swiperSlide><img alt=\"swiper\" [src]=\"'https://picsum.photos/200/300?number=7'\"></ng-template>\n            </swiper>"
  },
  "infinity": {
    "html": "<div infiniteScroll\n           [infiniteScrollDistance]=\"0.5\"\n           [infiniteScrollThrottle]=\"300\"\n           [infiniteScrollDisabled]=\"stop\"\n           (scrolled)=\"onScroll()\">\n        <quang-card *ngFor=\"let c of cards\">\n          <h5 cardHeader>{{'Card ' + c}}</h5>\n          <div cardBody>\n            <img [src]=\"'https://picsum.photos/500/500?number=' + c\" [alt]=\"c\">\n          </div>\n        </quang-card>\n      </div>",
    "code": "cards: number[] = [1, 2, 3, 4, 5, 6]\n  stop: boolean = false\n\n  onScroll (): void {\n    this.stop = true\n    of('').pipe(\n      delay(500),\n      take(1)\n    ).subscribe(() => {\n      this.cards = this.cards.concat([\n        this.cards.length + 1,\n        this.cards.length + 2,\n        this.cards.length + 3,\n        this.cards.length + 4,\n        this.cards.length + 5,\n        this.cards.length + 6\n      ])\n      this.stop = false\n    })\n  }"
  },
  "virtual": {
    "html": "<cdk-virtual-scroll-viewport\n            itemSize=\"800\"\n            class=\"example-viewport\">\n            <div *cdkVirtualFor=\"let c of cards\">\n              <quang-card>\n                <h5 cardHeader>{{'Card ' + c}}</h5>\n                <div cardBody>\n                  <img [src]=\"'https://picsum.photos/500/500?number=' + c\" [alt]=\"c\">\n                </div>\n              </quang-card>\n            </div>\n          </cdk-virtual-scroll-viewport>",
    "code": "cards: number[] = Array.from({ length: 100000 }).map((_, i) => i)"
  },
  "platform": {
    "html": "<dl>\n            <dt>Is Android:</dt>\n            <dd>{{platform.ANDROID}}</dd>\n            <dt>Is iOS:</dt>\n            <dd>{{platform.IOS}}</dd>\n            <dt>Is Firefox:</dt>\n            <dd>{{platform.FIREFOX}}</dd>\n            <dt>Is Blink:</dt>\n            <dd>{{platform.BLINK}}</dd>\n            <dt>Is Webkit:</dt>\n            <dd>{{platform.WEBKIT}}</dd>\n            <dt>Is Trident:</dt>\n            <dd>{{platform.TRIDENT}}</dd>\n            <dt>Is Edge:</dt>\n            <dd>{{platform.EDGE}}</dd>\n            <dt>Is Safari:</dt>\n            <dd>{{platform.SAFARI}}</dd>\n            <dt>Supported input types:</dt>\n            <dd>{{supportedInputTypes | json}}</dd>\n            <dt>Supports passive event listeners:</dt>\n            <dd>{{supportsPassiveEventListeners}}</dd>\n            <dt>Supports scroll behavior:</dt>\n            <dd>{{supportsScrollBehavior}}</dd>\n          </dl>",
    "code": "supportedInputTypes: string[] = Array.from(getSupportedInputTypes())\n  supportsPassiveEventListeners: boolean = supportsPassiveEventListeners()\n  supportsScrollBehavior: boolean = supportsScrollBehavior()\n\n  constructor (\n    public readonly platform: Platform\n  ) { }"
  },
  "dd": {
    "demo": "<div class=\"example-box\"\n               cdkDrag>\n            Drag me around\n          </div>",
    "zone": "<div class=\"example-boundary\">\n            <div class=\"example-box\"\n                 cdkDragBoundary=\".example-boundary\"\n                 cdkDrag>\n              I can only be dragged within the container\n            </div>\n          </div>",
    "listHtml": "<div class=\"example-container  mb-3\">\n            <h4>Da fare</h4>\n            <div\n              cdkDropList\n              #todoList=\"cdkDropList\"\n              [cdkDropListData]=\"todo\"\n              [cdkDropListConnectedTo]=\"[doneList]\"\n              class=\"example-list\"\n              (cdkDropListDropped)=\"dropConnection($event)\">\n              <div class=\"example-box-list\"\n                   *ngFor=\"let item of todo\"\n                   cdkDrag>\n                {{item}}\n              </div>\n            </div>\n          </div>\n          <div class=\"example-container\">\n            <h4>Fatti</h4>\n            <div\n              cdkDropList\n              #doneList=\"cdkDropList\"\n              [cdkDropListData]=\"done\"\n              [cdkDropListConnectedTo]=\"[todoList]\"\n              class=\"example-list\"\n              (cdkDropListDropped)=\"dropConnection($event)\">\n              <div class=\"example-box-list\"\n                   *ngFor=\"let item of done\"\n                   cdkDrag>\n                {{item}}\n              </div>\n            </div>\n          </div>",
    "listCode": "dropConnection (event: CdkDragDrop<string[]>): void {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex)\n    } else {\n      transferArrayItem(event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex)\n    }\n  }",
    "matrixHtml": "<div class=\"example-matrix\">\n            <div *ngFor=\"let r of row; let i = index\">\n              <div\n                cdkDropListOrientation=\"horizontal\"\n                cdkDropList\n                [id]=\"r.id\"\n                [cdkDropListData]=\"r.value\"\n                [cdkDropListConnectedTo]=\"connectedTo\"\n                class=\"list\"\n                (cdkDropListDropped)=\"dropConnection($event)\">\n                <div class=\"box\" *ngFor=\"let item of r.value; let y = index\"\n                     cdkDrag>{{'index ' + getIndex(i, y)}} - {{item}}</div>\n              </div>\n            </div>\n          </div>",
    "matrixCode": "dropConnection (event: CdkDragDrop<string[]>): void {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex)\n    } else {\n      transferArrayItem(event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex)\n    }\n  }\n\n  addRow (): void {\n    this.row.push({ id: 'row' + (this.row.length + 1), value: ['val', 'val', 'val', 'val', 'val'] })\n    this.connectedTo.push('row' + (this.row.length))\n  }\n\n  getIndex (i: number, y: number): number {\n    for (let z = 0; z < i; z++) {\n      y += this.row[z].value.length\n    }\n    return y\n  }"
  },
  "cropper": {
    "html": "<div class=\"mb-3\">\n            <label for=\"input-file\" class=\"form-label\">Seleziona l'immagine</label>\n            <input type=\"file\"\n                   class=\"form-control\"\n                   id=\"input-file\"\n                   (change)=\"fileChangeEvent($event)\"/>\n          </div>\n          <image-cropper\n            [imageChangedEvent]=\"imageChangedEvent\"\n            [maintainAspectRatio]=\"true\"\n            [aspectRatio]=\"4 / 4\"\n            format=\"png\"\n            (imageCropped)=\"imageCropped($event)\"\n            (imageLoaded)=\"imageLoaded()\"\n            (cropperReady)=\"cropperReady()\"\n            (loadImageFailed)=\"loadImageFailed()\"\n          ></image-cropper>\n          <img [src]=\"croppedImage\"/>",
    "code": "imageChangedEvent: any = ''\n  croppedImage: any = ''\n\n  fileChangeEvent (event: any): void {\n    this.imageChangedEvent = event\n  }\n\n  imageCropped (event: ImageCroppedEvent): void {\n    this.croppedImage = event.base64\n  }\n\n  imageLoaded (image?: LoadedImage): void {\n    // show cropper\n  }\n\n  cropperReady (): void {\n    // cropper ready\n  }\n\n  loadImageFailed (): void {\n    // show message\n  }"
  },
  "transloco": {
    "lazy": "providers: [\n    { provide: TRANSLOCO_SCOPE, useValue: 'modulo' }\n  ]"
  },
  "data-table": {
    "html": "<table mat-table \n                 [dataSource]=\"dataSource\" \n                 class=\"mat-elevation-z8\">\n            <ng-container \n              matColumnDef=\"position\">\n              <th mat-header-cell \n                  *matHeaderCellDef> \n                No. \n              </th>\n              <td mat-cell \n                  *matCellDef=\"let element\"> \n                {{element.position}} \n              </td>\n            </ng-container>\n            <ng-container \n              matColumnDef=\"name\">\n              <th mat-header-cell \n                  *matHeaderCellDef> \n                Name \n              </th>\n              <td mat-cell \n                  *matCellDef=\"let element\"> \n                {{element.name}} \n              </td>\n            </ng-container>\n            <ng-container \n              matColumnDef=\"weight\">\n              <th mat-header-cell \n                  *matHeaderCellDef> \n                Weight \n              </th>\n              <td mat-cell \n                  *matCellDef=\"let element\"> \n                {{element.weight}} \n              </td>\n            </ng-container>\n            <ng-container \n              matColumnDef=\"symbol\">\n              <th mat-header-cell \n                  *matHeaderCellDef> \n                Symbol \n              </th>\n              <td mat-cell \n                  *matCellDef=\"let element\"> \n                {{element.symbol}} \n              </td>\n            </ng-container>\n            <tr mat-header-row \n                *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row \n                *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>",
    "code": "displayedColumns: string[] = ['position', 'name', 'weight', 'symbol']\n  dataSource: PeriodicElement[] = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' }\n  ]",
    "sort-html": "<table mat-table\n                 [dataSource]=\"sortDataSource\"\n                 matSort\n                 class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"position\">\n              <th mat-header-cell *matHeaderCellDef\n                  mat-sort-header\n                  sortActionDescription=\"Sort by number\">\n                No.\n              </th>\n              <td mat-cell *matCellDef=\"let element\">\n                {{element.position}}\n              </td>\n            </ng-container>\n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef\n                  mat-sort-header\n                  sortActionDescription=\"Sort by name\">\n                Name\n              </th>\n              <td mat-cell\n                  *matCellDef=\"let element\">\n                {{element.name}}\n              </td>\n            </ng-container>\n            <ng-container\n              matColumnDef=\"weight\">\n              <th mat-header-cell\n                  *matHeaderCellDef\n                  mat-sort-header\n                  sortActionDescription=\"Sort by weight\">\n                Weight\n              </th>\n              <td mat-cell\n                  *matCellDef=\"let element\">\n                {{element.weight}}\n              </td>\n            </ng-container>\n            <ng-container\n              matColumnDef=\"symbol\">\n              <th mat-header-cell\n                  *matHeaderCellDef\n                  mat-sort-header\n                  sortActionDescription=\"Sort by symbol\">\n                Symbol\n              </th>\n              <td mat-cell\n                  *matCellDef=\"let element\">\n                {{element.symbol}}\n              </td>\n            </ng-container>\n            <tr mat-header-row\n                *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row\n                *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n          </table>",
    "sort-code": "displayedColumns: string[] = ['position', 'name', 'weight', 'symbol']\n  dataSource: PeriodicElement[] = [\n    { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\n    { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n    { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n    { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n    { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n    { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n    { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n    { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n    { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n    { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' }\n  ]\n\n  sortDataSource = new MatTableDataSource(this.dataSource)\n  @ViewChild(MatSort) sort: MatSort | null = null\n\n  ngAfterViewInit (): void {\n    this.sortDataSource.sort = this.sort\n  }",
    "sticky-html": "<table mat-table\n                   [dataSource]=\"dataSource\">\n              <ng-container\n                matColumnDef=\"position\">\n                <th mat-header-cell\n                    *matHeaderCellDef> No. </th>\n                <td mat-cell\n                    *matCellDef=\"let element\">\n                  {{element.position}}\n                </td>\n              </ng-container>\n              <ng-container matColumnDef=\"name\">\n                <th mat-header-cell\n                    *matHeaderCellDef>\n                  Name\n                </th>\n                <td mat-cell\n                    *matCellDef=\"let element\">\n                  {{element.name}}\n                </td>\n              </ng-container>\n              <ng-container matColumnDef=\"weight\">\n                <th mat-header-cell\n                    *matHeaderCellDef>\n                  Weight\n                </th>\n                <td mat-cell\n                    *matCellDef=\"let element\">\n                  {{element.weight}}\n                </td>\n              </ng-container>\n              <ng-container matColumnDef=\"symbol\">\n                <th mat-header-cell\n                    *matHeaderCellDef>\n                  Symbol\n                </th>\n                <td mat-cell\n                    *matCellDef=\"let element\">\n                  {{element.symbol}}\n                </td>\n              </ng-container>\n              <tr mat-header-row\n                  *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n              <tr mat-row\n                  *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>"
  },
  "vconsole": {
    "code": "console: VConsole | null = null\n\n  openConsole (): void {\n    this.console = new VConsole({ theme: 'dark' })\n  }\n\n  closeConsole (): void {\n    this.console?.destroy()\n  }"
  }
}
