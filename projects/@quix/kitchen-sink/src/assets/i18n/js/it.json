{
  "array": {
    "forEach": "this._array.forEach((v: string, i: number, a: string[]) => {\n      console.log(`${i} ${v}`)\n    })",
    "indexOf": "this._methodResult = this._array.indexOf('Nemo')",
    "lastIndexOf": "this._methodResult = this._array.lastIndexOf('Nemo')",
    "includes": "this._methodResult = this._array.includes('Nemo')",
    "find": "this._methodResult = this._array.find((v: { fish: string, name: string }) => v.name === 'Nemo')",
    "findIndex": "this._methodResult = this._array.findIndex((v: { fish: string, name: string }) => v.name === 'Nemo')",
    "every": "this._methodResult = this._array.every((v: { fish: string, name: string }) => v.name.includes('Nemo'))",
    "some": "this._methodResult = this._array.some((v: { fish: string, name: string }) => v.name.includes('Nemo'))",
    "sort": "this._methodResult = [...this._array].sort((a: { fish: string, name: string }, b: { fish: string, name: string }) => a.name.localeCompare(b.name, 'it'))",
    "filter": "this._methodResult = this._array.filter((v: { fish: string, name: string }) => v.name.includes('e'))",
    "reduce": "this._methodResult = this._array.reduce((acc: { [key: string]: { fish: string, name: string }[] }, v: { fish: string, name: string }) => {\n      if (!acc[v.name.charAt(0)]) {\n        acc[v.name.charAt(0)] = []\n      }\n      acc[v.name.charAt(0)].push(v)\n      return acc\n    }, {})",
    "reduceRight": "this._methodResult = this._array.reduceRight((acc: string, v: { fish: string, name: string }) => `${acc}-${v.name}`, '')",
    "map": "this._methodResult = this._array.map((v:{ fish: string, name: string } , i: number) => ({ ...v, position: i }))",
    "concat": "this._methodResult = this._array.concat(findDory)",
    "concatSpread": "this._spread = [...this._array,...findDory]",
    "slice": "this._methodResult = this._array.slice(1, 3)",
    "splice": "this._methodResult = [...this._array].splice(3, 1)",
    "reverse": "this._methodResult = [...this._array].reverse()",
    "copyWithin": "this._methodResult = [...this._array].copyWithin(1, 3)",
    "join": "this._methodResult = this._array.join('-')",
    "fill": "this._methodResult = [...this._array].fill('fillValue')",
    "flat": "this._methodResult = this._array.flat()",
    "flatMap": "this._methodResult = this._array.flatMap((v: string) => [v, v.toUpperCase()])"
  },
  "map": {
    "keyvalue": "<dl>\n    <ng-container *ngFor=\"let i of map | keyvalue\">\n                  <dt>{{i.key}}</dt>\n                  <dd>{{i.value | json}}</dd>\n                </ng-container>\n              </dl>",
    "set": "this.map.set(\n        this.group.controls.key.value,\n        JSON.parse(this.group.controls.value.value)\n      )",
    "delete": "this.map.delete(this.group.controls.key.value)",
    "clear": " this.map.clear()"
  }
}
